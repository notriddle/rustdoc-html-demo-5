(function() {var type_impls = {
"std":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-429\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-429\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-430\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-430\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-431\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-431\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-432\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-432\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-433\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-433\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-434\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-434\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-435\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-435\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-436\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-436\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-437\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-437\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-438\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-438\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-142\"><a href=\"#panics-142\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-439\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-439\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-143\"><a href=\"#panics-143\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-440\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-440\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-144\"><a href=\"#panics-144\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-441\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-441\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-145\"><a href=\"#panics-145\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-442\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-442\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-146\"><a href=\"#panics-146\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-443\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-443\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Binary-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-61\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-61\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Binary-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-62\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-62\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Binary-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-63\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-63\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Binary-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Binary-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-65\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-65\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#130\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#130\">source</a><a href=\"#method.from-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#130\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#130\">source</a><a href=\"#method.from-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#130\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#130\">source</a><a href=\"#method.from-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#130\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#130\">source</a><a href=\"#method.from-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#130\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#130\">source</a><a href=\"#method.from-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI64</code> into an <code>i64</code></p>\n</div></details></div></details>","From","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI64</code> into an <code>i64</code></p>\n</div></details></div></details>","From","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-48\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI64</code> into an <code>i64</code></p>\n</div></details></div></details>","From","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-49\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI64</code> into an <code>i64</code></p>\n</div></details></div></details>","From","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-50\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI64</code> into an <code>i64</code></p>\n</div></details></div></details>","From","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#120\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#120\">source</a><a href=\"#method.from-51\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#120\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#120\">source</a><a href=\"#method.from-52\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#120\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#120\">source</a><a href=\"#method.from-53\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#120\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#120\">source</a><a href=\"#method.from-54\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#120\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#120\">source</a><a href=\"#method.from-55\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#127\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#127\">source</a><a href=\"#method.from-56\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#127\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#127\">source</a><a href=\"#method.from-57\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#127\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#127\">source</a><a href=\"#method.from-58\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#127\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#127\">source</a><a href=\"#method.from-59\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#127\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#127\">source</a><a href=\"#method.from-60\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#118\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-61\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#118\">source</a><a href=\"#method.from-61\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#118\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-62\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#118\">source</a><a href=\"#method.from-62\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#118\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-63\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#118\">source</a><a href=\"#method.from-63\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#118\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#118\">source</a><a href=\"#method.from-64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#118\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-65\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#118\">source</a><a href=\"#method.from-65\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#132\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-66\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#132\">source</a><a href=\"#method.from-66\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#132\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-67\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#132\">source</a><a href=\"#method.from-67\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#132\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-68\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#132\">source</a><a href=\"#method.from-68\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#132\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-69\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#132\">source</a><a href=\"#method.from-69\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#132\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-70\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#132\">source</a><a href=\"#method.from-70\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#114\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-71\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#114\">source</a><a href=\"#method.from-71\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#114\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-72\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#114\">source</a><a href=\"#method.from-72\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#114\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-73\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#114\">source</a><a href=\"#method.from-73\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#114\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-74\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#114\">source</a><a href=\"#method.from-74\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#114\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-75\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#114\">source</a><a href=\"#method.from-75\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#94\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-76\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#94\">source</a><a href=\"#method.from-76\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i64</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-900\"><a href=\"#examples-900\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from(true),+1);%0Aassert_eq!(i64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#94\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-77\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#94\">source</a><a href=\"#method.from-77\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i64</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-901\"><a href=\"#examples-901\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from(true),+1);%0Aassert_eq!(i64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#94\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-78\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#94\">source</a><a href=\"#method.from-78\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i64</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-902\"><a href=\"#examples-902\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from(true),+1);%0Aassert_eq!(i64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#94\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-79\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#94\">source</a><a href=\"#method.from-79\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i64</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-903\"><a href=\"#examples-903\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from(true),+1);%0Aassert_eq!(i64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#94\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-80\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#94\">source</a><a href=\"#method.from-80\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i64</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-904\"><a href=\"#examples-904\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from(true),+1);%0Aassert_eq!(i64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::macos::raw::time_t"],["<section id=\"impl-Copy-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Copy","std::ffi::c_long"],["<section id=\"impl-Copy-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Copy","std::ffi::c_longlong"],["<section id=\"impl-Copy-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Copy","std::os::linux::raw::arch::blkcnt_t"],["<section id=\"impl-Copy-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Copy","std::os::linux::raw::arch::off_t"],["<section id=\"impl-Copy-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Copy","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-444\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-444\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-445\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-445\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-446\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-446\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-447\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-447\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-448\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-448\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-449\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-449\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-450\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-450\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-451\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-451\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-452\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-452\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-453\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-453\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-50\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-50\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-50\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-51\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-51\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-51\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-52\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-52\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-52\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-53\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-53\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-53\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-54\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-54\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-54\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-55\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-55\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-55\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-56\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-56\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-56\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-57\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-57\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-57\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-58\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-58\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-58\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-59\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-59\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-59\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-60\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-60\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-60\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-61\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-61\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-61\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-61\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-62\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-62\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-62\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-62\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-63\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-63\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-63\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-63\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-64\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-64\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-65\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-65\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-65\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-65\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-66\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-66\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-66\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-66\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-67\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-67\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-67\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-67\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-68\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-68\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-68\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-68\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-69\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-69\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-69\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-69\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#397\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-70\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#397\">source</a><a href=\"#method.try_from-70\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-70\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-70\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#397\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-71\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#397\">source</a><a href=\"#method.try_from-71\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-71\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-71\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#397\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-72\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#397\">source</a><a href=\"#method.try_from-72\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-72\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-72\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#397\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-73\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#397\">source</a><a href=\"#method.try_from-73\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-73\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-73\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#397\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-74\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#397\">source</a><a href=\"#method.try_from-74\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-74\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-74\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#172\">source</a></span><a href=\"#impl-Default-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#172\">source</a><a href=\"#method.default-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#172\">source</a></span><a href=\"#impl-Default-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#172\">source</a><a href=\"#method.default-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#172\">source</a></span><a href=\"#impl-Default-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#172\">source</a><a href=\"#method.default-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#172\">source</a></span><a href=\"#impl-Default-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#172\">source</a><a href=\"#method.default-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#172\">source</a></span><a href=\"#impl-Default-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#172\">source</a><a href=\"#method.default-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-LowerHex-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-66\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-66\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-LowerHex-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-67\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-67\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-LowerHex-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-68\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-68\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-LowerHex-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-69\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-69\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-LowerHex-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-70\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-70\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-454\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-454\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-455\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-455\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-456\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-456\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-457\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-457\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-458\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-458\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-459\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-459\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-460\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-460\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-461\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-461\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-462\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-462\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-463\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-463\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::macos::raw::time_t"],["<section id=\"impl-ConstParamTy-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","ConstParamTy","std::ffi::c_long"],["<section id=\"impl-ConstParamTy-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","ConstParamTy","std::ffi::c_longlong"],["<section id=\"impl-ConstParamTy-for-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","ConstParamTy","std::os::linux::raw::arch::blkcnt_t"],["<section id=\"impl-ConstParamTy-for-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","ConstParamTy","std::os::linux::raw::arch::off_t"],["<section id=\"impl-ConstParamTy-for-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","ConstParamTy","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-144\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-144\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-145\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-145\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-146\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-146\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-147\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-147\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-148\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-148\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-149\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-149\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-150\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-150\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-151\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-151\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-152\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-152\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-153\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-153\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-154\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-154\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-155\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-155\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-156\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-156\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-157\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-157\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-158\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-158\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-159\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-159\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-160\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-160\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-161\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-161\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-162\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-162\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-163\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-163\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-164\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-164\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-165\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-165\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-166\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-166\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-167\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-167\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-168\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-168\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-169\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-169\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-170\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-170\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-171\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-171\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-172\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-172\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-173\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-173\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-174\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-174\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-175\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-175\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-176\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-176\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-177\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-177\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-178\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-178\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-179\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-179\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-180\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-180\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-181\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-181\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-182\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-182\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-183\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-183\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-184\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-184\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-185\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-185\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-186\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-186\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-187\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-187\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-188\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-188\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-189\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-189\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-190\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-190\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-191\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-191\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-192\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-192\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-193\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-193\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-194\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-194\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-195\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-195\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-196\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-196\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-197\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-197\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-198\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-198\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-199\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-199\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-200\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-200\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-201\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-201\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-202\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-202\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-203\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-203\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-204\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-204\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-205\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-205\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-206\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-206\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-207\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-207\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-208\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-208\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-209\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-209\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-210\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-210\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-211\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-211\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-212\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-212\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-213\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-213\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-214\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-214\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-215\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-215\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-216\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-216\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-217\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-217\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-218\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-218\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-219\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-219\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-220\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-220\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-221\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-221\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-222\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-222\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-223\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-223\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-224\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-224\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-225\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-225\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-226\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-226\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-227\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-227\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-228\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-228\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-229\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-229\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-230\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-230\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-231\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-231\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-232\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-232\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-233\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-233\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-234\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-234\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-235\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-235\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-236\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-236\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-237\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-237\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-238\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-238\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-239\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-239\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-240\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-240\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-241\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-241\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-242\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-242\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-243\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-243\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-244\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-244\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-245\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-245\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-246\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-246\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-247\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-247\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-248\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-248\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-249\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-249\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-250\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-250\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-251\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-251\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-252\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-252\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-253\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-253\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-254\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-254\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-255\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-255\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-256\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-256\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-257\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-257\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-258\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-258\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-259\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-259\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-260\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-260\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-261\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-261\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-262\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-262\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-263\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-263\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-464\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-464\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-465\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-465\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-466\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-466\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-467\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-467\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-468\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-468\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-469\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-469\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-470\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-470\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-471\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-471\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-472\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-472\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-473\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-473\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-144\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-144\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-145\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-145\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-146\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-146\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-147\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-147\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-148\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-148\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-149\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-149\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-150\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-150\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-151\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-151\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-152\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-152\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-153\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-153\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-154\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-154\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-155\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-155\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-156\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-156\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-157\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-157\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-158\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-158\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-159\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-159\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-160\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-160\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-161\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-161\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-162\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-162\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-163\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-163\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-164\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-164\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-165\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-165\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-166\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-166\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-167\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-167\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-168\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-168\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-169\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-169\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-170\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-170\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-171\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-171\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-172\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-172\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-173\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-173\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-174\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-174\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-175\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-175\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-176\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-176\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-177\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-177\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-178\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-178\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-179\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-179\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-180\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-180\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-181\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-181\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-182\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-182\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-183\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-183\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-184\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-184\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-185\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-185\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-186\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-186\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-187\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-187\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-188\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-188\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-189\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-189\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-190\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-190\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-191\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-191\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-192\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-192\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-193\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-193\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-194\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-194\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-195\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-195\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-196\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-196\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-197\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-197\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-198\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-198\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-199\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-199\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-200\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-200\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-201\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-201\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-202\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-202\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-203\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-203\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-204\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-204\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-205\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-205\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-206\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-206\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-207\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-207\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-208\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-208\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-209\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-209\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-210\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-210\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-211\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-211\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-212\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-212\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-213\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-213\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-214\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-214\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-215\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-215\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-216\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-216\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-217\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-217\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-218\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-218\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-219\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-219\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-220\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-220\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-221\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-221\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-222\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-222\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-223\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-223\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-224\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-224\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-225\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-225\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-226\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-226\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-227\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-227\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-228\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-228\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-229\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-229\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-230\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-230\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-231\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-231\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-232\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-232\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-233\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-233\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-234\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-234\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-235\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-235\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-236\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-236\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-237\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-237\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-238\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-238\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-239\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-239\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-240\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-240\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-241\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-241\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-242\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-242\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-243\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-243\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-244\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-244\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-245\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-245\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-246\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-246\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-247\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-247\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-248\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-248\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-249\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-249\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-250\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-250\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-251\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-251\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-252\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-252\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-253\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-253\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-254\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-254\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-255\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-255\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-256\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-256\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-257\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-257\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-258\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-258\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-259\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-259\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-260\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-260\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-261\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-261\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-262\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-262\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-263\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-263\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-474\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-474\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-144\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-144\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-475\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-475\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-145\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-145\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-476\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-476\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-146\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-146\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-477\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-477\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-147\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-147\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-478\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-478\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-148\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-148\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-479\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-479\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-149\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-149\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-480\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-480\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-150\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-150\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-481\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-481\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-151\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-151\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-482\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-482\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-152\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-152\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-483\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-483\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-153\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-153\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-484\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-484\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-154\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-154\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-485\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-485\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-155\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-155\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-486\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-486\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-156\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-156\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-487\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-487\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-157\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-157\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-488\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-488\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-158\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-158\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-489\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-489\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-159\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-159\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-490\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-490\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-160\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-160\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-491\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-491\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-161\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-161\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-492\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-492\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-162\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-162\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-493\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-493\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-163\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-163\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-494\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-494\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-164\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-164\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-495\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-495\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-165\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-165\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-496\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-496\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-166\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-166\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-497\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-497\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-167\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-167\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-498\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-498\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-168\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-168\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-499\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-499\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-169\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-169\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-500\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-500\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-170\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-170\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-501\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-501\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-171\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-171\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-502\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-502\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-172\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-172\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-503\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-503\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-173\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-173\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-504\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-504\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-174\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-174\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-505\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-505\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-175\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-175\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-506\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-506\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-176\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-176\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-507\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-507\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-177\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-177\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-508\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-508\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-178\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-178\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-509\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-509\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-179\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-179\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-510\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-510\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-180\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-180\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-511\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-511\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-181\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-181\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-512\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-512\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-182\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-182\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-513\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-513\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-183\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-183\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-514\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-514\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-184\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-184\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-515\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-515\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-185\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-185\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-516\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-516\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-186\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-186\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-517\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-517\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-187\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-187\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-518\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-518\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-188\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-188\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-519\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-519\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-189\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-189\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-520\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-520\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-190\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-190\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-521\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-521\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-191\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-191\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-522\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-522\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-192\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-192\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-523\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-523\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-193\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-193\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-524\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-524\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-194\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-194\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-525\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-525\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-195\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-195\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-526\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-526\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-196\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-196\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-527\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-527\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-197\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-197\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-528\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-528\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-198\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-198\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-529\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-529\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-199\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-199\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-530\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-530\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-200\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-200\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-531\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-531\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-201\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-201\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-532\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-532\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-202\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-202\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-533\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-533\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-203\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-203\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-534\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-534\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-204\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-204\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-535\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-535\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-205\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-205\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-536\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-536\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-206\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-206\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-537\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-537\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-207\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-207\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-538\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-538\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-208\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-208\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-539\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-539\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-209\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-209\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-540\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-540\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-210\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-210\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-541\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-541\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-211\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-211\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-542\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-542\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-212\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-212\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-543\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-543\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-213\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-213\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-544\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-544\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-214\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-214\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-545\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-545\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-215\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-215\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-546\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-546\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-216\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-216\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-547\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-547\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-217\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-217\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-548\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-548\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-218\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-218\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-549\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-549\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-219\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-219\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-550\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-550\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-220\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-220\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-551\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-551\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-221\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-221\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-552\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-552\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-222\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-222\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-553\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-553\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-223\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-223\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-554\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-554\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-224\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-224\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-555\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-555\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-225\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-225\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-556\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-556\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-226\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-226\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-557\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-557\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-227\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-227\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-558\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-558\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-228\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-228\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-559\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-559\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-229\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-229\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-560\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-560\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-230\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-230\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-561\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-561\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-231\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-231\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-562\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-562\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-232\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-232\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-563\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-563\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-233\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-233\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-564\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-564\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-234\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-234\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-565\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-565\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-235\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-235\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-566\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-566\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-236\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-236\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-567\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-567\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-237\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-237\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-568\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-568\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-238\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-238\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-569\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-569\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-239\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-239\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-570\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-570\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-240\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-240\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-571\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-571\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-241\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-241\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-572\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-572\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-242\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-242\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-573\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-573\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-243\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-243\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-574\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-574\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-244\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-244\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-575\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-575\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-245\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-245\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-576\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-576\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-246\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-246\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-577\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-577\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-247\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-247\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-578\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-578\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-248\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-248\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-579\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-579\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-249\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-249\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-580\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-580\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-250\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-250\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-581\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-581\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-251\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-251\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-582\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-582\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-252\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-252\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-583\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-583\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-253\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-253\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-584\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-584\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-254\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-254\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-585\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-585\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-255\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-255\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-586\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-586\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-256\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-256\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-587\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-587\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-257\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-257\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-588\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-588\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-258\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-258\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-589\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-589\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-259\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-259\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-590\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-590\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-260\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-260\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-591\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-591\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-261\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-261\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-592\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-592\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-262\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-262\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-593\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-593\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-263\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-263\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-71\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-71\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-72\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-72\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-73\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-73\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-74\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-74\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-75\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-75\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::os::macos::raw::time_t"],["<section id=\"impl-TrustedStep-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","TrustedStep","std::ffi::c_long"],["<section id=\"impl-TrustedStep-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","TrustedStep","std::ffi::c_longlong"],["<section id=\"impl-TrustedStep-for-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","TrustedStep","std::os::linux::raw::arch::blkcnt_t"],["<section id=\"impl-TrustedStep-for-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","TrustedStep","std::os::linux::raw::arch::off_t"],["<section id=\"impl-TrustedStep-for-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","TrustedStep","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#927\">source</a><a href=\"#impl-SimdElement-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#927\">source</a><a href=\"#impl-SimdElement-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#927\">source</a><a href=\"#impl-SimdElement-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#927\">source</a><a href=\"#impl-SimdElement-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#927\">source</a><a href=\"#impl-SimdElement-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-6\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-6\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, end: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-7\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-7\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, end: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-8\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-8\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, end: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-9\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-9\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, end: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-10\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-10\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, end: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-594\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-594\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-595\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-595\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-596\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-596\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-597\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-597\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-598\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-598\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-599\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-599\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-600\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-600\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-601\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-601\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-602\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-602\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-603\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-603\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::os::macos::raw::time_t"],["<section id=\"impl-MaskElement-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#81\">source</a><a href=\"#impl-MaskElement-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","MaskElement","std::ffi::c_long"],["<section id=\"impl-MaskElement-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#81\">source</a><a href=\"#impl-MaskElement-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","MaskElement","std::ffi::c_longlong"],["<section id=\"impl-MaskElement-for-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#81\">source</a><a href=\"#impl-MaskElement-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","MaskElement","std::os::linux::raw::arch::blkcnt_t"],["<section id=\"impl-MaskElement-for-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#81\">source</a><a href=\"#impl-MaskElement-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","MaskElement","std::os::linux::raw::arch::off_t"],["<section id=\"impl-MaskElement-for-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#81\">source</a><a href=\"#impl-MaskElement-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","MaskElement","std::os::macos::raw::time_t"],["<section id=\"impl-StructuralEq-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralEq","std::ffi::c_long"],["<section id=\"impl-StructuralEq-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralEq","std::ffi::c_longlong"],["<section id=\"impl-StructuralEq-for-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralEq","std::os::linux::raw::arch::blkcnt_t"],["<section id=\"impl-StructuralEq-for-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralEq","std::os::linux::raw::arch::off_t"],["<section id=\"impl-StructuralEq-for-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralEq","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-147\"><a href=\"#panics-147\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-604\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-604\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-148\"><a href=\"#panics-148\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-605\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-605\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-149\"><a href=\"#panics-149\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-606\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-606\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-150\"><a href=\"#panics-150\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-607\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-607\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-151\"><a href=\"#panics-151\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-608\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-608\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-609\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-609\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-610\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-610\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-611\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-611\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-612\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-612\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-613\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-613\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::macos::raw::time_t"],["<section id=\"impl-Eq-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Eq","std::ffi::c_long"],["<section id=\"impl-Eq-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Eq","std::ffi::c_longlong"],["<section id=\"impl-Eq-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Eq","std::os::linux::raw::arch::blkcnt_t"],["<section id=\"impl-Eq-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Eq","std::os::linux::raw::arch::off_t"],["<section id=\"impl-Eq-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Eq","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-614\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-614\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-615\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-615\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-616\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-616\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-617\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-617\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-618\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-618\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-619\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-619\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-620\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-620\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-621\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-621\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-622\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-622\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-623\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-623\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-624\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-624\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-625\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-625\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-626\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-626\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-627\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-627\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-628\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-628\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI64.html\" title=\"struct std::num::NonZeroI64\">NonZeroI64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-629\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-629\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-630\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-630\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-631\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-631\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-632\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-632\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-633\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-633\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-634\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-634\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-635\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-635\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-636\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-636\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-637\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-637\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-638\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-638\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-639\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-639\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-640\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-640\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-641\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-641\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-642\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-642\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-643\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-643\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-76\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-76\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-77\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-77\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-78\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-78\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-79\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-79\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-80\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-80\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-81\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-81\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-82\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-82\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-83\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-83\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-84\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-84\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-85\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-85\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::os::macos::raw::time_t"],["<section id=\"impl-SimdCast-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#27\">source</a><a href=\"#impl-SimdCast-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","SimdCast","std::ffi::c_long"],["<section id=\"impl-SimdCast-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#27\">source</a><a href=\"#impl-SimdCast-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","SimdCast","std::ffi::c_longlong"],["<section id=\"impl-SimdCast-for-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#27\">source</a><a href=\"#impl-SimdCast-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","SimdCast","std::os::linux::raw::arch::blkcnt_t"],["<section id=\"impl-SimdCast-for-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#27\">source</a><a href=\"#impl-SimdCast-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","SimdCast","std::os::linux::raw::arch::off_t"],["<section id=\"impl-SimdCast-for-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#27\">source</a><a href=\"#impl-SimdCast-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","SimdCast","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-86\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-86\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-87\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-87\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-88\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-88\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-89\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-89\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-90\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-90\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-644\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-644\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-144\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-144\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-645\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-645\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-145\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-145\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-646\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-646\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-146\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-146\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-647\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-647\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-147\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-147\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-648\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-648\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-148\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-148\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-649\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-649\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-149\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-149\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-650\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-650\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-150\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-150\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-651\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-651\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-151\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-151\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-652\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-652\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-152\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-152\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-653\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-653\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-153\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-153\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-654\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-654\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-154\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-154\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-655\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-655\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-155\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-155\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-656\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-656\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-156\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-156\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-657\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-657\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-157\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-157\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-658\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-658\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-158\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-158\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-659\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-659\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-159\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-159\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-660\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-660\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-160\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-160\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-661\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-661\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-161\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-161\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-662\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-662\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-162\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-162\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-663\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-663\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-163\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-163\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-664\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-664\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-164\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-164\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-665\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-665\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-165\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-165\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-666\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-666\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-166\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-166\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-667\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-667\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-167\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-167\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-668\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-668\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-168\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-168\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-669\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-669\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-169\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-169\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-670\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-670\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-170\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-170\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-671\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-671\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-171\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-171\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-672\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-672\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-172\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-172\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-673\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-673\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-173\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-173\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-674\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-674\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-174\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-174\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-675\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-675\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-175\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-175\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-676\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-676\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-176\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-176\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-677\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-677\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-177\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-177\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-678\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-678\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-178\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-178\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-679\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-679\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-179\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-179\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-680\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-680\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-180\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-180\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-681\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-681\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-181\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-181\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-682\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-682\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-182\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-182\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-683\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-683\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-183\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-183\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-684\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-684\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-184\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-184\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-685\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-685\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-185\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-185\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-686\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-686\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-186\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-186\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-687\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-687\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-187\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-187\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-688\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-688\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-188\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-188\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-689\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-689\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-189\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-189\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-690\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-690\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-190\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-190\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-691\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-691\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-191\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-191\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-692\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-692\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-192\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-192\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-693\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-693\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-193\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-193\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-694\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-694\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-194\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-194\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-695\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-695\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-195\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-195\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-696\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-696\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-196\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-196\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-697\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-697\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-197\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-197\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-698\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-698\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-198\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-198\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-699\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-699\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-199\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-199\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-700\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-700\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-200\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-200\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-701\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-701\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-201\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-201\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-702\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-702\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-202\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-202\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-703\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-703\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-203\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-203\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-704\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-704\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-204\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-204\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-705\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-705\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-205\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-205\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-706\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-706\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-206\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-206\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-707\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-707\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-207\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-207\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-708\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-708\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-208\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-208\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-709\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-709\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-209\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-209\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-710\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-710\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-210\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-210\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-711\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-711\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-211\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-211\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-712\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-712\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-212\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-212\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-713\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-713\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-213\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-213\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-714\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-714\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-214\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-214\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-715\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-715\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-215\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-215\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-716\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-716\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-216\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-216\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-717\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-717\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-217\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-217\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-718\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-718\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-218\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-218\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-719\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-719\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-219\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-219\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-720\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-720\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-220\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-220\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-721\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-721\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-221\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-221\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-722\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-722\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-222\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-222\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-723\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-723\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-223\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-223\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-724\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-724\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-224\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-224\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-725\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-725\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-225\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-225\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-726\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-726\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-226\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-226\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-727\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-727\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-227\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-227\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-728\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-728\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-228\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-228\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-729\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-729\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-229\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-229\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-730\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-730\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-230\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-230\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-731\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-731\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-231\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-231\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-732\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-732\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-232\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-232\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-733\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-733\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-233\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-233\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-734\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-734\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-234\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-234\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-735\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-735\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-235\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-235\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-736\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-736\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-236\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-236\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-737\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-737\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-237\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-237\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-738\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-738\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-238\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-238\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-739\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-739\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-239\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-239\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-740\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-740\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-240\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-240\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-741\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-741\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-241\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-241\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-742\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-742\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-242\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-242\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-743\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-743\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-243\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-243\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-744\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-744\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-244\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-244\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-745\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-745\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-245\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-245\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-746\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-746\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-246\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-246\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-747\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-747\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-247\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-247\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-748\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-748\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-248\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-248\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-749\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-749\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-249\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-249\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-750\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-750\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-250\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-250\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-751\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-751\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-251\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-251\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-752\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-752\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-252\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-252\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-753\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-753\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-253\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-253\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-754\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-754\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-254\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-254\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-755\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-755\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-255\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-255\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-756\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-756\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-256\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-256\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-757\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-757\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-257\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-257\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-758\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-758\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-258\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-258\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-759\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-759\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-259\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-259\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-760\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-760\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-260\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-260\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-761\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-761\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-261\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-261\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-762\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-762\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-262\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-262\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-763\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-763\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-263\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-263\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-91\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-91\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-92\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-92\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-93\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-93\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-94\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-94\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-95\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-95\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Octal-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-96\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-96\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Octal-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-97\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-97\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Octal-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-98\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-98\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Octal-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-99\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-99\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Octal-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-100\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-100\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::os::macos::raw::time_t"],["<section id=\"impl-StructuralPartialEq-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralPartialEq","std::ffi::c_long"],["<section id=\"impl-StructuralPartialEq-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralPartialEq","std::ffi::c_longlong"],["<section id=\"impl-StructuralPartialEq-for-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralPartialEq","std::os::linux::raw::arch::blkcnt_t"],["<section id=\"impl-StructuralPartialEq-for-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralPartialEq","std::os::linux::raw::arch::off_t"],["<section id=\"impl-StructuralPartialEq-for-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralPartialEq","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i64%3E-for-i64-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i64%3E-for-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i64%3E-for-i64-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i64%3E-for-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i64%3E-for-i64-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i64%3E-for-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::macos::raw::time_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#357\">source</a><a href=\"#impl-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-8\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-8\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = -9_223_372_036_854_775_808i64</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>63</sup>).</p>\n<h5 id=\"examples-905\"><a href=\"#examples-905\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MIN, -<span class=\"number\">9223372036854775808</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MIN,+-9223372036854775808);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-8\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-8\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = 9_223_372_036_854_775_807i64</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>63</sup> − 1).</p>\n<h5 id=\"examples-906\"><a href=\"#examples-906\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX, <span class=\"number\">9223372036854775807</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX,+9223372036854775807);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-6\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-6\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-907\"><a href=\"#examples-907\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::BITS, <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::BITS,+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-6\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-152\"><a href=\"#panics-152\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-908\"><a href=\"#examples-908\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-6\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-909\"><a href=\"#examples-909\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i64;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-6\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-910\"><a href=\"#examples-910\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-6\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.i64.html#method.ilog2\" title=\"method i64::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-911\"><a href=\"#examples-911\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-6\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-912\"><a href=\"#examples-912\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i64;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-6\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-913\"><a href=\"#examples-913\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_ones(),+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-6\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-914\"><a href=\"#examples-914\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i64;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-6\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-915\"><a href=\"#examples-915\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xaa00000000006e1i64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x6e10aa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xaa00000000006e1i64;%0Alet+m+=+0x6e10aa;%0A%0Aassert_eq!(n.rotate_left(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-6\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-916\"><a href=\"#examples-916\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x6e10aai64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xaa00000000006e1</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x6e10aai64;%0Alet+m+=+0xaa00000000006e1;%0A%0Aassert_eq!(n.rotate_right(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-6\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-917\"><a href=\"#examples-917\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x5634129078563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x5634129078563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-6\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-918\"><a href=\"#examples-918\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x6a2c48091e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i64</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x6a2c48091e6a2c48);%0Aassert_eq!(0,+0i64.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-6\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-919\"><a href=\"#examples-919\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i64::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-6\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-920\"><a href=\"#examples-920\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i64::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-6\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-921\"><a href=\"#examples-921\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-6\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-922\"><a href=\"#examples-922\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-6\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-923\"><a href=\"#examples-923\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MAX+-+2).checked_add(1),+Some(i64::MAX+-+1));%0Aassert_eq!((i64::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-6\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-42\"><a href=\"#safety-42\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i64::MAX</code> or <code>self + rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_add\" title=\"method i64::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned-6\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-924\"><a href=\"#examples-924\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i64::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-6\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-925\"><a href=\"#examples-925\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(1),+Some(i64::MIN+%2B+1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-6\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-43\"><a href=\"#safety-43\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i64::MAX</code> or <code>self - rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_sub\" title=\"method i64::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned-6\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-926\"><a href=\"#examples-926\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-6\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-927\"><a href=\"#examples-927\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.checked_mul(1),+Some(i64::MAX));%0Aassert_eq!(i64::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-6\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-44\"><a href=\"#safety-44\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i64::MAX</code> or <code>self * rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_mul\" title=\"method i64::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-6\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-928\"><a href=\"#examples-928\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div(-1),+None);%0Aassert_eq!((1i64).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-6\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-929\"><a href=\"#examples-929\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div_euclid(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i64).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-6\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-930\"><a href=\"#examples-930\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem(2),+Some(1));%0Aassert_eq!(5i64.checked_rem(0),+None);%0Aassert_eq!(i64::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-6\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-931\"><a href=\"#examples-931\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i64.checked_rem_euclid(0),+None);%0Aassert_eq!(i64::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-6\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-932\"><a href=\"#examples-932\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_neg(),+Some(-5));%0Aassert_eq!(i64::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-6\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-933\"><a href=\"#examples-933\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i64.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-6\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-45\"><a href=\"#safety-45\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shl\" title=\"method i64::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-6\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-934\"><a href=\"#examples-934\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i64.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-6\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-46\"><a href=\"#safety-46\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shr\" title=\"method i64::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-6\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-935\"><a href=\"#examples-935\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i64</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i64).checked_abs(),+Some(5));%0Aassert_eq!(i64::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-6\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-936\"><a href=\"#examples-936\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i64</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i64.checked_pow(2),+Some(64));%0Aassert_eq!(i64::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt-6\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-937\"><a href=\"#examples-937\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-6\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-938\"><a href=\"#examples-938\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add(<span class=\"number\">100</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_add(-<span class=\"number\">1</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_add(1),+101);%0Aassert_eq!(i64::MAX.saturating_add(100),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_add(-1),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned-6\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-939\"><a href=\"#examples-939\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.saturating_add_unsigned(2),+3);%0Aassert_eq!(i64::MAX.saturating_add_unsigned(100),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-6\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-940\"><a href=\"#examples-940\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub(<span class=\"number\">100</span>), i64::MIN);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_sub(-<span class=\"number\">1</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub(100),+i64::MIN);%0Aassert_eq!(i64::MAX.saturating_sub(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned-6\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-941\"><a href=\"#examples-941\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub_unsigned(100),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-6\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-942\"><a href=\"#examples-942\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_neg(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_neg(), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_neg(),+-100);%0Aassert_eq!((-100i64).saturating_neg(),+100);%0Aassert_eq!(i64::MIN.saturating_neg(),+i64::MAX);%0Aassert_eq!(i64::MAX.saturating_neg(),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-6\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-943\"><a href=\"#examples-943\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_abs(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).saturating_abs(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_abs(),+100);%0Aassert_eq!((-100i64).saturating_abs(),+100);%0Aassert_eq!(i64::MIN.saturating_abs(),+i64::MAX);%0Aassert_eq!((i64::MIN+%2B+1).saturating_abs(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-6\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-944\"><a href=\"#examples-944\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_mul(<span class=\"number\">10</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_mul(<span class=\"number\">10</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.saturating_mul(12),+120);%0Aassert_eq!(i64::MAX.saturating_mul(10),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_mul(10),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-6\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-945\"><a href=\"#examples-945\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_div(-<span class=\"number\">1</span>), i64::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_div(-<span class=\"number\">1</span>), i64::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.saturating_div(2),+2);%0Aassert_eq!(i64::MAX.saturating_div(-1),+i64::MIN+%2B+1);%0Aassert_eq!(i64::MIN.saturating_div(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i64</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i64.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-6\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-946\"><a href=\"#examples-946\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i64</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">2</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">3</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i64).saturating_pow(3),+-64);%0Aassert_eq!(i64::MIN.saturating_pow(2),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_pow(3),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-6\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-947\"><a href=\"#examples-947\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned-6\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-948\"><a href=\"#examples-948\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add_unsigned(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-6\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-949\"><a href=\"#examples-949\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub(i64::MAX), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub(i64::MAX),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned-6\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-950\"><a href=\"#examples-950\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub_unsigned(u64::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub_unsigned(u64::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-6\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-951\"><a href=\"#examples-951\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-6\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-153\"><a href=\"#panics-153\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-952\"><a href=\"#examples-952\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-6\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-154\"><a href=\"#panics-154\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-953\"><a href=\"#examples-953\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-6\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-155\"><a href=\"#panics-155\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-954\"><a href=\"#examples-954\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-6\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-156\"><a href=\"#panics-156\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-955\"><a href=\"#examples-955\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-6\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-956\"><a href=\"#examples-956\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_neg(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_neg(),+-100);%0Aassert_eq!(i64::MIN.wrapping_neg(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-6\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_left\" title=\"method i64::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-957\"><a href=\"#examples-957\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i64).wrapping_shl(7),+-128);%0Aassert_eq!((-1i64).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-6\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_right\" title=\"method i64::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-958\"><a href=\"#examples-958\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i64</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i64).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-6\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-959\"><a href=\"#examples-959\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_abs(), i64::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_abs(),+100);%0Aassert_eq!((-100i64).wrapping_abs(),+100);%0Aassert_eq!(i64::MIN.wrapping_abs(),+i64::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-6\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-960\"><a href=\"#examples-960\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.unsigned_abs(),+100u64);%0Aassert_eq!((-100i64).unsigned_abs(),+100u64);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-6\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-961\"><a href=\"#examples-961\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-6\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-962\"><a href=\"#examples-962\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.overflowing_add(<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_add(2),+(7,+false));%0Aassert_eq!(i64::MAX.overflowing_add(1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-6\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"std/primitive.u64.html#method.carrying_add\" title=\"method u64::carrying_add\"><code>u64::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_add\" title=\"method i64::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-963\"><a href=\"#examples-963\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^64 + 2^64 - 1)\n// + -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^64 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">10</span>, u64::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E64+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(10,+u64::MAX);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u64::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i64::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned-6\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-964\"><a href=\"#examples-964\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_add_unsigned(u64::MAX), (i64::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i64::MIN).overflowing_add_unsigned(u64::MAX),+(i64::MAX,+false));%0Aassert_eq!((i64::MAX+-+2).overflowing_add_unsigned(3),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-6\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-965\"><a href=\"#examples-965\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_sub(<span class=\"number\">1</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i64::MIN.overflowing_sub(1),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-6\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"std/primitive.u64.html#method.borrowing_sub\" title=\"method u64::borrowing_sub\"><code>u64::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_sub\" title=\"method i64::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-966\"><a href=\"#examples-966\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^64 + 8)\n// - -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^64 + 2^64 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u64::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E64+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(6,+8);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u64::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i64::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u64::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned-6\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-967\"><a href=\"#examples-967\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX).overflowing_sub_unsigned(u64::MAX), (i64::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i64::MAX).overflowing_sub_unsigned(u64::MAX),+(i64::MIN,+false));%0Aassert_eq!((i64::MIN+%2B+2).overflowing_sub_unsigned(3),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-6\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-968\"><a href=\"#examples-968\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-6\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-157\"><a href=\"#panics-157\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-969\"><a href=\"#examples-969\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-6\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-158\"><a href=\"#panics-158\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-970\"><a href=\"#examples-970\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div_euclid(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-6\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-159\"><a href=\"#panics-159\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-971\"><a href=\"#examples-971\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-6\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-160\"><a href=\"#panics-160\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-972\"><a href=\"#examples-972\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-6\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-973\"><a href=\"#examples-973\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_neg(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i64::MIN.overflowing_neg(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-6\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-974\"><a href=\"#examples-974\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-6\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-975\"><a href=\"#examples-975\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-6\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i64::MIN for values of type i64),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-976\"><a href=\"#examples-976\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_abs(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i64).overflowing_abs(),+(10,+false));%0Aassert_eq!((i64::MIN).overflowing_abs(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-6\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-977\"><a href=\"#examples-977\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-6\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-978\"><a href=\"#examples-978\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i64 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i64+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-6\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-161\"><a href=\"#panics-161\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-979\"><a href=\"#examples-979\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-8\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-162\"><a href=\"#panics-162\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-980\"><a href=\"#examples-980\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-8\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-163\"><a href=\"#panics-163\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-981\"><a href=\"#examples-981\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-6\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-6\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-164\"><a href=\"#panics-164\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-24\"><a href=\"#overflow-behavior-24\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-982\"><a href=\"#examples-982\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-6\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-6\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-165\"><a href=\"#panics-165\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-25\"><a href=\"#overflow-behavior-25\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-983\"><a href=\"#examples-983\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-6\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-6\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-166\"><a href=\"#panics-166\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-26\"><a href=\"#overflow-behavior-26\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-984\"><a href=\"#examples-984\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.next_multiple_of(8),+16);%0Aassert_eq!(23_i64.next_multiple_of(8),+24);%0Aassert_eq!(16_i64.next_multiple_of(-8),+16);%0Aassert_eq!(23_i64.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i64).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-6\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-6\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-985\"><a href=\"#examples-985\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i64</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i64.checked_next_multiple_of(0),+None);%0Aassert_eq!(i64::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-8\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-986\"><a href=\"#examples-986\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.midpoint(4),+2);%0Aassert_eq!(0i64.midpoint(-1),+-1);%0Aassert_eq!((-1i64).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-6\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-167\"><a href=\"#panics-167\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-987\"><a href=\"#examples-987\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-6\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-168\"><a href=\"#panics-168\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-988\"><a href=\"#examples-988\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-6\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-169\"><a href=\"#panics-169\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example-14\"><a href=\"#example-14\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-6\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-989\"><a href=\"#examples-989\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-6\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-990\"><a href=\"#examples-990\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-6\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-15\"><a href=\"#example-15\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-8\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-27\"><a href=\"#overflow-behavior-27\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i64::MIN</code>\ncannot be represented as an\n<code>i64</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i64::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-991\"><a href=\"#examples-991\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.abs(),+10);%0Aassert_eq!((-10i64).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-6\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-992\"><a href=\"#examples-992\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.abs_diff(i64::MAX), u64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.abs_diff(80),+20u64);%0Aassert_eq!(100i64.abs_diff(110),+10u64);%0Aassert_eq!((-100i64).abs_diff(80),+180u64);%0Aassert_eq!((-100i64).abs_diff(-120),+20u64);%0Aassert_eq!(i64::MIN.abs_diff(i64::MAX),+u64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum-8\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-993\"><a href=\"#examples-993\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.signum(),+1);%0Aassert_eq!(0i64.signum(),+0);%0Aassert_eq!((-10i64).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-6\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-994\"><a href=\"#examples-994\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i64</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i64</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i64.is_positive());%0Aassert!(!(-10i64).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-6\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-995\"><a href=\"#examples-995\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i64</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i64</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i64).is_negative());%0Aassert!(!10i64.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-8\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-996\"><a href=\"#examples-996\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-8\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-997\"><a href=\"#examples-997\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-8\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.i64.html#method.to_be_bytes\" title=\"method i64::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.to_le_bytes\" title=\"method i64::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-998\"><a href=\"#examples-998\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A++++%7D+else+%7B%0A++++++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-8\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-999\"><a href=\"#examples-999\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-8\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-1000\"><a href=\"#examples-1000\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_le_bytes([<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_le_bytes(%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-8\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.i64.html#method.from_be_bytes\" title=\"associated function i64::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.from_le_bytes\" title=\"associated function i64::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1001\"><a href=\"#examples-1001\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A%7D+else+%7B%0A++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-6\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-6\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"std::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#357\">source</a><a href=\"#impl-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-9\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-9\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = -9_223_372_036_854_775_808i64</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>63</sup>).</p>\n<h5 id=\"examples-1002\"><a href=\"#examples-1002\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MIN, -<span class=\"number\">9223372036854775808</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MIN,+-9223372036854775808);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-9\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-9\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = 9_223_372_036_854_775_807i64</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>63</sup> − 1).</p>\n<h5 id=\"examples-1003\"><a href=\"#examples-1003\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX, <span class=\"number\">9223372036854775807</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX,+9223372036854775807);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-7\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-7\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1004\"><a href=\"#examples-1004\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::BITS, <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::BITS,+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-7\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-170\"><a href=\"#panics-170\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1005\"><a href=\"#examples-1005\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-7\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1006\"><a href=\"#examples-1006\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i64;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-7\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1007\"><a href=\"#examples-1007\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-7\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.i64.html#method.ilog2\" title=\"method i64::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1008\"><a href=\"#examples-1008\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-7\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1009\"><a href=\"#examples-1009\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i64;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-7\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1010\"><a href=\"#examples-1010\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_ones(),+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-7\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1011\"><a href=\"#examples-1011\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i64;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-7\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1012\"><a href=\"#examples-1012\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xaa00000000006e1i64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x6e10aa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xaa00000000006e1i64;%0Alet+m+=+0x6e10aa;%0A%0Aassert_eq!(n.rotate_left(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-7\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1013\"><a href=\"#examples-1013\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x6e10aai64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xaa00000000006e1</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x6e10aai64;%0Alet+m+=+0xaa00000000006e1;%0A%0Aassert_eq!(n.rotate_right(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-7\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1014\"><a href=\"#examples-1014\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x5634129078563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x5634129078563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-7\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1015\"><a href=\"#examples-1015\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x6a2c48091e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i64</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x6a2c48091e6a2c48);%0Aassert_eq!(0,+0i64.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-7\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1016\"><a href=\"#examples-1016\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i64::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-7\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1017\"><a href=\"#examples-1017\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i64::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-7\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1018\"><a href=\"#examples-1018\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-7\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1019\"><a href=\"#examples-1019\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-7\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1020\"><a href=\"#examples-1020\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MAX+-+2).checked_add(1),+Some(i64::MAX+-+1));%0Aassert_eq!((i64::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-7\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-47\"><a href=\"#safety-47\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i64::MAX</code> or <code>self + rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_add\" title=\"method i64::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned-7\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1021\"><a href=\"#examples-1021\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i64::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-7\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1022\"><a href=\"#examples-1022\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(1),+Some(i64::MIN+%2B+1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-7\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-48\"><a href=\"#safety-48\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i64::MAX</code> or <code>self - rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_sub\" title=\"method i64::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned-7\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1023\"><a href=\"#examples-1023\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-7\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1024\"><a href=\"#examples-1024\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.checked_mul(1),+Some(i64::MAX));%0Aassert_eq!(i64::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-7\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-49\"><a href=\"#safety-49\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i64::MAX</code> or <code>self * rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_mul\" title=\"method i64::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-7\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-1025\"><a href=\"#examples-1025\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div(-1),+None);%0Aassert_eq!((1i64).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-7\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1026\"><a href=\"#examples-1026\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div_euclid(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i64).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-7\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1027\"><a href=\"#examples-1027\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem(2),+Some(1));%0Aassert_eq!(5i64.checked_rem(0),+None);%0Aassert_eq!(i64::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-7\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1028\"><a href=\"#examples-1028\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i64.checked_rem_euclid(0),+None);%0Aassert_eq!(i64::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-7\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-1029\"><a href=\"#examples-1029\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_neg(),+Some(-5));%0Aassert_eq!(i64::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-7\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1030\"><a href=\"#examples-1030\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i64.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-7\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-50\"><a href=\"#safety-50\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shl\" title=\"method i64::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-7\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1031\"><a href=\"#examples-1031\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i64.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-7\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-51\"><a href=\"#safety-51\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shr\" title=\"method i64::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-7\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-1032\"><a href=\"#examples-1032\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i64</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i64).checked_abs(),+Some(5));%0Aassert_eq!(i64::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-7\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1033\"><a href=\"#examples-1033\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i64</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i64.checked_pow(2),+Some(64));%0Aassert_eq!(i64::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt-7\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-1034\"><a href=\"#examples-1034\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-7\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-1035\"><a href=\"#examples-1035\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add(<span class=\"number\">100</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_add(-<span class=\"number\">1</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_add(1),+101);%0Aassert_eq!(i64::MAX.saturating_add(100),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_add(-1),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned-7\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1036\"><a href=\"#examples-1036\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.saturating_add_unsigned(2),+3);%0Aassert_eq!(i64::MAX.saturating_add_unsigned(100),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-7\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1037\"><a href=\"#examples-1037\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub(<span class=\"number\">100</span>), i64::MIN);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_sub(-<span class=\"number\">1</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub(100),+i64::MIN);%0Aassert_eq!(i64::MAX.saturating_sub(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned-7\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1038\"><a href=\"#examples-1038\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub_unsigned(100),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-7\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-1039\"><a href=\"#examples-1039\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_neg(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_neg(), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_neg(),+-100);%0Aassert_eq!((-100i64).saturating_neg(),+100);%0Aassert_eq!(i64::MIN.saturating_neg(),+i64::MAX);%0Aassert_eq!(i64::MAX.saturating_neg(),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-7\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-1040\"><a href=\"#examples-1040\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_abs(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).saturating_abs(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_abs(),+100);%0Aassert_eq!((-100i64).saturating_abs(),+100);%0Aassert_eq!(i64::MIN.saturating_abs(),+i64::MAX);%0Aassert_eq!((i64::MIN+%2B+1).saturating_abs(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-7\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1041\"><a href=\"#examples-1041\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_mul(<span class=\"number\">10</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_mul(<span class=\"number\">10</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.saturating_mul(12),+120);%0Aassert_eq!(i64::MAX.saturating_mul(10),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_mul(10),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-7\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1042\"><a href=\"#examples-1042\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_div(-<span class=\"number\">1</span>), i64::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_div(-<span class=\"number\">1</span>), i64::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.saturating_div(2),+2);%0Aassert_eq!(i64::MAX.saturating_div(-1),+i64::MIN+%2B+1);%0Aassert_eq!(i64::MIN.saturating_div(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i64</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i64.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-7\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1043\"><a href=\"#examples-1043\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i64</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">2</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">3</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i64).saturating_pow(3),+-64);%0Aassert_eq!(i64::MIN.saturating_pow(2),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_pow(3),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-7\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1044\"><a href=\"#examples-1044\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned-7\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1045\"><a href=\"#examples-1045\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add_unsigned(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-7\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1046\"><a href=\"#examples-1046\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub(i64::MAX), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub(i64::MAX),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned-7\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1047\"><a href=\"#examples-1047\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub_unsigned(u64::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub_unsigned(u64::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-7\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-1048\"><a href=\"#examples-1048\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-7\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-171\"><a href=\"#panics-171\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1049\"><a href=\"#examples-1049\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-7\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-172\"><a href=\"#panics-172\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1050\"><a href=\"#examples-1050\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-7\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-173\"><a href=\"#panics-173\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1051\"><a href=\"#examples-1051\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-7\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-174\"><a href=\"#panics-174\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1052\"><a href=\"#examples-1052\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-7\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1053\"><a href=\"#examples-1053\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_neg(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_neg(),+-100);%0Aassert_eq!(i64::MIN.wrapping_neg(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-7\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_left\" title=\"method i64::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1054\"><a href=\"#examples-1054\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i64).wrapping_shl(7),+-128);%0Aassert_eq!((-1i64).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-7\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_right\" title=\"method i64::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1055\"><a href=\"#examples-1055\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i64</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i64).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-7\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1056\"><a href=\"#examples-1056\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_abs(), i64::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_abs(),+100);%0Aassert_eq!((-100i64).wrapping_abs(),+100);%0Aassert_eq!(i64::MIN.wrapping_abs(),+i64::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-7\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-1057\"><a href=\"#examples-1057\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.unsigned_abs(),+100u64);%0Aassert_eq!((-100i64).unsigned_abs(),+100u64);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-7\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1058\"><a href=\"#examples-1058\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-7\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1059\"><a href=\"#examples-1059\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.overflowing_add(<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_add(2),+(7,+false));%0Aassert_eq!(i64::MAX.overflowing_add(1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-7\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"std/primitive.u64.html#method.carrying_add\" title=\"method u64::carrying_add\"><code>u64::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_add\" title=\"method i64::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-1060\"><a href=\"#examples-1060\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^64 + 2^64 - 1)\n// + -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^64 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">10</span>, u64::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E64+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(10,+u64::MAX);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u64::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i64::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned-7\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1061\"><a href=\"#examples-1061\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_add_unsigned(u64::MAX), (i64::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i64::MIN).overflowing_add_unsigned(u64::MAX),+(i64::MAX,+false));%0Aassert_eq!((i64::MAX+-+2).overflowing_add_unsigned(3),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-7\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1062\"><a href=\"#examples-1062\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_sub(<span class=\"number\">1</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i64::MIN.overflowing_sub(1),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-7\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"std/primitive.u64.html#method.borrowing_sub\" title=\"method u64::borrowing_sub\"><code>u64::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_sub\" title=\"method i64::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-1063\"><a href=\"#examples-1063\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^64 + 8)\n// - -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^64 + 2^64 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u64::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E64+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(6,+8);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u64::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i64::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u64::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned-7\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1064\"><a href=\"#examples-1064\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX).overflowing_sub_unsigned(u64::MAX), (i64::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i64::MAX).overflowing_sub_unsigned(u64::MAX),+(i64::MIN,+false));%0Aassert_eq!((i64::MIN+%2B+2).overflowing_sub_unsigned(3),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-7\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1065\"><a href=\"#examples-1065\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-7\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-175\"><a href=\"#panics-175\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1066\"><a href=\"#examples-1066\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-7\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-176\"><a href=\"#panics-176\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1067\"><a href=\"#examples-1067\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div_euclid(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-7\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-177\"><a href=\"#panics-177\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1068\"><a href=\"#examples-1068\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-7\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-178\"><a href=\"#panics-178\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1069\"><a href=\"#examples-1069\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-7\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-1070\"><a href=\"#examples-1070\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_neg(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i64::MIN.overflowing_neg(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-7\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1071\"><a href=\"#examples-1071\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-7\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1072\"><a href=\"#examples-1072\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-7\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i64::MIN for values of type i64),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-1073\"><a href=\"#examples-1073\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_abs(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i64).overflowing_abs(),+(10,+false));%0Aassert_eq!((i64::MIN).overflowing_abs(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-7\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1074\"><a href=\"#examples-1074\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-7\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1075\"><a href=\"#examples-1075\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i64 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i64+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-7\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-179\"><a href=\"#panics-179\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-1076\"><a href=\"#examples-1076\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-9\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-180\"><a href=\"#panics-180\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1077\"><a href=\"#examples-1077\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-9\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-181\"><a href=\"#panics-181\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1078\"><a href=\"#examples-1078\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-7\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-7\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-182\"><a href=\"#panics-182\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-28\"><a href=\"#overflow-behavior-28\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1079\"><a href=\"#examples-1079\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-7\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-7\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-183\"><a href=\"#panics-183\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-29\"><a href=\"#overflow-behavior-29\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1080\"><a href=\"#examples-1080\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-7\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-7\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-184\"><a href=\"#panics-184\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-30\"><a href=\"#overflow-behavior-30\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1081\"><a href=\"#examples-1081\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.next_multiple_of(8),+16);%0Aassert_eq!(23_i64.next_multiple_of(8),+24);%0Aassert_eq!(16_i64.next_multiple_of(-8),+16);%0Aassert_eq!(23_i64.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i64).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-7\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-7\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-1082\"><a href=\"#examples-1082\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i64</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i64.checked_next_multiple_of(0),+None);%0Aassert_eq!(i64::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-9\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1083\"><a href=\"#examples-1083\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.midpoint(4),+2);%0Aassert_eq!(0i64.midpoint(-1),+-1);%0Aassert_eq!((-1i64).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-7\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-185\"><a href=\"#panics-185\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1084\"><a href=\"#examples-1084\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-7\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-186\"><a href=\"#panics-186\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-1085\"><a href=\"#examples-1085\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-7\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-187\"><a href=\"#panics-187\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example-16\"><a href=\"#example-16\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-7\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1086\"><a href=\"#examples-1086\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-7\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-1087\"><a href=\"#examples-1087\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-7\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-17\"><a href=\"#example-17\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-9\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-31\"><a href=\"#overflow-behavior-31\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i64::MIN</code>\ncannot be represented as an\n<code>i64</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i64::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-1088\"><a href=\"#examples-1088\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.abs(),+10);%0Aassert_eq!((-10i64).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-7\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-1089\"><a href=\"#examples-1089\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.abs_diff(i64::MAX), u64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.abs_diff(80),+20u64);%0Aassert_eq!(100i64.abs_diff(110),+10u64);%0Aassert_eq!((-100i64).abs_diff(80),+180u64);%0Aassert_eq!((-100i64).abs_diff(-120),+20u64);%0Aassert_eq!(i64::MIN.abs_diff(i64::MAX),+u64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum-9\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-1090\"><a href=\"#examples-1090\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.signum(),+1);%0Aassert_eq!(0i64.signum(),+0);%0Aassert_eq!((-10i64).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-7\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-1091\"><a href=\"#examples-1091\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i64</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i64</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i64.is_positive());%0Aassert!(!(-10i64).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-7\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-1092\"><a href=\"#examples-1092\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i64</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i64</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i64).is_negative());%0Aassert!(!10i64.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-9\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1093\"><a href=\"#examples-1093\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-9\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1094\"><a href=\"#examples-1094\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-9\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.i64.html#method.to_be_bytes\" title=\"method i64::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.to_le_bytes\" title=\"method i64::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1095\"><a href=\"#examples-1095\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A++++%7D+else+%7B%0A++++++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-9\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-1096\"><a href=\"#examples-1096\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-9\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-1097\"><a href=\"#examples-1097\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_le_bytes([<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_le_bytes(%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-9\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.i64.html#method.from_be_bytes\" title=\"associated function i64::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.from_le_bytes\" title=\"associated function i64::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1098\"><a href=\"#examples-1098\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A%7D+else+%7B%0A++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-7\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-7\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-7\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"std::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i64-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#357\">source</a><a href=\"#impl-i64-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-10\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-10\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = -9_223_372_036_854_775_808i64</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>63</sup>).</p>\n<h5 id=\"examples-1099\"><a href=\"#examples-1099\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MIN, -<span class=\"number\">9223372036854775808</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MIN,+-9223372036854775808);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-10\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-10\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = 9_223_372_036_854_775_807i64</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>63</sup> − 1).</p>\n<h5 id=\"examples-1100\"><a href=\"#examples-1100\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX, <span class=\"number\">9223372036854775807</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX,+9223372036854775807);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-8\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-8\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1101\"><a href=\"#examples-1101\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::BITS, <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::BITS,+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-8\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-188\"><a href=\"#panics-188\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1102\"><a href=\"#examples-1102\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-8\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1103\"><a href=\"#examples-1103\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i64;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-8\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1104\"><a href=\"#examples-1104\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-8\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.i64.html#method.ilog2\" title=\"method i64::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1105\"><a href=\"#examples-1105\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-8\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1106\"><a href=\"#examples-1106\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i64;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-8\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1107\"><a href=\"#examples-1107\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_ones(),+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-8\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1108\"><a href=\"#examples-1108\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i64;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-8\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1109\"><a href=\"#examples-1109\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xaa00000000006e1i64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x6e10aa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xaa00000000006e1i64;%0Alet+m+=+0x6e10aa;%0A%0Aassert_eq!(n.rotate_left(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-8\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1110\"><a href=\"#examples-1110\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x6e10aai64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xaa00000000006e1</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x6e10aai64;%0Alet+m+=+0xaa00000000006e1;%0A%0Aassert_eq!(n.rotate_right(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-8\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1111\"><a href=\"#examples-1111\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x5634129078563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x5634129078563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-8\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1112\"><a href=\"#examples-1112\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x6a2c48091e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i64</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x6a2c48091e6a2c48);%0Aassert_eq!(0,+0i64.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-8\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1113\"><a href=\"#examples-1113\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i64::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-8\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1114\"><a href=\"#examples-1114\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i64::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-8\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1115\"><a href=\"#examples-1115\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-8\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1116\"><a href=\"#examples-1116\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-8\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1117\"><a href=\"#examples-1117\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MAX+-+2).checked_add(1),+Some(i64::MAX+-+1));%0Aassert_eq!((i64::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-8\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-52\"><a href=\"#safety-52\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i64::MAX</code> or <code>self + rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_add\" title=\"method i64::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned-8\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1118\"><a href=\"#examples-1118\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i64::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-8\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1119\"><a href=\"#examples-1119\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(1),+Some(i64::MIN+%2B+1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-8\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-53\"><a href=\"#safety-53\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i64::MAX</code> or <code>self - rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_sub\" title=\"method i64::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned-8\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1120\"><a href=\"#examples-1120\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-8\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1121\"><a href=\"#examples-1121\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.checked_mul(1),+Some(i64::MAX));%0Aassert_eq!(i64::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-8\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-54\"><a href=\"#safety-54\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i64::MAX</code> or <code>self * rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_mul\" title=\"method i64::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-8\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-1122\"><a href=\"#examples-1122\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div(-1),+None);%0Aassert_eq!((1i64).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-8\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1123\"><a href=\"#examples-1123\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div_euclid(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i64).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-8\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1124\"><a href=\"#examples-1124\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem(2),+Some(1));%0Aassert_eq!(5i64.checked_rem(0),+None);%0Aassert_eq!(i64::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-8\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1125\"><a href=\"#examples-1125\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i64.checked_rem_euclid(0),+None);%0Aassert_eq!(i64::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-8\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-1126\"><a href=\"#examples-1126\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_neg(),+Some(-5));%0Aassert_eq!(i64::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-8\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1127\"><a href=\"#examples-1127\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i64.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-8\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-55\"><a href=\"#safety-55\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shl\" title=\"method i64::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-8\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1128\"><a href=\"#examples-1128\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i64.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-8\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-56\"><a href=\"#safety-56\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shr\" title=\"method i64::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-8\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-1129\"><a href=\"#examples-1129\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i64</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i64).checked_abs(),+Some(5));%0Aassert_eq!(i64::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-8\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1130\"><a href=\"#examples-1130\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i64</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i64.checked_pow(2),+Some(64));%0Aassert_eq!(i64::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt-8\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-1131\"><a href=\"#examples-1131\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-8\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-1132\"><a href=\"#examples-1132\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add(<span class=\"number\">100</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_add(-<span class=\"number\">1</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_add(1),+101);%0Aassert_eq!(i64::MAX.saturating_add(100),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_add(-1),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned-8\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1133\"><a href=\"#examples-1133\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.saturating_add_unsigned(2),+3);%0Aassert_eq!(i64::MAX.saturating_add_unsigned(100),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-8\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1134\"><a href=\"#examples-1134\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub(<span class=\"number\">100</span>), i64::MIN);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_sub(-<span class=\"number\">1</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub(100),+i64::MIN);%0Aassert_eq!(i64::MAX.saturating_sub(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned-8\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1135\"><a href=\"#examples-1135\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub_unsigned(100),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-8\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-1136\"><a href=\"#examples-1136\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_neg(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_neg(), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_neg(),+-100);%0Aassert_eq!((-100i64).saturating_neg(),+100);%0Aassert_eq!(i64::MIN.saturating_neg(),+i64::MAX);%0Aassert_eq!(i64::MAX.saturating_neg(),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-8\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-1137\"><a href=\"#examples-1137\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_abs(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).saturating_abs(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_abs(),+100);%0Aassert_eq!((-100i64).saturating_abs(),+100);%0Aassert_eq!(i64::MIN.saturating_abs(),+i64::MAX);%0Aassert_eq!((i64::MIN+%2B+1).saturating_abs(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-8\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1138\"><a href=\"#examples-1138\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_mul(<span class=\"number\">10</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_mul(<span class=\"number\">10</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.saturating_mul(12),+120);%0Aassert_eq!(i64::MAX.saturating_mul(10),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_mul(10),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-8\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1139\"><a href=\"#examples-1139\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_div(-<span class=\"number\">1</span>), i64::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_div(-<span class=\"number\">1</span>), i64::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.saturating_div(2),+2);%0Aassert_eq!(i64::MAX.saturating_div(-1),+i64::MIN+%2B+1);%0Aassert_eq!(i64::MIN.saturating_div(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i64</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i64.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-8\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1140\"><a href=\"#examples-1140\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i64</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">2</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">3</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i64).saturating_pow(3),+-64);%0Aassert_eq!(i64::MIN.saturating_pow(2),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_pow(3),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-8\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1141\"><a href=\"#examples-1141\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned-8\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1142\"><a href=\"#examples-1142\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add_unsigned(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-8\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1143\"><a href=\"#examples-1143\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub(i64::MAX), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub(i64::MAX),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned-8\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1144\"><a href=\"#examples-1144\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub_unsigned(u64::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub_unsigned(u64::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-8\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-1145\"><a href=\"#examples-1145\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-8\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-189\"><a href=\"#panics-189\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1146\"><a href=\"#examples-1146\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-8\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-190\"><a href=\"#panics-190\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1147\"><a href=\"#examples-1147\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-8\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-191\"><a href=\"#panics-191\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1148\"><a href=\"#examples-1148\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-8\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-192\"><a href=\"#panics-192\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1149\"><a href=\"#examples-1149\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-8\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1150\"><a href=\"#examples-1150\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_neg(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_neg(),+-100);%0Aassert_eq!(i64::MIN.wrapping_neg(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-8\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_left\" title=\"method i64::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1151\"><a href=\"#examples-1151\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i64).wrapping_shl(7),+-128);%0Aassert_eq!((-1i64).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-8\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_right\" title=\"method i64::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1152\"><a href=\"#examples-1152\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i64</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i64).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-8\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1153\"><a href=\"#examples-1153\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_abs(), i64::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_abs(),+100);%0Aassert_eq!((-100i64).wrapping_abs(),+100);%0Aassert_eq!(i64::MIN.wrapping_abs(),+i64::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-8\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-1154\"><a href=\"#examples-1154\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.unsigned_abs(),+100u64);%0Aassert_eq!((-100i64).unsigned_abs(),+100u64);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-8\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1155\"><a href=\"#examples-1155\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-8\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1156\"><a href=\"#examples-1156\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.overflowing_add(<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_add(2),+(7,+false));%0Aassert_eq!(i64::MAX.overflowing_add(1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-8\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"std/primitive.u64.html#method.carrying_add\" title=\"method u64::carrying_add\"><code>u64::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_add\" title=\"method i64::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-1157\"><a href=\"#examples-1157\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^64 + 2^64 - 1)\n// + -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^64 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">10</span>, u64::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E64+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(10,+u64::MAX);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u64::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i64::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned-8\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1158\"><a href=\"#examples-1158\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_add_unsigned(u64::MAX), (i64::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i64::MIN).overflowing_add_unsigned(u64::MAX),+(i64::MAX,+false));%0Aassert_eq!((i64::MAX+-+2).overflowing_add_unsigned(3),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-8\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1159\"><a href=\"#examples-1159\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_sub(<span class=\"number\">1</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i64::MIN.overflowing_sub(1),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-8\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"std/primitive.u64.html#method.borrowing_sub\" title=\"method u64::borrowing_sub\"><code>u64::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_sub\" title=\"method i64::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-1160\"><a href=\"#examples-1160\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^64 + 8)\n// - -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^64 + 2^64 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u64::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E64+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(6,+8);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u64::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i64::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u64::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned-8\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1161\"><a href=\"#examples-1161\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX).overflowing_sub_unsigned(u64::MAX), (i64::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i64::MAX).overflowing_sub_unsigned(u64::MAX),+(i64::MIN,+false));%0Aassert_eq!((i64::MIN+%2B+2).overflowing_sub_unsigned(3),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-8\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1162\"><a href=\"#examples-1162\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-8\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-193\"><a href=\"#panics-193\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1163\"><a href=\"#examples-1163\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-8\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-194\"><a href=\"#panics-194\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1164\"><a href=\"#examples-1164\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div_euclid(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-8\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-195\"><a href=\"#panics-195\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1165\"><a href=\"#examples-1165\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-8\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-196\"><a href=\"#panics-196\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1166\"><a href=\"#examples-1166\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-8\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-1167\"><a href=\"#examples-1167\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_neg(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i64::MIN.overflowing_neg(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-8\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1168\"><a href=\"#examples-1168\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-8\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1169\"><a href=\"#examples-1169\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-8\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i64::MIN for values of type i64),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-1170\"><a href=\"#examples-1170\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_abs(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i64).overflowing_abs(),+(10,+false));%0Aassert_eq!((i64::MIN).overflowing_abs(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-8\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1171\"><a href=\"#examples-1171\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-8\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1172\"><a href=\"#examples-1172\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i64 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i64+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-8\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-197\"><a href=\"#panics-197\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-1173\"><a href=\"#examples-1173\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-10\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-198\"><a href=\"#panics-198\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1174\"><a href=\"#examples-1174\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-10\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-199\"><a href=\"#panics-199\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1175\"><a href=\"#examples-1175\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-8\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-8\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-200\"><a href=\"#panics-200\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-32\"><a href=\"#overflow-behavior-32\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1176\"><a href=\"#examples-1176\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-8\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-8\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-201\"><a href=\"#panics-201\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-33\"><a href=\"#overflow-behavior-33\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1177\"><a href=\"#examples-1177\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-8\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-8\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-202\"><a href=\"#panics-202\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-34\"><a href=\"#overflow-behavior-34\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1178\"><a href=\"#examples-1178\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.next_multiple_of(8),+16);%0Aassert_eq!(23_i64.next_multiple_of(8),+24);%0Aassert_eq!(16_i64.next_multiple_of(-8),+16);%0Aassert_eq!(23_i64.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i64).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-8\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-8\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-1179\"><a href=\"#examples-1179\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i64</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i64.checked_next_multiple_of(0),+None);%0Aassert_eq!(i64::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-10\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1180\"><a href=\"#examples-1180\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.midpoint(4),+2);%0Aassert_eq!(0i64.midpoint(-1),+-1);%0Aassert_eq!((-1i64).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-8\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-203\"><a href=\"#panics-203\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1181\"><a href=\"#examples-1181\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-8\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-204\"><a href=\"#panics-204\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-1182\"><a href=\"#examples-1182\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-8\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-205\"><a href=\"#panics-205\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example-18\"><a href=\"#example-18\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-8\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1183\"><a href=\"#examples-1183\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-8\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-1184\"><a href=\"#examples-1184\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-8\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-19\"><a href=\"#example-19\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-10\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-35\"><a href=\"#overflow-behavior-35\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i64::MIN</code>\ncannot be represented as an\n<code>i64</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i64::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-1185\"><a href=\"#examples-1185\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.abs(),+10);%0Aassert_eq!((-10i64).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-8\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-1186\"><a href=\"#examples-1186\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.abs_diff(i64::MAX), u64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.abs_diff(80),+20u64);%0Aassert_eq!(100i64.abs_diff(110),+10u64);%0Aassert_eq!((-100i64).abs_diff(80),+180u64);%0Aassert_eq!((-100i64).abs_diff(-120),+20u64);%0Aassert_eq!(i64::MIN.abs_diff(i64::MAX),+u64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum-10\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-1187\"><a href=\"#examples-1187\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.signum(),+1);%0Aassert_eq!(0i64.signum(),+0);%0Aassert_eq!((-10i64).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-8\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-1188\"><a href=\"#examples-1188\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i64</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i64</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i64.is_positive());%0Aassert!(!(-10i64).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-8\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-1189\"><a href=\"#examples-1189\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i64</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i64</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i64).is_negative());%0Aassert!(!10i64.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-10\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1190\"><a href=\"#examples-1190\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-10\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1191\"><a href=\"#examples-1191\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-10\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.i64.html#method.to_be_bytes\" title=\"method i64::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.to_le_bytes\" title=\"method i64::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1192\"><a href=\"#examples-1192\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A++++%7D+else+%7B%0A++++++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-10\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-1193\"><a href=\"#examples-1193\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-10\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-1194\"><a href=\"#examples-1194\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_le_bytes([<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_le_bytes(%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-10\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.i64.html#method.from_be_bytes\" title=\"associated function i64::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.from_le_bytes\" title=\"associated function i64::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1195\"><a href=\"#examples-1195\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A%7D+else+%7B%0A++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-8\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-8\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"std::os::linux::raw::arch::blkcnt_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i64-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#357\">source</a><a href=\"#impl-i64-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-11\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-11\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = -9_223_372_036_854_775_808i64</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>63</sup>).</p>\n<h5 id=\"examples-1196\"><a href=\"#examples-1196\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MIN, -<span class=\"number\">9223372036854775808</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MIN,+-9223372036854775808);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-11\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-11\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = 9_223_372_036_854_775_807i64</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>63</sup> − 1).</p>\n<h5 id=\"examples-1197\"><a href=\"#examples-1197\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX, <span class=\"number\">9223372036854775807</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX,+9223372036854775807);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-9\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-9\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1198\"><a href=\"#examples-1198\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::BITS, <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::BITS,+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-9\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-206\"><a href=\"#panics-206\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1199\"><a href=\"#examples-1199\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-9\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1200\"><a href=\"#examples-1200\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i64;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-9\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1201\"><a href=\"#examples-1201\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-9\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.i64.html#method.ilog2\" title=\"method i64::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1202\"><a href=\"#examples-1202\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-9\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1203\"><a href=\"#examples-1203\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i64;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-9\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1204\"><a href=\"#examples-1204\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_ones(),+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-9\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1205\"><a href=\"#examples-1205\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i64;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-9\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1206\"><a href=\"#examples-1206\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xaa00000000006e1i64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x6e10aa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xaa00000000006e1i64;%0Alet+m+=+0x6e10aa;%0A%0Aassert_eq!(n.rotate_left(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-9\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1207\"><a href=\"#examples-1207\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x6e10aai64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xaa00000000006e1</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x6e10aai64;%0Alet+m+=+0xaa00000000006e1;%0A%0Aassert_eq!(n.rotate_right(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-9\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1208\"><a href=\"#examples-1208\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x5634129078563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x5634129078563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-9\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1209\"><a href=\"#examples-1209\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x6a2c48091e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i64</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x6a2c48091e6a2c48);%0Aassert_eq!(0,+0i64.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-9\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1210\"><a href=\"#examples-1210\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i64::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-9\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1211\"><a href=\"#examples-1211\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i64::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-9\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1212\"><a href=\"#examples-1212\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-9\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1213\"><a href=\"#examples-1213\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-9\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1214\"><a href=\"#examples-1214\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MAX+-+2).checked_add(1),+Some(i64::MAX+-+1));%0Aassert_eq!((i64::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-9\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-57\"><a href=\"#safety-57\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i64::MAX</code> or <code>self + rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_add\" title=\"method i64::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned-9\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1215\"><a href=\"#examples-1215\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i64::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-9\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1216\"><a href=\"#examples-1216\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(1),+Some(i64::MIN+%2B+1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-9\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-58\"><a href=\"#safety-58\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i64::MAX</code> or <code>self - rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_sub\" title=\"method i64::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned-9\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1217\"><a href=\"#examples-1217\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-9\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1218\"><a href=\"#examples-1218\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.checked_mul(1),+Some(i64::MAX));%0Aassert_eq!(i64::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-9\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-59\"><a href=\"#safety-59\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i64::MAX</code> or <code>self * rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_mul\" title=\"method i64::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-9\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-1219\"><a href=\"#examples-1219\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div(-1),+None);%0Aassert_eq!((1i64).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-9\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1220\"><a href=\"#examples-1220\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div_euclid(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i64).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-9\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1221\"><a href=\"#examples-1221\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem(2),+Some(1));%0Aassert_eq!(5i64.checked_rem(0),+None);%0Aassert_eq!(i64::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-9\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1222\"><a href=\"#examples-1222\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i64.checked_rem_euclid(0),+None);%0Aassert_eq!(i64::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-9\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-1223\"><a href=\"#examples-1223\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_neg(),+Some(-5));%0Aassert_eq!(i64::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-9\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1224\"><a href=\"#examples-1224\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i64.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-9\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-60\"><a href=\"#safety-60\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shl\" title=\"method i64::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-9\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1225\"><a href=\"#examples-1225\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i64.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-9\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-61\"><a href=\"#safety-61\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shr\" title=\"method i64::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-9\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-1226\"><a href=\"#examples-1226\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i64</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i64).checked_abs(),+Some(5));%0Aassert_eq!(i64::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-9\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1227\"><a href=\"#examples-1227\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i64</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i64.checked_pow(2),+Some(64));%0Aassert_eq!(i64::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt-9\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-1228\"><a href=\"#examples-1228\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-9\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-1229\"><a href=\"#examples-1229\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add(<span class=\"number\">100</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_add(-<span class=\"number\">1</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_add(1),+101);%0Aassert_eq!(i64::MAX.saturating_add(100),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_add(-1),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned-9\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1230\"><a href=\"#examples-1230\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.saturating_add_unsigned(2),+3);%0Aassert_eq!(i64::MAX.saturating_add_unsigned(100),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-9\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1231\"><a href=\"#examples-1231\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub(<span class=\"number\">100</span>), i64::MIN);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_sub(-<span class=\"number\">1</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub(100),+i64::MIN);%0Aassert_eq!(i64::MAX.saturating_sub(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned-9\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1232\"><a href=\"#examples-1232\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub_unsigned(100),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-9\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-1233\"><a href=\"#examples-1233\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_neg(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_neg(), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_neg(),+-100);%0Aassert_eq!((-100i64).saturating_neg(),+100);%0Aassert_eq!(i64::MIN.saturating_neg(),+i64::MAX);%0Aassert_eq!(i64::MAX.saturating_neg(),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-9\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-1234\"><a href=\"#examples-1234\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_abs(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).saturating_abs(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_abs(),+100);%0Aassert_eq!((-100i64).saturating_abs(),+100);%0Aassert_eq!(i64::MIN.saturating_abs(),+i64::MAX);%0Aassert_eq!((i64::MIN+%2B+1).saturating_abs(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-9\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1235\"><a href=\"#examples-1235\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_mul(<span class=\"number\">10</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_mul(<span class=\"number\">10</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.saturating_mul(12),+120);%0Aassert_eq!(i64::MAX.saturating_mul(10),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_mul(10),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-9\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1236\"><a href=\"#examples-1236\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_div(-<span class=\"number\">1</span>), i64::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_div(-<span class=\"number\">1</span>), i64::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.saturating_div(2),+2);%0Aassert_eq!(i64::MAX.saturating_div(-1),+i64::MIN+%2B+1);%0Aassert_eq!(i64::MIN.saturating_div(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i64</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i64.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-9\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1237\"><a href=\"#examples-1237\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i64</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">2</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">3</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i64).saturating_pow(3),+-64);%0Aassert_eq!(i64::MIN.saturating_pow(2),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_pow(3),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-9\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1238\"><a href=\"#examples-1238\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned-9\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1239\"><a href=\"#examples-1239\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add_unsigned(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-9\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1240\"><a href=\"#examples-1240\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub(i64::MAX), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub(i64::MAX),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned-9\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1241\"><a href=\"#examples-1241\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub_unsigned(u64::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub_unsigned(u64::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-9\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-1242\"><a href=\"#examples-1242\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-9\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-207\"><a href=\"#panics-207\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1243\"><a href=\"#examples-1243\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-9\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-208\"><a href=\"#panics-208\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1244\"><a href=\"#examples-1244\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-9\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-209\"><a href=\"#panics-209\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1245\"><a href=\"#examples-1245\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-9\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-210\"><a href=\"#panics-210\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1246\"><a href=\"#examples-1246\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-9\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1247\"><a href=\"#examples-1247\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_neg(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_neg(),+-100);%0Aassert_eq!(i64::MIN.wrapping_neg(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-9\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_left\" title=\"method i64::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1248\"><a href=\"#examples-1248\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i64).wrapping_shl(7),+-128);%0Aassert_eq!((-1i64).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-9\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_right\" title=\"method i64::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1249\"><a href=\"#examples-1249\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i64</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i64).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-9\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1250\"><a href=\"#examples-1250\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_abs(), i64::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_abs(),+100);%0Aassert_eq!((-100i64).wrapping_abs(),+100);%0Aassert_eq!(i64::MIN.wrapping_abs(),+i64::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-9\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-1251\"><a href=\"#examples-1251\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.unsigned_abs(),+100u64);%0Aassert_eq!((-100i64).unsigned_abs(),+100u64);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-9\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1252\"><a href=\"#examples-1252\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-9\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1253\"><a href=\"#examples-1253\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.overflowing_add(<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_add(2),+(7,+false));%0Aassert_eq!(i64::MAX.overflowing_add(1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-9\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"std/primitive.u64.html#method.carrying_add\" title=\"method u64::carrying_add\"><code>u64::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_add\" title=\"method i64::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-1254\"><a href=\"#examples-1254\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^64 + 2^64 - 1)\n// + -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^64 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">10</span>, u64::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E64+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(10,+u64::MAX);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u64::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i64::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned-9\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1255\"><a href=\"#examples-1255\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_add_unsigned(u64::MAX), (i64::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i64::MIN).overflowing_add_unsigned(u64::MAX),+(i64::MAX,+false));%0Aassert_eq!((i64::MAX+-+2).overflowing_add_unsigned(3),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-9\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1256\"><a href=\"#examples-1256\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_sub(<span class=\"number\">1</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i64::MIN.overflowing_sub(1),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-9\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"std/primitive.u64.html#method.borrowing_sub\" title=\"method u64::borrowing_sub\"><code>u64::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_sub\" title=\"method i64::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-1257\"><a href=\"#examples-1257\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^64 + 8)\n// - -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^64 + 2^64 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u64::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E64+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(6,+8);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u64::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i64::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u64::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned-9\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1258\"><a href=\"#examples-1258\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX).overflowing_sub_unsigned(u64::MAX), (i64::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i64::MAX).overflowing_sub_unsigned(u64::MAX),+(i64::MIN,+false));%0Aassert_eq!((i64::MIN+%2B+2).overflowing_sub_unsigned(3),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-9\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1259\"><a href=\"#examples-1259\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-9\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-211\"><a href=\"#panics-211\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1260\"><a href=\"#examples-1260\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-9\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-212\"><a href=\"#panics-212\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1261\"><a href=\"#examples-1261\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div_euclid(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-9\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-213\"><a href=\"#panics-213\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1262\"><a href=\"#examples-1262\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-9\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-214\"><a href=\"#panics-214\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1263\"><a href=\"#examples-1263\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-9\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-1264\"><a href=\"#examples-1264\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_neg(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i64::MIN.overflowing_neg(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-9\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1265\"><a href=\"#examples-1265\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-9\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1266\"><a href=\"#examples-1266\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-9\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i64::MIN for values of type i64),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-1267\"><a href=\"#examples-1267\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_abs(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i64).overflowing_abs(),+(10,+false));%0Aassert_eq!((i64::MIN).overflowing_abs(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-9\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1268\"><a href=\"#examples-1268\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-9\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1269\"><a href=\"#examples-1269\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i64 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i64+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-9\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-215\"><a href=\"#panics-215\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-1270\"><a href=\"#examples-1270\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-11\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-216\"><a href=\"#panics-216\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1271\"><a href=\"#examples-1271\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-11\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-217\"><a href=\"#panics-217\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1272\"><a href=\"#examples-1272\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-9\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-9\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-218\"><a href=\"#panics-218\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-36\"><a href=\"#overflow-behavior-36\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1273\"><a href=\"#examples-1273\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-9\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-9\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-219\"><a href=\"#panics-219\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-37\"><a href=\"#overflow-behavior-37\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1274\"><a href=\"#examples-1274\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-9\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-9\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-220\"><a href=\"#panics-220\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-38\"><a href=\"#overflow-behavior-38\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1275\"><a href=\"#examples-1275\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.next_multiple_of(8),+16);%0Aassert_eq!(23_i64.next_multiple_of(8),+24);%0Aassert_eq!(16_i64.next_multiple_of(-8),+16);%0Aassert_eq!(23_i64.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i64).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-9\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-9\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-1276\"><a href=\"#examples-1276\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i64</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i64.checked_next_multiple_of(0),+None);%0Aassert_eq!(i64::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-11\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1277\"><a href=\"#examples-1277\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.midpoint(4),+2);%0Aassert_eq!(0i64.midpoint(-1),+-1);%0Aassert_eq!((-1i64).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-9\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-221\"><a href=\"#panics-221\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1278\"><a href=\"#examples-1278\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-9\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-222\"><a href=\"#panics-222\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-1279\"><a href=\"#examples-1279\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-9\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-223\"><a href=\"#panics-223\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example-20\"><a href=\"#example-20\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-9\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1280\"><a href=\"#examples-1280\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-9\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-1281\"><a href=\"#examples-1281\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-9\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-21\"><a href=\"#example-21\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-11\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-39\"><a href=\"#overflow-behavior-39\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i64::MIN</code>\ncannot be represented as an\n<code>i64</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i64::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-1282\"><a href=\"#examples-1282\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.abs(),+10);%0Aassert_eq!((-10i64).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-9\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-1283\"><a href=\"#examples-1283\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.abs_diff(i64::MAX), u64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.abs_diff(80),+20u64);%0Aassert_eq!(100i64.abs_diff(110),+10u64);%0Aassert_eq!((-100i64).abs_diff(80),+180u64);%0Aassert_eq!((-100i64).abs_diff(-120),+20u64);%0Aassert_eq!(i64::MIN.abs_diff(i64::MAX),+u64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum-11\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-1284\"><a href=\"#examples-1284\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.signum(),+1);%0Aassert_eq!(0i64.signum(),+0);%0Aassert_eq!((-10i64).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-9\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-1285\"><a href=\"#examples-1285\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i64</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i64</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i64.is_positive());%0Aassert!(!(-10i64).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-9\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-1286\"><a href=\"#examples-1286\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i64</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i64</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i64).is_negative());%0Aassert!(!10i64.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-11\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1287\"><a href=\"#examples-1287\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-11\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1288\"><a href=\"#examples-1288\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-11\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.i64.html#method.to_be_bytes\" title=\"method i64::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.to_le_bytes\" title=\"method i64::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1289\"><a href=\"#examples-1289\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A++++%7D+else+%7B%0A++++++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-11\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-1290\"><a href=\"#examples-1290\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-11\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-1291\"><a href=\"#examples-1291\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_le_bytes([<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_le_bytes(%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-11\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-11\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.i64.html#method.from_be_bytes\" title=\"associated function i64::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.from_le_bytes\" title=\"associated function i64::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1292\"><a href=\"#examples-1292\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A%7D+else+%7B%0A++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-9\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-9\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"std::os::linux::raw::arch::off_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i64-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#357\">source</a><a href=\"#impl-i64-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-12\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-12\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = -9_223_372_036_854_775_808i64</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>63</sup>).</p>\n<h5 id=\"examples-1293\"><a href=\"#examples-1293\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MIN, -<span class=\"number\">9223372036854775808</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MIN,+-9223372036854775808);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-12\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-12\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a> = 9_223_372_036_854_775_807i64</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>63</sup> − 1).</p>\n<h5 id=\"examples-1294\"><a href=\"#examples-1294\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX, <span class=\"number\">9223372036854775807</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX,+9223372036854775807);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-10\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-10\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1295\"><a href=\"#examples-1295\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::BITS, <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::BITS,+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-10\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-224\"><a href=\"#panics-224\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1296\"><a href=\"#examples-1296\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-10\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1297\"><a href=\"#examples-1297\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i64;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-10\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1298\"><a href=\"#examples-1298\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-10\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.i64.html#method.ilog2\" title=\"method i64::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1299\"><a href=\"#examples-1299\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-10\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1300\"><a href=\"#examples-1300\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i64;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-10\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1301\"><a href=\"#examples-1301\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_ones(),+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-10\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1302\"><a href=\"#examples-1302\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i64;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-10\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1303\"><a href=\"#examples-1303\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xaa00000000006e1i64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x6e10aa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xaa00000000006e1i64;%0Alet+m+=+0x6e10aa;%0A%0Aassert_eq!(n.rotate_left(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-10\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1304\"><a href=\"#examples-1304\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x6e10aai64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xaa00000000006e1</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x6e10aai64;%0Alet+m+=+0xaa00000000006e1;%0A%0Aassert_eq!(n.rotate_right(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-10\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1305\"><a href=\"#examples-1305\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x5634129078563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x5634129078563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-10\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1306\"><a href=\"#examples-1306\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x6a2c48091e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i64</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x6a2c48091e6a2c48);%0Aassert_eq!(0,+0i64.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-10\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1307\"><a href=\"#examples-1307\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i64::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-10\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1308\"><a href=\"#examples-1308\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i64::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-10\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1309\"><a href=\"#examples-1309\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-10\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1310\"><a href=\"#examples-1310\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-10\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1311\"><a href=\"#examples-1311\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MAX+-+2).checked_add(1),+Some(i64::MAX+-+1));%0Aassert_eq!((i64::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-10\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-62\"><a href=\"#safety-62\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i64::MAX</code> or <code>self + rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_add\" title=\"method i64::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned-10\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1312\"><a href=\"#examples-1312\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i64::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-10\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1313\"><a href=\"#examples-1313\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(1),+Some(i64::MIN+%2B+1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-10\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-63\"><a href=\"#safety-63\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i64::MAX</code> or <code>self - rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_sub\" title=\"method i64::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned-10\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1314\"><a href=\"#examples-1314\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-10\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1315\"><a href=\"#examples-1315\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.checked_mul(1),+Some(i64::MAX));%0Aassert_eq!(i64::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-10\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-64\"><a href=\"#safety-64\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i64::MAX</code> or <code>self * rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_mul\" title=\"method i64::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-10\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-1316\"><a href=\"#examples-1316\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div(-1),+None);%0Aassert_eq!((1i64).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-10\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1317\"><a href=\"#examples-1317\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div_euclid(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i64).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-10\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1318\"><a href=\"#examples-1318\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem(2),+Some(1));%0Aassert_eq!(5i64.checked_rem(0),+None);%0Aassert_eq!(i64::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-10\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1319\"><a href=\"#examples-1319\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i64.checked_rem_euclid(0),+None);%0Aassert_eq!(i64::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-10\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-1320\"><a href=\"#examples-1320\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_neg(),+Some(-5));%0Aassert_eq!(i64::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-10\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1321\"><a href=\"#examples-1321\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i64.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-10\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-65\"><a href=\"#safety-65\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shl\" title=\"method i64::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-10\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1322\"><a href=\"#examples-1322\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i64.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-10\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-66\"><a href=\"#safety-66\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i64.html#method.checked_shr\" title=\"method i64::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-10\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-1323\"><a href=\"#examples-1323\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i64</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i64).checked_abs(),+Some(5));%0Aassert_eq!(i64::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-10\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1324\"><a href=\"#examples-1324\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i64</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i64.checked_pow(2),+Some(64));%0Aassert_eq!(i64::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt-10\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-1325\"><a href=\"#examples-1325\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-10\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-1326\"><a href=\"#examples-1326\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add(<span class=\"number\">100</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_add(-<span class=\"number\">1</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_add(1),+101);%0Aassert_eq!(i64::MAX.saturating_add(100),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_add(-1),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned-10\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1327\"><a href=\"#examples-1327\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.saturating_add_unsigned(2),+3);%0Aassert_eq!(i64::MAX.saturating_add_unsigned(100),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-10\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1328\"><a href=\"#examples-1328\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub(<span class=\"number\">100</span>), i64::MIN);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_sub(-<span class=\"number\">1</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub(100),+i64::MIN);%0Aassert_eq!(i64::MAX.saturating_sub(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned-10\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1329\"><a href=\"#examples-1329\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub_unsigned(100),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-10\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-1330\"><a href=\"#examples-1330\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_neg(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_neg(), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_neg(),+-100);%0Aassert_eq!((-100i64).saturating_neg(),+100);%0Aassert_eq!(i64::MIN.saturating_neg(),+i64::MAX);%0Aassert_eq!(i64::MAX.saturating_neg(),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-10\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-1331\"><a href=\"#examples-1331\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_abs(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).saturating_abs(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_abs(),+100);%0Aassert_eq!((-100i64).saturating_abs(),+100);%0Aassert_eq!(i64::MIN.saturating_abs(),+i64::MAX);%0Aassert_eq!((i64::MIN+%2B+1).saturating_abs(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-10\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1332\"><a href=\"#examples-1332\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_mul(<span class=\"number\">10</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_mul(<span class=\"number\">10</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.saturating_mul(12),+120);%0Aassert_eq!(i64::MAX.saturating_mul(10),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_mul(10),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-10\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1333\"><a href=\"#examples-1333\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_div(-<span class=\"number\">1</span>), i64::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_div(-<span class=\"number\">1</span>), i64::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.saturating_div(2),+2);%0Aassert_eq!(i64::MAX.saturating_div(-1),+i64::MIN+%2B+1);%0Aassert_eq!(i64::MIN.saturating_div(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i64</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i64.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-10\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1334\"><a href=\"#examples-1334\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i64</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">2</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">3</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i64).saturating_pow(3),+-64);%0Aassert_eq!(i64::MIN.saturating_pow(2),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_pow(3),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-10\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1335\"><a href=\"#examples-1335\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned-10\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1336\"><a href=\"#examples-1336\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add_unsigned(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-10\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1337\"><a href=\"#examples-1337\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub(i64::MAX), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub(i64::MAX),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned-10\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1338\"><a href=\"#examples-1338\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub_unsigned(u64::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub_unsigned(u64::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-10\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-1339\"><a href=\"#examples-1339\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-10\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-225\"><a href=\"#panics-225\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1340\"><a href=\"#examples-1340\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-10\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-226\"><a href=\"#panics-226\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1341\"><a href=\"#examples-1341\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-10\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-227\"><a href=\"#panics-227\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1342\"><a href=\"#examples-1342\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-10\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-228\"><a href=\"#panics-228\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1343\"><a href=\"#examples-1343\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-10\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1344\"><a href=\"#examples-1344\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_neg(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_neg(),+-100);%0Aassert_eq!(i64::MIN.wrapping_neg(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-10\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_left\" title=\"method i64::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1345\"><a href=\"#examples-1345\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i64).wrapping_shl(7),+-128);%0Aassert_eq!((-1i64).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-10\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"std/primitive.i64.html#method.rotate_right\" title=\"method i64::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1346\"><a href=\"#examples-1346\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i64</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i64).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-10\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1347\"><a href=\"#examples-1347\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_abs(), i64::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_abs(),+100);%0Aassert_eq!((-100i64).wrapping_abs(),+100);%0Aassert_eq!(i64::MIN.wrapping_abs(),+i64::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-10\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-1348\"><a href=\"#examples-1348\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.unsigned_abs(),+100u64);%0Aassert_eq!((-100i64).unsigned_abs(),+100u64);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-10\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1349\"><a href=\"#examples-1349\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-10\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1350\"><a href=\"#examples-1350\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.overflowing_add(<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_add(2),+(7,+false));%0Aassert_eq!(i64::MAX.overflowing_add(1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-10\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"std/primitive.u64.html#method.carrying_add\" title=\"method u64::carrying_add\"><code>u64::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_add\" title=\"method i64::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-1351\"><a href=\"#examples-1351\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^64 + 2^64 - 1)\n// + -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^64 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">10</span>, u64::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E64+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(10,+u64::MAX);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u64::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i64::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned-10\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1352\"><a href=\"#examples-1352\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_add_unsigned(u64::MAX), (i64::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i64::MIN).overflowing_add_unsigned(u64::MAX),+(i64::MAX,+false));%0Aassert_eq!((i64::MAX+-+2).overflowing_add_unsigned(3),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-10\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1353\"><a href=\"#examples-1353\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_sub(<span class=\"number\">1</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i64::MIN.overflowing_sub(1),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-10\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"std/primitive.u64.html#method.borrowing_sub\" title=\"method u64::borrowing_sub\"><code>u64::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"std/primitive.i64.html#method.overflowing_sub\" title=\"method i64::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-1354\"><a href=\"#examples-1354\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^64 + 8)\n// - -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^64 + 2^64 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u64::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E64+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(6,+8);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u64::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i64::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u64::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned-10\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1355\"><a href=\"#examples-1355\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX).overflowing_sub_unsigned(u64::MAX), (i64::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i64::MAX).overflowing_sub_unsigned(u64::MAX),+(i64::MIN,+false));%0Aassert_eq!((i64::MIN+%2B+2).overflowing_sub_unsigned(3),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-10\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1356\"><a href=\"#examples-1356\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-10\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-229\"><a href=\"#panics-229\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1357\"><a href=\"#examples-1357\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-10\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-230\"><a href=\"#panics-230\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1358\"><a href=\"#examples-1358\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div_euclid(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-10\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-231\"><a href=\"#panics-231\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1359\"><a href=\"#examples-1359\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-10\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-232\"><a href=\"#panics-232\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1360\"><a href=\"#examples-1360\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-10\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-1361\"><a href=\"#examples-1361\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_neg(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i64::MIN.overflowing_neg(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-10\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1362\"><a href=\"#examples-1362\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-10\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1363\"><a href=\"#examples-1363\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-10\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i64::MIN for values of type i64),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-1364\"><a href=\"#examples-1364\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_abs(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i64).overflowing_abs(),+(10,+false));%0Aassert_eq!((i64::MIN).overflowing_abs(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-10\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1365\"><a href=\"#examples-1365\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-10\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1366\"><a href=\"#examples-1366\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i64 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i64+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-10\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-233\"><a href=\"#panics-233\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-1367\"><a href=\"#examples-1367\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-12\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-234\"><a href=\"#panics-234\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1368\"><a href=\"#examples-1368\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-12\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-235\"><a href=\"#panics-235\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1369\"><a href=\"#examples-1369\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-10\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-10\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-236\"><a href=\"#panics-236\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-40\"><a href=\"#overflow-behavior-40\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1370\"><a href=\"#examples-1370\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-10\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-10\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-237\"><a href=\"#panics-237\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-41\"><a href=\"#overflow-behavior-41\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1371\"><a href=\"#examples-1371\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-10\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-10\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-238\"><a href=\"#panics-238\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-42\"><a href=\"#overflow-behavior-42\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1372\"><a href=\"#examples-1372\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.next_multiple_of(8),+16);%0Aassert_eq!(23_i64.next_multiple_of(8),+24);%0Aassert_eq!(16_i64.next_multiple_of(-8),+16);%0Aassert_eq!(23_i64.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i64).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-10\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-10\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-1373\"><a href=\"#examples-1373\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i64</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i64.checked_next_multiple_of(0),+None);%0Aassert_eq!(i64::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-12\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1374\"><a href=\"#examples-1374\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.midpoint(4),+2);%0Aassert_eq!(0i64.midpoint(-1),+-1);%0Aassert_eq!((-1i64).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-10\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-239\"><a href=\"#panics-239\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1375\"><a href=\"#examples-1375\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-10\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-240\"><a href=\"#panics-240\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-1376\"><a href=\"#examples-1376\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-10\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-241\"><a href=\"#panics-241\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example-22\"><a href=\"#example-22\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-10\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1377\"><a href=\"#examples-1377\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-10\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-1378\"><a href=\"#examples-1378\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-10\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-23\"><a href=\"#example-23\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-12\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-43\"><a href=\"#overflow-behavior-43\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i64::MIN</code>\ncannot be represented as an\n<code>i64</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i64::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-1379\"><a href=\"#examples-1379\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.abs(),+10);%0Aassert_eq!((-10i64).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-10\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-1380\"><a href=\"#examples-1380\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.abs_diff(i64::MAX), u64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.abs_diff(80),+20u64);%0Aassert_eq!(100i64.abs_diff(110),+10u64);%0Aassert_eq!((-100i64).abs_diff(80),+180u64);%0Aassert_eq!((-100i64).abs_diff(-120),+20u64);%0Aassert_eq!(i64::MIN.abs_diff(i64::MAX),+u64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum-12\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-1381\"><a href=\"#examples-1381\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.signum(),+1);%0Aassert_eq!(0i64.signum(),+0);%0Aassert_eq!((-10i64).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-10\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-1382\"><a href=\"#examples-1382\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i64</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i64</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i64.is_positive());%0Aassert!(!(-10i64).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-10\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-1383\"><a href=\"#examples-1383\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i64</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i64</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i64).is_negative());%0Aassert!(!10i64.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-12\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1384\"><a href=\"#examples-1384\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-12\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1385\"><a href=\"#examples-1385\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-12\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.i64.html#method.to_be_bytes\" title=\"method i64::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.to_le_bytes\" title=\"method i64::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1386\"><a href=\"#examples-1386\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A++++%7D+else+%7B%0A++++++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-12\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-1387\"><a href=\"#examples-1387\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-12\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-1388\"><a href=\"#examples-1388\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_le_bytes([<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_le_bytes(%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-12\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.i64.html#method.from_be_bytes\" title=\"associated function i64::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.i64.html#method.from_le_bytes\" title=\"associated function i64::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1389\"><a href=\"#examples-1389\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A%7D+else+%7B%0A++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-10\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-10\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"std::os::macos::raw::time_t"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()