(function() {var type_impls = {
"std":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-899\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-899\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-900\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-900\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-901\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-901\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-902\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-902\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-903\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-903\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-904\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-904\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-281\"><a href=\"#panics-281\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-905\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-905\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-282\"><a href=\"#panics-282\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-906\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-906\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-283\"><a href=\"#panics-283\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-907\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-907\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-284\"><a href=\"#panics-284\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-908\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-908\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-285\"><a href=\"#panics-285\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-909\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-909\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-286\"><a href=\"#panics-286\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-910\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-910\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CNonZeroU32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Div%3CNonZeroU32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.div-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero,\ntruncating any fractional part of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-911\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-911\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details></div></details>","Div","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CNonZeroU32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Div%3CNonZeroU32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.div-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero,\ntruncating any fractional part of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-912\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-912\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details></div></details>","Div","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CNonZeroU32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Div%3CNonZeroU32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.div-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero,\ntruncating any fractional part of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-913\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-913\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details></div></details>","Div","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CNonZeroU32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Div%3CNonZeroU32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.div-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero,\ntruncating any fractional part of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-914\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-914\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details></div></details>","Div","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CNonZeroU32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Div%3CNonZeroU32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.div-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero,\ntruncating any fractional part of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-915\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-915\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details></div></details>","Div","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CNonZeroU32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Div%3CNonZeroU32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.div-48\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero,\ntruncating any fractional part of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-916\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-916\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details></div></details>","Div","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Binary-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-117\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-117\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Binary-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-118\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-118\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Binary-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-119\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-119\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Binary-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-120\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-120\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Binary-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-121\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-121\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Binary-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-122\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-122\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIpv4Addr%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"src/core/net/ip_addr.rs.html#1122\">source</a></span><a href=\"#impl-From%3CIpv4Addr%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-87\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1125\">source</a><a href=\"#method.from-87\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(ip: <a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Uses <a href=\"std/net/struct.Ipv4Addr.html#method.to_bits\" title=\"method std::net::Ipv4Addr::to_bits\"><code>Ipv4Addr::to_bits</code></a> to convert an IPv4 address to a host byte order <code>u32</code>.</p>\n</div></details></div></details>","From","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIpv4Addr%3E-for-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1122\">source</a><a href=\"#impl-From%3CIpv4Addr%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-88\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1125\">source</a><a href=\"#method.from-88\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(ip: <a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Uses <a href=\"std/net/struct.Ipv4Addr.html#method.to_bits\" title=\"method std::net::Ipv4Addr::to_bits\"><code>Ipv4Addr::to_bits</code></a> to convert an IPv4 address to a host byte order <code>u32</code>.</p>\n</div></details></div></details>","From","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIpv4Addr%3E-for-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1122\">source</a><a href=\"#impl-From%3CIpv4Addr%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-89\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1125\">source</a><a href=\"#method.from-89\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(ip: <a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Uses <a href=\"std/net/struct.Ipv4Addr.html#method.to_bits\" title=\"method std::net::Ipv4Addr::to_bits\"><code>Ipv4Addr::to_bits</code></a> to convert an IPv4 address to a host byte order <code>u32</code>.</p>\n</div></details></div></details>","From","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIpv4Addr%3E-for-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1122\">source</a><a href=\"#impl-From%3CIpv4Addr%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-90\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1125\">source</a><a href=\"#method.from-90\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(ip: <a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Uses <a href=\"std/net/struct.Ipv4Addr.html#method.to_bits\" title=\"method std::net::Ipv4Addr::to_bits\"><code>Ipv4Addr::to_bits</code></a> to convert an IPv4 address to a host byte order <code>u32</code>.</p>\n</div></details></div></details>","From","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIpv4Addr%3E-for-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1122\">source</a><a href=\"#impl-From%3CIpv4Addr%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-91\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1125\">source</a><a href=\"#method.from-91\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(ip: <a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Uses <a href=\"std/net/struct.Ipv4Addr.html#method.to_bits\" title=\"method std::net::Ipv4Addr::to_bits\"><code>Ipv4Addr::to_bits</code></a> to convert an IPv4 address to a host byte order <code>u32</code>.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIpv4Addr%3E-for-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1122\">source</a><a href=\"#impl-From%3CIpv4Addr%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-92\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/net/ip_addr.rs.html#1125\">source</a><a href=\"#method.from-92\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(ip: <a class=\"struct\" href=\"std/net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Uses <a href=\"std/net/struct.Ipv4Addr.html#method.to_bits\" title=\"method std::net::Ipv4Addr::to_bits\"><code>Ipv4Addr::to_bits</code></a> to convert an IPv4 address to a host byte order <code>u32</code>.</p>\n</div></details></div></details>","From","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cchar%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"src/core/char/convert.rs.html#30\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-93\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/char/convert.rs.html#43\">source</a><a href=\"#method.from-93\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>.</p>\n<h5 id=\"examples-1597\"><a href=\"#examples-1597\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">&#39;c&#39;</span>;\n<span class=\"kw\">let </span>u = u32::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">4 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::mem;%0A%0Alet+c+=+'c';%0Alet+u+=+u32::from(c);%0Aassert!(4+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cchar%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"src/core/char/convert.rs.html#30\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-94\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/char/convert.rs.html#43\">source</a><a href=\"#method.from-94\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>.</p>\n<h5 id=\"examples-1598\"><a href=\"#examples-1598\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">&#39;c&#39;</span>;\n<span class=\"kw\">let </span>u = u32::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">4 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::mem;%0A%0Alet+c+=+'c';%0Alet+u+=+u32::from(c);%0Aassert!(4+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cchar%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"src/core/char/convert.rs.html#30\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-95\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/char/convert.rs.html#43\">source</a><a href=\"#method.from-95\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>.</p>\n<h5 id=\"examples-1599\"><a href=\"#examples-1599\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">&#39;c&#39;</span>;\n<span class=\"kw\">let </span>u = u32::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">4 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::mem;%0A%0Alet+c+=+'c';%0Alet+u+=+u32::from(c);%0Aassert!(4+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cchar%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"src/core/char/convert.rs.html#30\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-96\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/char/convert.rs.html#43\">source</a><a href=\"#method.from-96\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>.</p>\n<h5 id=\"examples-1600\"><a href=\"#examples-1600\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">&#39;c&#39;</span>;\n<span class=\"kw\">let </span>u = u32::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">4 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::mem;%0A%0Alet+c+=+'c';%0Alet+u+=+u32::from(c);%0Aassert!(4+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cchar%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"src/core/char/convert.rs.html#30\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-97\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/char/convert.rs.html#43\">source</a><a href=\"#method.from-97\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>.</p>\n<h5 id=\"examples-1601\"><a href=\"#examples-1601\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">&#39;c&#39;</span>;\n<span class=\"kw\">let </span>u = u32::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">4 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::mem;%0A%0Alet+c+=+'c';%0Alet+u+=+u32::from(c);%0Aassert!(4+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cchar%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"src/core/char/convert.rs.html#30\">source</a></span><a href=\"#impl-From%3Cchar%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-98\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/char/convert.rs.html#43\">source</a><a href=\"#method.from-98\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>.</p>\n<h5 id=\"examples-1602\"><a href=\"#examples-1602\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>c = <span class=\"string\">&#39;c&#39;</span>;\n<span class=\"kw\">let </span>u = u32::from(c);\n<span class=\"macro\">assert!</span>(<span class=\"number\">4 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>u))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Ause+std::mem;%0A%0Alet+c+=+'c';%0Alet+u+=+u32::from(c);%0Aassert!(4+==+mem::size_of_val(%26u))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#104\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-99\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#104\">source</a><a href=\"#method.from-99\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#104\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-100\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#104\">source</a><a href=\"#method.from-100\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#104\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-101\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#104\">source</a><a href=\"#method.from-101\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#104\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-102\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#104\">source</a><a href=\"#method.from-102\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#104\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-103\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#104\">source</a><a href=\"#method.from-103\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#104\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-104\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#104\">source</a><a href=\"#method.from-104\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#87\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-105\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#87\">source</a><a href=\"#method.from-105\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>u32</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-1603\"><a href=\"#examples-1603\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from(true),+1);%0Aassert_eq!(u32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#87\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-106\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#87\">source</a><a href=\"#method.from-106\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>u32</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-1604\"><a href=\"#examples-1604\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from(true),+1);%0Aassert_eq!(u32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#87\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-107\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#87\">source</a><a href=\"#method.from-107\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>u32</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-1605\"><a href=\"#examples-1605\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from(true),+1);%0Aassert_eq!(u32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#87\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-108\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#87\">source</a><a href=\"#method.from-108\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>u32</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-1606\"><a href=\"#examples-1606\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from(true),+1);%0Aassert_eq!(u32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#87\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-109\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#87\">source</a><a href=\"#method.from-109\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>u32</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-1607\"><a href=\"#examples-1607\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from(true),+1);%0Aassert_eq!(u32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#87\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-110\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#87\">source</a><a href=\"#method.from-110\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>u32</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-1608\"><a href=\"#examples-1608\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from(true),+1);%0Aassert_eq!(u32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#100\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-111\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#100\">source</a><a href=\"#method.from-111\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#100\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-112\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#100\">source</a><a href=\"#method.from-112\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#100\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-113\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#100\">source</a><a href=\"#method.from-113\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#100\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-114\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#100\">source</a><a href=\"#method.from-114\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#100\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-115\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#100\">source</a><a href=\"#method.from-115\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#100\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-116\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#100\">source</a><a href=\"#method.from-116\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>u32</code> losslessly.</p>\n</div></details></div></details>","From","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroU32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-117\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-117\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroU32</code> into an <code>u32</code></p>\n</div></details></div></details>","From","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroU32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-118\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-118\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroU32</code> into an <code>u32</code></p>\n</div></details></div></details>","From","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroU32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-119\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-119\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroU32</code> into an <code>u32</code></p>\n</div></details></div></details>","From","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroU32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-120\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-120\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroU32</code> into an <code>u32</code></p>\n</div></details></div></details>","From","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroU32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-121\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-121\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroU32</code> into an <code>u32</code></p>\n</div></details></div></details>","From","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroU32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroU32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-122\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-122\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroU32</code> into an <code>u32</code></p>\n</div></details></div></details>","From","std::os::macos::raw::mode_t"],["<section id=\"impl-Copy-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Copy","std::ffi::c_uint"],["<section id=\"impl-Copy-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Copy","std::os::unix::raw::uid_t"],["<section id=\"impl-Copy-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Copy","std::os::unix::raw::gid_t"],["<section id=\"impl-Copy-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Copy","std::os::linux::raw::mode_t"],["<section id=\"impl-Copy-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Copy","std::os::linux::raw::arch::nlink_t"],["<section id=\"impl-Copy-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Copy","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-917\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-917\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-918\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-918\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-919\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-919\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-920\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-920\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-921\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-921\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-922\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-922\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-923\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-923\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-924\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-924\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-925\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-925\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-926\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-926\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-927\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-927\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-928\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-928\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDuration%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/time.rs.html#956\">source</a></span><a href=\"#impl-Mul%3CDuration%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-929\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-929\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/time.rs.html#960\">source</a><a href=\"#method.mul-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDuration%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/time.rs.html#956\">source</a></span><a href=\"#impl-Mul%3CDuration%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-930\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-930\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/time.rs.html#960\">source</a><a href=\"#method.mul-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDuration%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/time.rs.html#956\">source</a></span><a href=\"#impl-Mul%3CDuration%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-931\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-931\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/time.rs.html#960\">source</a><a href=\"#method.mul-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDuration%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/time.rs.html#956\">source</a></span><a href=\"#impl-Mul%3CDuration%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-932\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-932\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/time.rs.html#960\">source</a><a href=\"#method.mul-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDuration%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/time.rs.html#956\">source</a></span><a href=\"#impl-Mul%3CDuration%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-933\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-933\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/time.rs.html#960\">source</a><a href=\"#method.mul-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CDuration%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/time.rs.html#956\">source</a></span><a href=\"#impl-Mul%3CDuration%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-934\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-934\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/time.rs.html#960\">source</a><a href=\"#method.mul-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"std/time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#305\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-96\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#305\">source</a><a href=\"#method.try_from-96\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-96\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-96\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#305\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-97\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#305\">source</a><a href=\"#method.try_from-97\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-97\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-97\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#305\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-98\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#305\">source</a><a href=\"#method.try_from-98\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-98\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-98\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#305\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-99\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#305\">source</a><a href=\"#method.try_from-99\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-99\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-99\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#305\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-100\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#305\">source</a><a href=\"#method.try_from-100\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-100\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-100\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#305\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-101\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#305\">source</a><a href=\"#method.try_from-101\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-101\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-101\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#322\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-102\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#322\">source</a><a href=\"#method.try_from-102\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-102\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-102\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#322\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-103\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#322\">source</a><a href=\"#method.try_from-103\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-103\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-103\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#322\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-104\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#322\">source</a><a href=\"#method.try_from-104\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-104\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-104\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#322\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-105\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#322\">source</a><a href=\"#method.try_from-105\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-105\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-105\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#322\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-106\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#322\">source</a><a href=\"#method.try_from-106\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-106\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-106\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#322\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-107\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#322\">source</a><a href=\"#method.try_from-107\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-107\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-107\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#394\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-108\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#394\">source</a><a href=\"#method.try_from-108\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-108\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-108\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#394\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-109\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#394\">source</a><a href=\"#method.try_from-109\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-109\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-109\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#394\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-110\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#394\">source</a><a href=\"#method.try_from-110\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-110\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-110\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#394\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-111\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#394\">source</a><a href=\"#method.try_from-111\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-111\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-111\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#394\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-112\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#394\">source</a><a href=\"#method.try_from-112\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-112\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-112\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#394\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-113\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#394\">source</a><a href=\"#method.try_from-113\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-113\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-113\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#328\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-114\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#328\">source</a><a href=\"#method.try_from-114\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-114\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-114\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#328\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-115\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#328\">source</a><a href=\"#method.try_from-115\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-115\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-115\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#328\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-116\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#328\">source</a><a href=\"#method.try_from-116\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-116\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-116\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#328\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-117\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#328\">source</a><a href=\"#method.try_from-117\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-117\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-117\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#328\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-118\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#328\">source</a><a href=\"#method.try_from-118\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-118\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-118\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#328\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-119\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#328\">source</a><a href=\"#method.try_from-119\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-119\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-119\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#389\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-120\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#389\">source</a><a href=\"#method.try_from-120\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-120\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-120\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#389\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-121\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#389\">source</a><a href=\"#method.try_from-121\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-121\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-121\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#389\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-122\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#389\">source</a><a href=\"#method.try_from-122\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-122\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-122\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#389\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-123\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#389\">source</a><a href=\"#method.try_from-123\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-123\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-123\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#389\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-124\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#389\">source</a><a href=\"#method.try_from-124\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-124\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-124\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#389\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-125\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#389\">source</a><a href=\"#method.try_from-125\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-125\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-125\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#321\">source</a></span><a href=\"#impl-TryFrom%3Ci8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-126\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#321\">source</a><a href=\"#method.try_from-126\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-126\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-126\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#321\">source</a></span><a href=\"#impl-TryFrom%3Ci8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-127\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#321\">source</a><a href=\"#method.try_from-127\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-127\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-127\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#321\">source</a></span><a href=\"#impl-TryFrom%3Ci8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#321\">source</a><a href=\"#method.try_from-128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-128\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-128\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#321\">source</a></span><a href=\"#impl-TryFrom%3Ci8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-129\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#321\">source</a><a href=\"#method.try_from-129\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-129\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-129\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#321\">source</a></span><a href=\"#impl-TryFrom%3Ci8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-130\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#321\">source</a><a href=\"#method.try_from-130\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-130\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-130\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#321\">source</a></span><a href=\"#impl-TryFrom%3Ci8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-131\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#321\">source</a><a href=\"#method.try_from-131\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-131\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-131\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#323\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-132\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#323\">source</a><a href=\"#method.try_from-132\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-132\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-132\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#323\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-133\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#323\">source</a><a href=\"#method.try_from-133\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-133\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-133\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#323\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-134\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#323\">source</a><a href=\"#method.try_from-134\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-134\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-134\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#323\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-135\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#323\">source</a><a href=\"#method.try_from-135\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-135\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-135\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#323\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-136\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#323\">source</a><a href=\"#method.try_from-136\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-136\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-136\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#323\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-137\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#323\">source</a><a href=\"#method.try_from-137\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-137\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-137\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#306\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-138\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#306\">source</a><a href=\"#method.try_from-138\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-138\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-138\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#306\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-139\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#306\">source</a><a href=\"#method.try_from-139\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-139\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-139\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#306\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-140\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#306\">source</a><a href=\"#method.try_from-140\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-140\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-140\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#306\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-141\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#306\">source</a><a href=\"#method.try_from-141\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-141\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-141\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#306\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-142\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#306\">source</a><a href=\"#method.try_from-142\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-142\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-142\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#306\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-143\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#306\">source</a><a href=\"#method.try_from-143\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-143\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-143\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#329\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-144\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#329\">source</a><a href=\"#method.try_from-144\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-144\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-144\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#329\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-145\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#329\">source</a><a href=\"#method.try_from-145\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-145\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-145\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#329\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-146\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#329\">source</a><a href=\"#method.try_from-146\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-146\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-146\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#329\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-147\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#329\">source</a><a href=\"#method.try_from-147\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-147\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-147\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#329\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-148\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#329\">source</a><a href=\"#method.try_from-148\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-148\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-148\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#329\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-149\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#329\">source</a><a href=\"#method.try_from-149\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-149\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-149\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#164\">source</a></span><a href=\"#impl-Default-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#164\">source</a><a href=\"#method.default-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#164\">source</a></span><a href=\"#impl-Default-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#164\">source</a><a href=\"#method.default-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#164\">source</a></span><a href=\"#impl-Default-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#164\">source</a><a href=\"#method.default-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#164\">source</a></span><a href=\"#impl-Default-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#164\">source</a><a href=\"#method.default-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#164\">source</a></span><a href=\"#impl-Default-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#164\">source</a><a href=\"#method.default-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#164\">source</a></span><a href=\"#impl-Default-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#164\">source</a><a href=\"#method.default-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-LowerHex-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-123\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-123\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-LowerHex-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-124\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-124\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-LowerHex-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-125\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-125\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-LowerHex-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-126\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-126\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-LowerHex-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-127\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-127\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-LowerHex-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-935\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-935\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-936\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-936\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-937\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-937\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-938\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-938\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-939\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-939\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-940\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-940\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-941\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-941\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-942\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-942\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-943\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-943\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-944\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-944\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-945\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-945\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-946\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-946\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::os::macos::raw::mode_t"],["<section id=\"impl-ConstParamTy-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","ConstParamTy","std::ffi::c_uint"],["<section id=\"impl-ConstParamTy-for-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","ConstParamTy","std::os::unix::raw::uid_t"],["<section id=\"impl-ConstParamTy-for-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","ConstParamTy","std::os::unix::raw::gid_t"],["<section id=\"impl-ConstParamTy-for-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","ConstParamTy","std::os::linux::raw::mode_t"],["<section id=\"impl-ConstParamTy-for-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","ConstParamTy","std::os::linux::raw::arch::nlink_t"],["<section id=\"impl-ConstParamTy-for-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","ConstParamTy","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-312\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-312\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-313\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-313\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-314\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-314\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-315\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-315\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-316\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-316\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-317\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-317\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-318\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-318\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-319\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-319\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-320\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-320\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-321\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-321\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-322\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-322\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-323\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-323\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-324\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-324\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-325\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-325\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-326\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-326\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-327\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-327\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-328\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-328\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-329\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-329\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-330\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-330\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-331\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-331\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-332\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-332\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-333\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-333\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-334\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-334\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-335\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-335\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-336\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-336\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-337\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-337\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-338\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-338\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-339\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-339\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-340\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-340\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-341\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-341\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-342\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-342\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-343\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-343\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-344\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-344\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-345\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-345\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-346\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-346\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-347\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-347\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-348\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-348\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-349\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-349\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-350\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-350\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-351\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-351\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-352\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-352\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-353\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-353\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-354\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-354\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-355\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-355\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-356\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-356\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-357\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-357\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-358\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-358\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-359\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-359\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-360\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-360\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-361\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-361\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-362\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-362\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-363\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-363\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-364\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-364\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-365\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-365\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-366\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-366\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-367\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-367\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-368\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-368\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-369\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-369\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-370\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-370\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-371\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-371\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-372\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-372\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-373\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-373\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-374\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-374\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-375\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-375\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-376\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-376\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-377\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-377\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-378\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-378\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-379\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-379\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-380\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-380\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-381\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-381\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-382\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-382\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-383\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-383\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-384\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-384\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-385\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-385\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-386\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-386\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-387\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-387\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-388\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-388\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-389\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-389\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-390\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-390\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-391\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-391\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-392\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-392\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-393\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-393\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-394\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-394\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-395\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-395\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-396\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-396\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-397\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-397\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-398\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-398\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-399\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-399\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-400\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-400\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-401\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-401\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-402\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-402\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-403\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-403\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-404\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-404\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-405\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-405\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-406\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-406\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-407\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-407\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-408\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-408\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-409\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-409\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-410\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-410\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-411\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-411\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-412\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-412\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-413\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-413\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-414\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-414\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-415\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-415\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-416\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-416\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-417\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-417\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-418\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-418\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-419\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-419\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-420\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-420\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-421\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-421\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-422\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-422\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-423\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-423\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-424\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-424\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-425\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-425\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-426\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-426\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-427\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-427\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-428\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-428\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-429\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-429\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-430\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-430\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-431\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-431\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-432\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-432\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-433\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-433\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-434\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-434\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-435\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-435\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-436\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-436\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-437\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-437\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-438\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-438\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-439\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-439\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-440\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-440\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-441\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-441\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-442\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-442\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-443\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-443\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-444\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-444\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-445\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-445\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-446\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-446\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-447\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-447\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-448\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-448\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-449\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-449\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-450\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-450\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-451\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-451\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-452\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-452\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-453\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-453\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-454\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-454\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-455\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-455\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-947\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-947\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-948\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-948\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-949\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-949\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-950\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-950\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-951\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-951\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-952\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-952\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-953\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-953\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-954\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-954\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-955\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-955\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-956\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-956\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-957\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-957\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-958\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-958\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-312\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-312\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-313\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-313\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-314\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-314\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-315\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-315\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-316\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-316\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-317\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-317\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-318\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-318\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-319\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-319\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-320\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-320\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-321\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-321\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-322\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-322\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-323\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-323\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-324\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-324\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-325\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-325\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-326\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-326\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-327\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-327\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-328\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-328\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-329\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-329\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-330\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-330\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-331\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-331\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-332\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-332\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-333\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-333\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-334\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-334\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-335\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-335\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-336\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-336\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-337\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-337\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-338\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-338\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-339\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-339\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-340\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-340\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-341\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-341\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-342\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-342\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-343\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-343\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-344\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-344\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-345\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-345\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-346\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-346\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-347\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-347\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-348\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-348\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-349\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-349\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-350\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-350\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-351\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-351\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-352\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-352\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-353\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-353\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-354\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-354\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-355\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-355\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-356\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-356\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-357\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-357\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-358\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-358\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-359\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-359\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-360\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-360\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-361\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-361\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-362\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-362\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-363\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-363\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-364\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-364\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-365\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-365\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-366\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-366\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-367\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-367\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-368\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-368\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-369\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-369\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-370\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-370\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-371\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-371\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-372\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-372\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-373\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-373\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-374\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-374\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-375\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-375\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-376\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-376\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-377\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-377\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-378\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-378\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-379\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-379\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-380\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-380\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-381\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-381\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-382\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-382\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-383\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-383\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-384\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-384\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-385\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-385\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-386\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-386\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-387\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-387\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-388\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-388\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-389\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-389\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-390\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-390\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-391\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-391\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-392\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-392\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-393\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-393\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-394\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-394\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-395\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-395\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-396\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-396\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-397\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-397\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-398\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-398\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-399\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-399\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-400\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-400\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-401\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-401\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-402\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-402\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-403\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-403\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-404\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-404\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-405\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-405\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-406\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-406\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-407\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-407\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-408\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-408\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-409\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-409\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-410\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-410\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-411\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-411\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-412\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-412\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-413\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-413\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-414\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-414\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-415\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-415\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-416\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-416\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-417\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-417\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-418\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-418\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-419\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-419\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-420\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-420\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-421\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-421\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-422\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-422\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-423\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-423\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-424\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-424\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-425\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-425\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-426\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-426\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-427\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-427\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-428\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-428\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-429\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-429\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-430\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-430\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-431\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-431\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-432\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-432\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-433\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-433\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-434\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-434\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-435\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-435\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-436\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-436\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-437\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-437\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-438\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-438\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-439\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-439\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-440\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-440\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-441\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-441\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-442\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-442\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-443\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-443\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-444\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-444\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-445\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-445\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-446\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-446\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-447\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-447\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-448\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-448\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-449\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-449\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-450\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-450\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-451\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-451\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-452\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-452\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-453\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-453\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-454\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-454\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-455\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-455\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-959\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-959\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-312\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-312\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-960\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-960\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-313\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-313\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-961\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-961\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-314\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-314\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-962\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-962\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-315\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-315\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-963\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-963\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-316\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-316\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-964\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-964\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-317\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-317\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-965\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-965\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-318\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-318\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-966\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-966\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-319\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-319\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-967\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-967\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-320\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-320\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-968\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-968\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-321\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-321\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-969\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-969\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-322\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-322\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-970\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-970\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-323\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-323\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-971\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-971\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-324\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-324\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-972\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-972\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-325\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-325\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-973\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-973\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-326\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-326\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-974\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-974\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-327\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-327\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-975\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-975\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-328\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-328\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-976\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-976\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-329\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-329\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-977\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-977\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-330\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-330\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-978\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-978\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-331\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-331\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-979\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-979\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-332\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-332\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-980\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-980\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-333\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-333\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-981\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-981\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-334\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-334\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-982\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-982\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-335\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-335\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-983\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-983\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-336\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-336\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-984\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-984\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-337\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-337\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-985\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-985\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-338\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-338\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-986\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-986\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-339\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-339\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-987\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-987\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-340\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-340\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-988\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-988\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-341\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-341\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-989\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-989\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-342\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-342\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-990\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-990\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-343\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-343\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-991\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-991\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-344\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-344\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-992\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-992\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-345\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-345\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-993\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-993\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-346\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-346\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-994\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-994\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-347\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-347\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-995\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-995\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-348\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-348\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-996\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-996\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-349\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-349\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-997\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-997\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-350\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-350\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-998\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-998\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-351\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-351\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-999\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-999\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-352\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-352\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1000\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1000\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-353\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-353\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1001\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1001\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-354\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-354\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1002\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1002\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-355\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-355\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1003\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1003\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-356\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-356\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1004\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1004\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-357\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-357\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1005\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1005\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-358\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-358\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1006\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1006\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-359\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-359\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1007\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1007\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-360\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-360\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1008\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1008\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-361\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-361\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1009\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1009\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-362\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-362\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1010\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1010\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-363\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-363\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1011\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1011\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-364\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-364\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1012\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1012\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-365\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-365\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1013\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1013\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-366\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-366\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1014\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1014\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-367\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-367\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1015\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1015\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-368\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-368\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1016\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1016\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-369\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-369\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1017\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1017\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-370\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-370\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1018\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1018\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-371\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-371\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1019\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1019\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-372\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-372\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1020\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1020\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-373\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-373\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1021\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1021\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-374\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-374\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1022\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1022\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-375\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-375\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1023\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1023\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-376\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-376\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1024\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1024\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-377\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-377\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1025\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1025\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-378\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-378\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1026\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1026\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-379\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-379\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1027\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1027\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-380\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-380\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1028\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1028\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-381\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-381\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1029\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1029\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-382\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-382\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1030\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1030\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-383\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-383\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1031\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1031\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-384\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-384\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1032\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1032\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-385\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-385\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1033\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1033\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-386\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-386\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1034\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1034\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-387\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-387\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1035\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1035\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-388\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-388\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1036\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1036\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-389\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-389\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1037\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1037\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-390\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-390\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1038\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1038\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-391\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-391\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1039\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1039\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-392\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-392\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1040\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1040\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-393\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-393\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1041\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1041\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-394\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-394\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1042\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1042\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-395\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-395\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1043\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1043\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-396\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-396\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1044\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1044\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-397\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-397\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1045\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1045\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-398\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-398\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1046\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1046\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-399\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-399\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1047\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1047\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-400\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-400\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1048\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1048\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-401\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-401\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1049\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1049\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-402\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-402\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1050\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1050\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-403\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-403\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1051\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1051\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-404\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-404\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1052\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1052\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-405\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-405\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1053\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1053\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-406\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-406\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1054\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1054\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-407\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-407\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1055\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1055\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-408\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-408\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1056\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1056\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-409\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-409\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1057\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1057\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-410\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-410\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1058\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1058\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-411\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-411\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1059\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1059\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-412\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-412\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1060\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1060\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-413\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-413\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1061\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1061\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-414\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-414\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1062\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1062\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-415\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-415\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1063\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1063\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-416\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-416\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1064\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1064\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-417\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-417\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1065\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1065\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-418\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-418\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1066\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1066\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-419\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-419\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1067\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1067\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-420\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-420\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1068\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1068\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-421\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-421\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1069\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1069\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-422\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-422\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1070\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1070\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-423\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-423\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1071\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1071\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-424\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-424\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1072\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1072\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-425\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-425\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1073\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1073\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-426\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-426\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1074\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1074\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-427\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-427\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1075\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1075\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-428\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-428\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1076\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1076\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-429\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-429\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1077\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1077\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-430\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-430\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1078\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1078\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-431\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-431\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1079\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1079\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-432\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-432\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1080\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1080\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-433\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-433\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1081\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1081\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-434\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-434\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1082\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1082\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-435\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-435\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1083\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1083\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-436\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-436\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1084\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1084\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-437\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-437\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1085\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1085\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-438\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-438\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1086\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1086\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-439\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-439\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1087\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1087\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-440\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-440\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1088\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1088\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-441\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-441\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1089\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1089\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-442\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-442\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1090\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1090\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-443\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-443\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1091\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1091\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-444\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-444\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1092\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1092\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-445\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-445\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1093\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1093\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-446\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-446\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1094\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1094\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-447\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-447\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1095\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1095\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-448\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-448\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1096\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1096\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-449\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-449\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1097\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1097\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-450\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-450\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1098\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1098\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-451\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-451\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1099\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1099\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-452\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-452\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1100\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1100\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-453\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-453\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1101\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1101\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-454\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-454\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1102\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1102\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-455\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-455\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-129\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-129\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-130\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-130\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-131\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-131\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-132\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-132\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-133\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-133\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-134\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-134\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::os::macos::raw::mode_t"],["<section id=\"impl-TrustedStep-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","TrustedStep","std::ffi::c_uint"],["<section id=\"impl-TrustedStep-for-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","TrustedStep","std::os::unix::raw::uid_t"],["<section id=\"impl-TrustedStep-for-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","TrustedStep","std::os::unix::raw::gid_t"],["<section id=\"impl-TrustedStep-for-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","TrustedStep","std::os::linux::raw::mode_t"],["<section id=\"impl-TrustedStep-for-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","TrustedStep","std::os::linux::raw::arch::nlink_t"],["<section id=\"impl-TrustedStep-for-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","TrustedStep","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#885\">source</a><a href=\"#impl-SimdElement-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#885\">source</a><a href=\"#impl-SimdElement-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-16\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#885\">source</a><a href=\"#impl-SimdElement-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-17\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#885\">source</a><a href=\"#impl-SimdElement-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-18\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#885\">source</a><a href=\"#impl-SimdElement-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-19\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#885\">source</a><a href=\"#impl-SimdElement-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-20\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-13\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-13\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, end: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-14\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-14\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, end: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-15\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-15\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, end: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-16\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-16\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, end: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-17\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-17\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, end: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-18\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-18\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, end: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1103\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1103\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1104\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1104\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1105\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1105\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1106\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1106\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1107\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1107\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1108\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1108\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1109\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1109\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1110\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1110\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1111\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1111\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1112\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1112\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1113\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1113\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1114\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1114\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::os::macos::raw::mode_t"],["<section id=\"impl-StructuralEq-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralEq","std::ffi::c_uint"],["<section id=\"impl-StructuralEq-for-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralEq","std::os::unix::raw::uid_t"],["<section id=\"impl-StructuralEq-for-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralEq","std::os::unix::raw::gid_t"],["<section id=\"impl-StructuralEq-for-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralEq","std::os::linux::raw::mode_t"],["<section id=\"impl-StructuralEq-for-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralEq","std::os::linux::raw::arch::nlink_t"],["<section id=\"impl-StructuralEq-for-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralEq","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1115\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1115\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1116\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1116\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1117\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1117\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1118\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1118\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1119\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1119\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1120\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1120\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-287\"><a href=\"#panics-287\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1121\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1121\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-288\"><a href=\"#panics-288\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1122\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1122\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-289\"><a href=\"#panics-289\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1123\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1123\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-290\"><a href=\"#panics-290\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1124\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1124\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-291\"><a href=\"#panics-291\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1125\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1125\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-292\"><a href=\"#panics-292\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1126\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1126\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CNonZeroU32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Rem%3CNonZeroU32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.rem-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1127\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1127\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CNonZeroU32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Rem%3CNonZeroU32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.rem-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1128\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1128\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CNonZeroU32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Rem%3CNonZeroU32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.rem-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1129\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1129\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CNonZeroU32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Rem%3CNonZeroU32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.rem-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1130\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1130\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CNonZeroU32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Rem%3CNonZeroU32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.rem-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1131\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1131\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CNonZeroU32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a></span><a href=\"#impl-Rem%3CNonZeroU32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#314-321\">source</a><a href=\"#method.rem-48\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1132\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1132\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem","std::os::macos::raw::mode_t"],["<section id=\"impl-Eq-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Eq","std::ffi::c_uint"],["<section id=\"impl-Eq-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Eq","std::os::unix::raw::uid_t"],["<section id=\"impl-Eq-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Eq","std::os::unix::raw::gid_t"],["<section id=\"impl-Eq-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Eq","std::os::linux::raw::mode_t"],["<section id=\"impl-Eq-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Eq","std::os::linux::raw::arch::nlink_t"],["<section id=\"impl-Eq-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","Eq","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1133\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1133\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1134\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1134\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1135\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1135\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1136\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1136\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1137\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1137\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1138\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1138\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroU32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroU32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1139\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1139\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroU32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroU32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1140\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1140\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroU32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroU32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1141\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1141\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroU32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroU32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1142\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1142\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroU32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroU32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1143\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1143\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroU32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroU32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1144\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1144\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroU32.html\" title=\"struct std::num::NonZeroU32\">NonZeroU32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1145\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1145\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1146\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1146\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1147\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1147\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1148\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1148\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-48\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-48\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1149\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1149\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-49\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-49\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1150\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1150\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-50\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-50\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1151\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1151\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-51\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-51\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1152\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1152\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-52\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-52\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1153\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1153\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-53\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-53\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1154\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1154\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-54\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-54\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1155\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1155\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-55\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-55\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1156\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1156\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-56\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-24\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-24\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-24\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-25\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-25\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-25\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1157\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1157\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1158\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1158\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1159\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1159\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1160\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1160\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1161\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1161\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1162\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1162\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1163\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1163\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1164\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1164\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1165\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1165\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1166\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1166\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1167\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1167\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1168\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1168\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-24\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-25\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-135\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-135\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-136\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-136\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-137\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-137\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-138\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-138\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-139\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-139\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-140\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-140\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-141\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-141\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-142\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-142\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-143\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-143\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-144\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-144\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-145\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-145\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-146\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-146\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::os::macos::raw::mode_t"],["<section id=\"impl-SimdCast-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#39\">source</a><a href=\"#impl-SimdCast-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","SimdCast","std::ffi::c_uint"],["<section id=\"impl-SimdCast-for-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#39\">source</a><a href=\"#impl-SimdCast-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","SimdCast","std::os::unix::raw::uid_t"],["<section id=\"impl-SimdCast-for-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#39\">source</a><a href=\"#impl-SimdCast-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","SimdCast","std::os::unix::raw::gid_t"],["<section id=\"impl-SimdCast-for-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#39\">source</a><a href=\"#impl-SimdCast-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","SimdCast","std::os::linux::raw::mode_t"],["<section id=\"impl-SimdCast-for-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#39\">source</a><a href=\"#impl-SimdCast-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","SimdCast","std::os::linux::raw::arch::nlink_t"],["<section id=\"impl-SimdCast-for-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#39\">source</a><a href=\"#impl-SimdCast-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","SimdCast","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-147\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-147\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-148\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-148\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-149\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-149\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-150\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-150\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-151\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-151\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-152\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-152\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1169\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1169\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-312\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-312\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1170\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1170\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-313\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-313\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1171\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1171\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-314\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-314\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1172\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1172\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-315\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-315\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1173\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1173\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-316\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-316\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1174\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1174\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-317\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-317\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1175\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1175\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-318\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-318\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1176\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1176\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-319\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-319\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1177\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1177\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-320\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-320\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1178\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1178\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-321\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-321\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1179\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1179\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-322\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-322\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1180\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1180\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-323\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-323\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1181\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1181\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-324\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-324\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1182\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1182\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-325\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-325\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1183\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1183\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-326\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-326\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1184\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1184\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-327\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-327\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1185\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1185\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-328\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-328\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1186\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1186\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-329\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-329\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1187\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1187\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-330\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-330\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1188\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1188\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-331\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-331\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1189\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1189\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-332\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-332\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1190\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1190\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-333\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-333\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1191\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1191\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-334\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-334\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1192\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1192\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-335\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-335\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1193\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1193\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-336\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-336\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1194\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1194\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-337\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-337\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1195\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1195\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-338\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-338\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1196\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1196\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-339\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-339\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1197\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1197\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-340\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-340\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1198\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1198\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-341\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-341\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1199\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1199\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-342\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-342\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1200\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1200\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-343\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-343\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1201\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1201\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-344\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-344\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1202\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1202\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-345\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-345\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1203\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1203\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-346\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-346\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1204\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1204\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-347\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-347\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1205\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1205\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-348\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-348\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1206\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1206\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-349\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-349\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1207\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1207\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-350\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-350\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1208\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1208\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-351\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-351\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1209\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1209\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-352\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-352\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1210\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1210\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-353\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-353\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1211\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1211\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-354\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-354\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1212\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1212\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-355\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-355\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1213\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1213\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-356\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-356\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1214\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1214\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-357\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-357\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1215\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1215\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-358\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-358\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1216\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1216\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-359\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-359\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1217\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1217\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-360\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-360\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1218\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1218\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-361\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-361\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1219\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1219\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-362\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-362\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1220\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1220\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-363\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-363\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1221\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1221\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-364\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-364\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1222\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1222\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-365\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-365\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1223\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1223\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-366\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-366\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1224\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1224\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-367\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-367\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1225\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1225\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-368\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-368\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1226\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1226\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-369\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-369\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1227\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1227\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-370\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-370\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1228\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1228\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-371\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-371\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1229\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1229\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-372\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-372\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1230\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1230\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-373\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-373\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1231\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1231\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-374\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-374\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1232\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1232\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-375\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-375\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1233\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1233\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-376\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-376\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1234\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1234\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-377\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-377\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1235\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1235\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-378\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-378\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1236\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1236\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-379\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-379\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1237\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1237\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-380\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-380\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1238\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1238\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-381\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-381\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1239\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1239\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-382\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-382\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1240\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1240\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-383\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-383\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1241\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1241\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-384\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-384\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1242\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1242\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-385\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-385\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1243\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1243\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-386\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-386\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1244\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1244\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-387\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-387\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1245\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1245\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-388\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-388\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1246\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1246\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-389\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-389\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1247\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1247\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-390\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-390\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1248\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1248\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-391\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-391\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1249\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1249\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-392\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-392\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1250\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1250\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-393\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-393\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1251\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1251\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-394\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-394\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1252\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1252\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-395\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-395\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1253\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1253\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-396\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-396\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1254\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1254\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-397\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-397\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1255\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1255\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-398\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-398\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1256\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1256\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-399\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-399\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1257\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1257\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-400\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-400\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1258\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1258\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-401\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-401\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1259\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1259\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-402\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-402\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1260\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1260\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-403\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-403\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1261\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1261\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-404\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-404\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1262\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1262\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-405\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-405\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1263\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1263\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-406\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-406\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1264\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1264\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-407\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-407\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1265\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1265\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-408\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-408\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1266\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1266\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-409\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-409\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1267\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1267\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-410\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-410\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1268\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1268\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-411\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-411\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1269\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1269\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-412\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-412\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1270\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1270\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-413\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-413\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1271\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1271\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-414\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-414\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1272\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1272\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-415\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-415\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1273\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1273\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-416\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-416\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1274\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1274\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-417\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-417\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1275\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1275\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-418\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-418\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1276\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1276\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-419\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-419\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1277\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1277\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-420\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-420\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1278\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1278\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-421\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-421\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1279\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1279\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-422\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-422\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1280\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1280\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-423\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-423\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1281\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1281\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-424\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-424\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1282\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1282\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-425\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-425\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1283\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1283\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-426\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-426\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1284\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1284\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-427\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-427\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1285\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1285\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-428\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-428\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1286\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1286\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-429\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-429\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1287\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1287\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-430\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-430\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1288\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1288\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-431\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-431\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1289\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1289\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-432\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-432\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1290\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1290\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-433\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-433\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1291\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1291\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-434\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-434\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1292\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1292\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-435\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-435\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1293\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1293\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-436\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-436\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1294\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1294\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-437\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-437\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1295\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1295\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-438\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-438\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1296\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1296\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-439\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-439\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1297\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1297\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-440\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-440\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1298\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1298\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-441\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-441\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1299\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1299\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-442\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-442\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1300\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1300\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-443\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-443\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1301\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1301\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-444\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-444\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1302\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1302\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-445\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-445\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1303\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1303\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-446\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-446\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1304\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1304\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-447\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-447\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1305\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1305\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-448\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-448\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1306\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1306\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-449\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-449\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1307\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1307\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-450\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-450\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1308\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1308\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-451\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-451\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1309\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1309\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-452\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-452\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1310\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1310\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-453\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-453\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1311\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1311\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-454\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-454\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1312\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1312\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-455\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-455\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-153\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-153\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-154\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-154\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-155\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-155\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-156\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-156\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-157\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-157\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-158\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-158\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Octal-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-159\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-159\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Octal-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-160\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-160\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Octal-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-161\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-161\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Octal-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-162\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-162\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Octal-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-163\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-163\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Octal-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-164\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt-164\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-16\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-17\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-18\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-19\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-20\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::os::macos::raw::mode_t"],["<section id=\"impl-StructuralPartialEq-for-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralPartialEq","std::ffi::c_uint"],["<section id=\"impl-StructuralPartialEq-for-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralPartialEq","std::os::unix::raw::uid_t"],["<section id=\"impl-StructuralPartialEq-for-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralPartialEq","std::os::unix::raw::gid_t"],["<section id=\"impl-StructuralPartialEq-for-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralPartialEq","std::os::linux::raw::mode_t"],["<section id=\"impl-StructuralPartialEq-for-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralPartialEq","std::os::linux::raw::arch::nlink_t"],["<section id=\"impl-StructuralPartialEq-for-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section>","StructuralPartialEq","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26u32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26u32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26u32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26u32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26u32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26u32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26u32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26u32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26u32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26u32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26u32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26u32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Cu32%3E-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Cu32%3E-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Cu32%3E-for-u32-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Cu32%3E-for-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Cu32%3E-for-u32-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Cu32%3E-for-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Cu32%3E-for-u32-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Cu32%3E-for-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Cu32%3E-for-u32-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Cu32%3E-for-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Cu32%3E-for-u32-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Cu32%3E-for-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::os::macos::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-u32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1141\">source</a><a href=\"#impl-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-15\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-15\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 0u32</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type.</p>\n<h5 id=\"examples-1609\"><a href=\"#examples-1609\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MIN, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MIN,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-15\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-15\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 4_294_967_295u32</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>32</sup> − 1).</p>\n<h5 id=\"examples-1610\"><a href=\"#examples-1610\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX, <span class=\"number\">4294967295</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX,+4294967295);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-13\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-13\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1611\"><a href=\"#examples-1611\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::BITS, <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::BITS,+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-13\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-293\"><a href=\"#panics-293\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1612\"><a href=\"#examples-1612\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-13\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1613\"><a href=\"#examples-1613\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b01001100u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b01001100u32;%0A%0Aassert_eq!(n.count_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-13\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1614\"><a href=\"#examples-1614\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX.count_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX.count_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-13\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.u32.html#method.ilog2\" title=\"method u32::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1615\"><a href=\"#examples-1615\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = u32::MAX &gt;&gt; <span class=\"number\">2</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+u32::MAX+%3E%3E+2;%0A%0Aassert_eq!(n.leading_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-13\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1616\"><a href=\"#examples-1616\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b0101000u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b0101000u32;%0A%0Aassert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-13\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1617\"><a href=\"#examples-1617\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = !(u32::MAX &gt;&gt; <span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+!(u32::MAX+%3E%3E+2);%0A%0Aassert_eq!(n.leading_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-13\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1618\"><a href=\"#examples-1618\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b1010111u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b1010111u32;%0A%0Aassert_eq!(n.trailing_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-13\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1619\"><a href=\"#examples-1619\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x10000b3u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xb301</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x10000b3u32;%0Alet+m+=+0xb301;%0A%0Aassert_eq!(n.rotate_left(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-13\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1620\"><a href=\"#examples-1620\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xb301u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x10000b3</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xb301u32;%0Alet+m+=+0x10000b3;%0A%0Aassert_eq!(n.rotate_right(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-13\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1621\"><a href=\"#examples-1621\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x78563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x78563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-13\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1622\"><a href=\"#examples-1622\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x1e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0u32</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x1e6a2c48);%0Aassert_eq!(0,+0u32.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-13\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1623\"><a href=\"#examples-1623\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(u32::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-13\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1624\"><a href=\"#examples-1624\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(u32::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-13\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1625\"><a href=\"#examples-1625\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-13\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1626\"><a href=\"#examples-1626\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-13\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1627\"><a href=\"#examples-1627\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(u32::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((u32::MAX+-+2).checked_add(1),+Some(u32::MAX+-+1));%0Aassert_eq!((u32::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-13\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-77\"><a href=\"#safety-77\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; u32::MAX</code> or <code>self + rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_add\" title=\"method u32::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_signed-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_signed-1\" class=\"fn\">checked_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with a signed integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1628\"><a href=\"#examples-1628\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(-<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add_signed(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_add_signed(2),+Some(3));%0Aassert_eq!(1u32.checked_add_signed(-2),+None);%0Aassert_eq!((u32::MAX+-+2).checked_add_signed(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-13\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1629\"><a href=\"#examples-1629\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_sub(1),+Some(0));%0Aassert_eq!(0u32.checked_sub(1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-13\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-78\"><a href=\"#safety-78\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; u32::MAX</code> or <code>self - rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_sub\" title=\"method u32::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-13\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1630\"><a href=\"#examples-1630\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_mul(1),+Some(5));%0Aassert_eq!(u32::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-13\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-79\"><a href=\"#safety-79\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; u32::MAX</code> or <code>self * rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_mul\" title=\"method u32::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-13\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1631\"><a href=\"#examples-1631\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div(2),+Some(64));%0Aassert_eq!(1u32.checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-13\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1632\"><a href=\"#examples-1632\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div_euclid(2),+Some(64));%0Aassert_eq!(1u32.checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-13\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1633\"><a href=\"#examples-1633\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem(2),+Some(1));%0Aassert_eq!(5u32.checked_rem(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-13\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1634\"><a href=\"#examples-1634\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5u32.checked_rem_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-13\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-294\"><a href=\"#panics-294\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero, or if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1635\"><a href=\"#examples-1635\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-13\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-295\"><a href=\"#panics-295\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"examples-1636\"><a href=\"#examples-1636\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-13\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-296\"><a href=\"#panics-296\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"example-27\"><a href=\"#example-27\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-13\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1637\"><a href=\"#examples-1637\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-13\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1638\"><a href=\"#examples-1638\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-13\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1639\"><a href=\"#examples-1639\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-13\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.</p>\n<p>Note that negating any positive integer will overflow.</p>\n<h5 id=\"examples-1640\"><a href=\"#examples-1640\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.checked_neg(),+Some(0));%0Aassert_eq!(1u32.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-13\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1641\"><a href=\"#examples-1641\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x10u32.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-13\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-80\"><a href=\"#safety-80\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shl\" title=\"method u32::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-13\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1642\"><a href=\"#examples-1642\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10u32.checked_shr(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-13\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-81\"><a href=\"#safety-81\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shr\" title=\"method u32::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-13\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1643\"><a href=\"#examples-1643\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_pow(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">32</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_pow(5),+Some(32));%0Aassert_eq!(u32::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-13\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1644\"><a href=\"#examples-1644\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_add(<span class=\"number\">127</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_add(1),+101);%0Aassert_eq!(u32::MAX.saturating_add(127),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_signed-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_signed-1\" class=\"fn\">saturating_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with a signed integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1645\"><a href=\"#examples-1645\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(-<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).saturating_add_signed(<span class=\"number\">4</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.saturating_add_signed(2),+3);%0Aassert_eq!(1u32.saturating_add_signed(-2),+0);%0Aassert_eq!((u32::MAX+-+2).saturating_add_signed(4),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-13\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating\nat the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1646\"><a href=\"#examples-1646\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_sub(<span class=\"number\">27</span>), <span class=\"number\">73</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13u32</span>.saturating_sub(<span class=\"number\">127</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_sub(27),+73);%0Aassert_eq!(13u32.saturating_sub(127),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-13\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1647\"><a href=\"#examples-1647\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.saturating_mul(<span class=\"number\">10</span>), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX).saturating_mul(<span class=\"number\">10</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.saturating_mul(10),+20);%0Aassert_eq!((u32::MAX).saturating_mul(10),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-13\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1648\"><a href=\"#examples-1648\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.saturating_div(2),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1u32</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1u32.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-13\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1649\"><a href=\"#examples-1649\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4u32</span>.saturating_pow(<span class=\"number\">3</span>), <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_pow(<span class=\"number\">2</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(4u32.saturating_pow(3),+64);%0Aassert_eq!(u32::MAX.saturating_pow(2),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-13\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1650\"><a href=\"#examples-1650\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(<span class=\"number\">55</span>), <span class=\"number\">255</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(u32::MAX), <span class=\"number\">199</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(200u32.wrapping_add(55),+255);%0Aassert_eq!(200u32.wrapping_add(u32::MAX),+199);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_signed-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_signed-1\" class=\"fn\">wrapping_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with a signed integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1651\"><a href=\"#examples-1651\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(-<span class=\"number\">2</span>), u32::MAX);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).wrapping_add_signed(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_add_signed(2),+3);%0Aassert_eq!(1u32.wrapping_add_signed(-2),+u32::MAX);%0Aassert_eq!((u32::MAX+-+2).wrapping_add_signed(4),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-13\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1652\"><a href=\"#examples-1652\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(<span class=\"number\">100</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(u32::MAX), <span class=\"number\">101</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_sub(100),+0);%0Aassert_eq!(100u32.wrapping_sub(u32::MAX),+101);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-13\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1653\"><a href=\"#examples-1653\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u8</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">25u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">44</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u8.wrapping_mul(12),+120);%0Aassert_eq!(25u8.wrapping_mul(12),+44);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-13\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-297\"><a href=\"#panics-297\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1654\"><a href=\"#examples-1654\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-13\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_div(rhs)</code>.</p>\n<h5 id=\"panics-298\"><a href=\"#panics-298\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1655\"><a href=\"#examples-1655\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div_euclid(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-13\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-299\"><a href=\"#panics-299\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1656\"><a href=\"#examples-1656\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-13\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_rem(rhs)</code>.</p>\n<h5 id=\"panics-300\"><a href=\"#panics-300\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1657\"><a href=\"#examples-1657\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem_euclid(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-13\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type.</p>\n<p>Since unsigned types do not have negative equivalents\nall applications of this function will wrap (except for <code>-0</code>).\nFor values smaller than the corresponding signed type’s maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to <code>MAX + 1 - (val - MAX - 1)</code> where\n<code>MAX</code> is the corresponding signed type’s maximum.</p>\n<h5 id=\"examples-1658\"><a href=\"#examples-1658\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_u32</span>.wrapping_neg(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_neg(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13_u32</span>.wrapping_neg(), (!<span class=\"number\">13</span>) + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42_u32</span>.wrapping_neg(), !(<span class=\"number\">42 </span>- <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0_u32.wrapping_neg(),+0);%0Aassert_eq!(u32::MAX.wrapping_neg(),+1);%0Aassert_eq!(13_u32.wrapping_neg(),+(!13)+%2B+1);%0Aassert_eq!(42_u32.wrapping_neg(),+!(42+-+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-13\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_left\" title=\"method u32::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1659\"><a href=\"#examples-1659\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">7</span>), <span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">128</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_shl(7),+128);%0Aassert_eq!(1u32.wrapping_shl(128),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-13\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_right\" title=\"method u32::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1660\"><a href=\"#examples-1660\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">7</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">128</span>), <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.wrapping_shr(7),+1);%0Aassert_eq!(128u32.wrapping_shr(128),+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-13\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1661\"><a href=\"#examples-1661\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_pow(<span class=\"number\">5</span>), <span class=\"number\">243</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.wrapping_pow(<span class=\"number\">6</span>), <span class=\"number\">217</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.wrapping_pow(5),+243);%0Aassert_eq!(3u8.wrapping_pow(6),+217);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-13\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1662\"><a href=\"#examples-1662\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.overflowing_add(<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_add(2),+(7,+false));%0Aassert_eq!(u32::MAX.overflowing_add(1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-13\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple containing\nthe sum and the output carry.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns an output integer and a carry-out bit. This allows\nchaining together multiple additions to create a wider addition, and\ncan be useful for bignum addition.</p>\n<p>This can be thought of as a 32-bit “full adder”, in the electronics sense.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.u32.html#method.overflowing_add\" title=\"method u32::overflowing_add\"><code>overflowing_add</code></a>, and the output carry is\nequal to the overflow flag. Note that although carry and overflow\nflags are similar for unsigned integers, they are different for\nsigned integers.</p>\n<h5 id=\"examples-1663\"><a href=\"#examples-1663\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    3  MAX    (a = 3 × 2^32 + 2^32 - 1)\n// +  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    9    6    (sum = 9 × 2^32 + 6)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">3</span>, u32::MAX);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(sum1, carry2) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(carry2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">9</span>, <span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++3++MAX++++(a+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A//+%2B++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++9++++6++++(sum+=+9+%C3%97+2%5E32+%2B+6)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(3,+u32::MAX);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+carry0+=+false;%0A%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0Alet+(sum1,+carry2)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(carry2,+false);%0A%0Aassert_eq!((sum1,+sum0),+(9,+6));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_signed-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_signed-1\" class=\"fn\">overflowing_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1664\"><a href=\"#examples-1664\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(-<span class=\"number\">2</span>), (u32::MAX, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).overflowing_add_signed(<span class=\"number\">4</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.overflowing_add_signed(2),+(3,+false));%0Aassert_eq!(1u32.overflowing_add_signed(-2),+(u32::MAX,+true));%0Aassert_eq!((u32::MAX+-+2).overflowing_add_signed(4),+(1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-13\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1665\"><a href=\"#examples-1665\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_sub(<span class=\"number\">1</span>), (u32::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_sub(2),+(3,+false));%0Aassert_eq!(0u32.overflowing_sub(1),+(u32::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-13\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple\ncontaining the difference and the output borrow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns an output\ninteger and a borrow-out bit. This allows chaining together multiple\nsubtractions to create a wider subtraction, and can be useful for\nbignum subtraction.</p>\n<h5 id=\"examples-1666\"><a href=\"#examples-1666\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    9    6    (a = 9 × 2^32 + 6)\n// -  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    3  MAX    (diff = 3 × 2^32 + 2^32 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">9</span>, <span class=\"number\">6</span>);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(borrow2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">3</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++9++++6++++(a+=+9+%C3%97+2%5E32+%2B+6)%0A//+-++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++3++MAX++++(diff+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(9,+6);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+borrow0+=+false;%0A%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0Alet+(diff1,+borrow2)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(borrow2,+false);%0A%0Aassert_eq!((diff1,+diff0),+(3,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-13\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-1667\"><a href=\"#examples-1667\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.abs_diff(80),+20u32);%0Aassert_eq!(100u32.abs_diff(110),+10u32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-13\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1668\"><a href=\"#examples-1668\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000u32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-13\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.</p>\n<h5 id=\"panics-301\"><a href=\"#panics-301\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1669\"><a href=\"#examples-1669\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-13\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.overflowing_div(rhs)</code>.</p>\n<h5 id=\"panics-302\"><a href=\"#panics-302\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1670\"><a href=\"#examples-1670\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div_euclid(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-13\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.</p>\n<h5 id=\"panics-303\"><a href=\"#panics-303\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1671\"><a href=\"#examples-1671\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-13\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by Euclidean division.</p>\n<p>Returns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to <code>self.overflowing_rem(rhs)</code>.</p>\n<h5 id=\"panics-304\"><a href=\"#panics-304\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1672\"><a href=\"#examples-1672\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem_euclid(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-13\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self in an overflowing fashion.</p>\n<p>Returns <code>!self + 1</code> using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.</p>\n<h5 id=\"examples-1673\"><a href=\"#examples-1673\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_neg(), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.overflowing_neg(), (-<span class=\"number\">2i32 </span><span class=\"kw\">as </span>u32, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.overflowing_neg(),+(0,+false));%0Aassert_eq!(2u32.overflowing_neg(),+(-2i32+as+u32,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-13\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-1674\"><a href=\"#examples-1674\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">132</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1u32.overflowing_shl(132),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-13\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-1675\"><a href=\"#examples-1675\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">132</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10u32.overflowing_shr(132),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-13\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1676\"><a href=\"#examples-1676\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.overflowing_pow(<span class=\"number\">5</span>), (<span class=\"number\">243</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.overflowing_pow(<span class=\"number\">6</span>), (<span class=\"number\">217</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.overflowing_pow(5),+(243,+false));%0Aassert_eq!(3u8.overflowing_pow(6),+(217,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-13\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1677\"><a href=\"#examples-1677\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-13\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-1678\"><a href=\"#examples-1678\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-15\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Performs Euclidean division.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self / rhs</code>.</p>\n<h5 id=\"panics-305\"><a href=\"#panics-305\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1679\"><a href=\"#examples-1679\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.div_euclid(<span class=\"number\">4</span>), <span class=\"number\">1</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.div_euclid(4),+1);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-15\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least remainder of <code>self (mod rhs)</code>.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self % rhs</code>.</p>\n<h5 id=\"panics-306\"><a href=\"#panics-306\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1680\"><a href=\"#examples-1680\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.rem_euclid(<span class=\"number\">4</span>), <span class=\"number\">3</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.rem_euclid(4),+3);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-13\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-13\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<p>This is the same as performing <code>self / rhs</code> for all unsigned integers.</p>\n<h5 id=\"panics-307\"><a href=\"#panics-307\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-1681\"><a href=\"#examples-1681\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_floor(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_floor(4),+1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-13\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-308\"><a href=\"#panics-308\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-50\"><a href=\"#overflow-behavior-50\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1682\"><a href=\"#examples-1682\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_ceil(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_ceil(4),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-13\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>.</p>\n<h5 id=\"panics-309\"><a href=\"#panics-309\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-51\"><a href=\"#overflow-behavior-51\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1683\"><a href=\"#examples-1683\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.next_multiple_of(8),+16);%0Aassert_eq!(23_u32.next_multiple_of(8),+24);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-13\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the\noperation would result in overflow.</p>\n<h5 id=\"examples-1684\"><a href=\"#examples-1684\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_u32</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_u32.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(1_u32.checked_next_multiple_of(0),+None);%0Aassert_eq!(u32::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-1\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.</p>\n<h5 id=\"examples-1685\"><a href=\"#examples-1685\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">16u32</span>.is_power_of_two());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10u32</span>.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(16u32.is_power_of_two());%0Aassert!(!10u32.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_two-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_power_of_two-1\" class=\"fn\">next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.</p>\n<p>When return value overflows (i.e., <code>self &gt; (1 &lt;&lt; (N-1))</code> for type\n<code>uN</code>), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).</p>\n<h5 id=\"examples-1686\"><a href=\"#examples-1686\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.next_power_of_two(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.next_power_of_two(),+2);%0Aassert_eq!(3u32.next_power_of_two(),+4);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-1\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\n<code>None</code> is returned, otherwise the power of two is wrapped in <code>Some</code>.</p>\n<h5 id=\"examples-1687\"><a href=\"#examples-1687\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_power_of_two(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_next_power_of_two(),+Some(2));%0Aassert_eq!(3u32.checked_next_power_of_two(),+Some(4));%0Aassert_eq!(u32::MAX.checked_next_power_of_two(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_next_power_of_two-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/32463\" title=\"Tracking issue for wrapping_next_power_of_two\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wrapping_next_power_of_two-1\" class=\"fn\">wrapping_next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wrapping_next_power_of_two</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32463\">#32463</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\nthe return value is wrapped to <code>0</code>.</p>\n<h5 id=\"examples-1688\"><a href=\"#examples-1688\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(wrapping_next_power_of_two)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.wrapping_next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_next_power_of_two(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_next_power_of_two(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(wrapping_next_power_of_two)%5D%0A%0Afn+main()+%7B%0Aassert_eq!(2u32.wrapping_next_power_of_two(),+2);%0Aassert_eq!(3u32.wrapping_next_power_of_two(),+4);%0Aassert_eq!(u32::MAX.wrapping_next_power_of_two(),+0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-15\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1689\"><a href=\"#examples-1689\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-15\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1690\"><a href=\"#examples-1690\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-15\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.u32.html#method.to_be_bytes\" title=\"method u32::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.to_le_bytes\" title=\"method u32::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1691\"><a href=\"#examples-1691\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78%5D%0A++++%7D+else+%7B%0A++++++++%5B0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-15\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in big endian.</p>\n<h5 id=\"examples-1692\"><a href=\"#examples-1692\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-15\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in little endian.</p>\n<h5 id=\"examples-1693\"><a href=\"#examples-1693\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_le_bytes([<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_le_bytes(%5B0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-15\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its memory representation\nas a byte array in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.u32.html#method.from_be_bytes\" title=\"associated function u32::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.from_le_bytes\" title=\"associated function u32::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1694\"><a href=\"#examples-1694\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78%5D%0A%7D+else+%7B%0A++++%5B0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-13\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MIN\" title=\"associated constant u32::MIN\"><code>u32::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-13\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MAX\" title=\"associated constant u32::MAX\"><code>u32::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.widening_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.widening_mul-1\" class=\"fn\">widening_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the complete product <code>self * rhs</code> without the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>If you also need to add a carry to the wide result, then you want\n<a href=\"std/primitive.u32.html#method.carrying_mul\" title=\"method u32::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-1695\"><a href=\"#examples-1695\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.widening_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.widening_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.widening_mul(2),+(10,+0));%0Aassert_eq!(1_000_000_000u32.widening_mul(10),+(1410065408,+2));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_mul-1\" class=\"fn\">carrying_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need the <code>carry</code>, then you can use <a href=\"std/primitive.u32.html#method.widening_mul\" title=\"method u32::widening_mul\"><code>Self::widening_mul</code></a> instead.</p>\n<h5 id=\"examples-1696\"><a href=\"#examples-1696\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">10</span>), (<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">0</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">1410065418</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.carrying_mul(u32::MAX, u32::MAX), (<span class=\"number\">0</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.carrying_mul(2,+0),+(10,+0));%0Aassert_eq!(5u32.carrying_mul(2,+10),+(20,+0));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+0),+(1410065408,+2));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+10),+(1410065418,+2));%0Aassert_eq!(u32::MAX.carrying_mul(u32::MAX,+u32::MAX),+(0,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This is the core operation needed for scalar multiplication when\nimplementing it for wider-than-native types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">fn </span>scalar_mul_eq(little_endian_digits: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u16&gt;, multiplicand: u16) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>carry = <span class=\"number\">0</span>;\n    <span class=\"kw\">for </span>d <span class=\"kw\">in </span>little_endian_digits.iter_mut() {\n        (<span class=\"kw-2\">*</span>d, carry) = d.carrying_mul(multiplicand, carry);\n    }\n    <span class=\"kw\">if </span>carry != <span class=\"number\">0 </span>{\n        little_endian_digits.push(carry);\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">30</span>, <span class=\"number\">60</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x87654321_u64 </span>* <span class=\"number\">0xFEED</span>, <span class=\"number\">0x86D3D159E38D</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0x4321</span>, <span class=\"number\">0x8765</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">0xFEED</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">0xE38D</span>, <span class=\"number\">0xD159</span>, <span class=\"number\">0x86D3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Afn+scalar_mul_eq(little_endian_digits:+%26mut+Vec%3Cu16%3E,+multiplicand:+u16)+%7B%0A++++let+mut+carry+=+0;%0A++++for+d+in+little_endian_digits.iter_mut()+%7B%0A++++++++(*d,+carry)+=+d.carrying_mul(multiplicand,+carry);%0A++++%7D%0A++++if+carry+!=+0+%7B%0A++++++++little_endian_digits.push(carry);%0A++++%7D%0A%7D%0A%0Alet+mut+v+=+vec!%5B10,+20%5D;%0Ascalar_mul_eq(%26mut+v,+3);%0Aassert_eq!(v,+%5B30,+60%5D);%0A%0Aassert_eq!(0x87654321_u64+*+0xFEED,+0x86D3D159E38D);%0Alet+mut+v+=+vec!%5B0x4321,+0x8765%5D;%0Ascalar_mul_eq(%26mut+v,+0xFEED);%0Aassert_eq!(v,+%5B0xE38D,+0xD159,+0x86D3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If <code>carry</code> is zero, this is similar to <a href=\"std/primitive.u32.html#method.overflowing_mul\" title=\"method u32::overflowing_mul\"><code>overflowing_mul</code></a>,\nexcept that it gives the value of the overflow instead of just whether one happened:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Alet+r+=+u8::carrying_mul(7,+13,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(7,+13));%0Alet+r+=+u8::carrying_mul(13,+42,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(13,+42));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>The value of the first field in the returned tuple matches what you’d get\nby combining the <a href=\"std/primitive.u32.html#method.wrapping_mul\" title=\"method u32::wrapping_mul\"><code>wrapping_mul</code></a> and\n<a href=\"std/primitive.u32.html#method.wrapping_add\" title=\"method u32::wrapping_add\"><code>wrapping_add</code></a> methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"number\">789_u16</span>.carrying_mul(<span class=\"number\">456</span>, <span class=\"number\">123</span>).<span class=\"number\">0</span>,\n    <span class=\"number\">789_u16</span>.wrapping_mul(<span class=\"number\">456</span>).wrapping_add(<span class=\"number\">123</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(%0A++++789_u16.carrying_mul(456,+123).0,%0A++++789_u16.wrapping_mul(456).wrapping_add(123),%0A);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1162\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-15\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1697\"><a href=\"#examples-1697\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.midpoint(4),+2);%0Aassert_eq!(1u32.midpoint(4),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details>",0,"std::ffi::c_uint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-u32-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1141\">source</a><a href=\"#impl-u32-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-16\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-16\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 0u32</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type.</p>\n<h5 id=\"examples-1698\"><a href=\"#examples-1698\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MIN, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MIN,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-16\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-16\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 4_294_967_295u32</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>32</sup> − 1).</p>\n<h5 id=\"examples-1699\"><a href=\"#examples-1699\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX, <span class=\"number\">4294967295</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX,+4294967295);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-14\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-14\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1700\"><a href=\"#examples-1700\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::BITS, <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::BITS,+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-14\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-310\"><a href=\"#panics-310\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1701\"><a href=\"#examples-1701\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-14\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1702\"><a href=\"#examples-1702\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b01001100u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b01001100u32;%0A%0Aassert_eq!(n.count_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-14\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1703\"><a href=\"#examples-1703\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX.count_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX.count_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-14\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.u32.html#method.ilog2\" title=\"method u32::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1704\"><a href=\"#examples-1704\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = u32::MAX &gt;&gt; <span class=\"number\">2</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+u32::MAX+%3E%3E+2;%0A%0Aassert_eq!(n.leading_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-14\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1705\"><a href=\"#examples-1705\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b0101000u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b0101000u32;%0A%0Aassert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-14\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1706\"><a href=\"#examples-1706\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = !(u32::MAX &gt;&gt; <span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+!(u32::MAX+%3E%3E+2);%0A%0Aassert_eq!(n.leading_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-14\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1707\"><a href=\"#examples-1707\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b1010111u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b1010111u32;%0A%0Aassert_eq!(n.trailing_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-14\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1708\"><a href=\"#examples-1708\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x10000b3u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xb301</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x10000b3u32;%0Alet+m+=+0xb301;%0A%0Aassert_eq!(n.rotate_left(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-14\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1709\"><a href=\"#examples-1709\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xb301u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x10000b3</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xb301u32;%0Alet+m+=+0x10000b3;%0A%0Aassert_eq!(n.rotate_right(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-14\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1710\"><a href=\"#examples-1710\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x78563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x78563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-14\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1711\"><a href=\"#examples-1711\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x1e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0u32</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x1e6a2c48);%0Aassert_eq!(0,+0u32.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-14\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1712\"><a href=\"#examples-1712\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(u32::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-14\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1713\"><a href=\"#examples-1713\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(u32::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-14\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1714\"><a href=\"#examples-1714\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-14\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1715\"><a href=\"#examples-1715\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-14\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1716\"><a href=\"#examples-1716\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(u32::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((u32::MAX+-+2).checked_add(1),+Some(u32::MAX+-+1));%0Aassert_eq!((u32::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-14\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-82\"><a href=\"#safety-82\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; u32::MAX</code> or <code>self + rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_add\" title=\"method u32::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_signed-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_signed-2\" class=\"fn\">checked_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with a signed integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1717\"><a href=\"#examples-1717\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(-<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add_signed(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_add_signed(2),+Some(3));%0Aassert_eq!(1u32.checked_add_signed(-2),+None);%0Aassert_eq!((u32::MAX+-+2).checked_add_signed(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-14\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1718\"><a href=\"#examples-1718\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_sub(1),+Some(0));%0Aassert_eq!(0u32.checked_sub(1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-14\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-83\"><a href=\"#safety-83\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; u32::MAX</code> or <code>self - rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_sub\" title=\"method u32::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-14\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1719\"><a href=\"#examples-1719\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_mul(1),+Some(5));%0Aassert_eq!(u32::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-14\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-84\"><a href=\"#safety-84\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; u32::MAX</code> or <code>self * rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_mul\" title=\"method u32::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-14\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1720\"><a href=\"#examples-1720\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div(2),+Some(64));%0Aassert_eq!(1u32.checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-14\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1721\"><a href=\"#examples-1721\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div_euclid(2),+Some(64));%0Aassert_eq!(1u32.checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-14\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1722\"><a href=\"#examples-1722\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem(2),+Some(1));%0Aassert_eq!(5u32.checked_rem(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-14\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1723\"><a href=\"#examples-1723\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5u32.checked_rem_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-14\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-311\"><a href=\"#panics-311\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero, or if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1724\"><a href=\"#examples-1724\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-14\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-312\"><a href=\"#panics-312\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"examples-1725\"><a href=\"#examples-1725\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-14\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-313\"><a href=\"#panics-313\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"example-28\"><a href=\"#example-28\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-14\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1726\"><a href=\"#examples-1726\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-14\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1727\"><a href=\"#examples-1727\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-14\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1728\"><a href=\"#examples-1728\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-14\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.</p>\n<p>Note that negating any positive integer will overflow.</p>\n<h5 id=\"examples-1729\"><a href=\"#examples-1729\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.checked_neg(),+Some(0));%0Aassert_eq!(1u32.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-14\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1730\"><a href=\"#examples-1730\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x10u32.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-14\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-85\"><a href=\"#safety-85\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shl\" title=\"method u32::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-14\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1731\"><a href=\"#examples-1731\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10u32.checked_shr(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-14\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-86\"><a href=\"#safety-86\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shr\" title=\"method u32::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-14\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1732\"><a href=\"#examples-1732\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_pow(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">32</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_pow(5),+Some(32));%0Aassert_eq!(u32::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-14\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1733\"><a href=\"#examples-1733\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_add(<span class=\"number\">127</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_add(1),+101);%0Aassert_eq!(u32::MAX.saturating_add(127),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_signed-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_signed-2\" class=\"fn\">saturating_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with a signed integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1734\"><a href=\"#examples-1734\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(-<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).saturating_add_signed(<span class=\"number\">4</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.saturating_add_signed(2),+3);%0Aassert_eq!(1u32.saturating_add_signed(-2),+0);%0Aassert_eq!((u32::MAX+-+2).saturating_add_signed(4),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-14\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating\nat the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1735\"><a href=\"#examples-1735\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_sub(<span class=\"number\">27</span>), <span class=\"number\">73</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13u32</span>.saturating_sub(<span class=\"number\">127</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_sub(27),+73);%0Aassert_eq!(13u32.saturating_sub(127),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-14\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1736\"><a href=\"#examples-1736\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.saturating_mul(<span class=\"number\">10</span>), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX).saturating_mul(<span class=\"number\">10</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.saturating_mul(10),+20);%0Aassert_eq!((u32::MAX).saturating_mul(10),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-14\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1737\"><a href=\"#examples-1737\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.saturating_div(2),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1u32</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1u32.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-14\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1738\"><a href=\"#examples-1738\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4u32</span>.saturating_pow(<span class=\"number\">3</span>), <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_pow(<span class=\"number\">2</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(4u32.saturating_pow(3),+64);%0Aassert_eq!(u32::MAX.saturating_pow(2),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-14\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1739\"><a href=\"#examples-1739\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(<span class=\"number\">55</span>), <span class=\"number\">255</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(u32::MAX), <span class=\"number\">199</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(200u32.wrapping_add(55),+255);%0Aassert_eq!(200u32.wrapping_add(u32::MAX),+199);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_signed-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_signed-2\" class=\"fn\">wrapping_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with a signed integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1740\"><a href=\"#examples-1740\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(-<span class=\"number\">2</span>), u32::MAX);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).wrapping_add_signed(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_add_signed(2),+3);%0Aassert_eq!(1u32.wrapping_add_signed(-2),+u32::MAX);%0Aassert_eq!((u32::MAX+-+2).wrapping_add_signed(4),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-14\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1741\"><a href=\"#examples-1741\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(<span class=\"number\">100</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(u32::MAX), <span class=\"number\">101</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_sub(100),+0);%0Aassert_eq!(100u32.wrapping_sub(u32::MAX),+101);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-14\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1742\"><a href=\"#examples-1742\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u8</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">25u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">44</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u8.wrapping_mul(12),+120);%0Aassert_eq!(25u8.wrapping_mul(12),+44);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-14\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-314\"><a href=\"#panics-314\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1743\"><a href=\"#examples-1743\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-14\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_div(rhs)</code>.</p>\n<h5 id=\"panics-315\"><a href=\"#panics-315\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1744\"><a href=\"#examples-1744\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div_euclid(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-14\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-316\"><a href=\"#panics-316\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1745\"><a href=\"#examples-1745\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-14\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_rem(rhs)</code>.</p>\n<h5 id=\"panics-317\"><a href=\"#panics-317\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1746\"><a href=\"#examples-1746\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem_euclid(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-14\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type.</p>\n<p>Since unsigned types do not have negative equivalents\nall applications of this function will wrap (except for <code>-0</code>).\nFor values smaller than the corresponding signed type’s maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to <code>MAX + 1 - (val - MAX - 1)</code> where\n<code>MAX</code> is the corresponding signed type’s maximum.</p>\n<h5 id=\"examples-1747\"><a href=\"#examples-1747\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_u32</span>.wrapping_neg(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_neg(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13_u32</span>.wrapping_neg(), (!<span class=\"number\">13</span>) + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42_u32</span>.wrapping_neg(), !(<span class=\"number\">42 </span>- <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0_u32.wrapping_neg(),+0);%0Aassert_eq!(u32::MAX.wrapping_neg(),+1);%0Aassert_eq!(13_u32.wrapping_neg(),+(!13)+%2B+1);%0Aassert_eq!(42_u32.wrapping_neg(),+!(42+-+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-14\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_left\" title=\"method u32::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1748\"><a href=\"#examples-1748\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">7</span>), <span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">128</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_shl(7),+128);%0Aassert_eq!(1u32.wrapping_shl(128),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-14\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_right\" title=\"method u32::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1749\"><a href=\"#examples-1749\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">7</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">128</span>), <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.wrapping_shr(7),+1);%0Aassert_eq!(128u32.wrapping_shr(128),+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-14\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1750\"><a href=\"#examples-1750\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_pow(<span class=\"number\">5</span>), <span class=\"number\">243</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.wrapping_pow(<span class=\"number\">6</span>), <span class=\"number\">217</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.wrapping_pow(5),+243);%0Aassert_eq!(3u8.wrapping_pow(6),+217);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-14\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1751\"><a href=\"#examples-1751\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.overflowing_add(<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_add(2),+(7,+false));%0Aassert_eq!(u32::MAX.overflowing_add(1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-14\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple containing\nthe sum and the output carry.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns an output integer and a carry-out bit. This allows\nchaining together multiple additions to create a wider addition, and\ncan be useful for bignum addition.</p>\n<p>This can be thought of as a 32-bit “full adder”, in the electronics sense.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.u32.html#method.overflowing_add\" title=\"method u32::overflowing_add\"><code>overflowing_add</code></a>, and the output carry is\nequal to the overflow flag. Note that although carry and overflow\nflags are similar for unsigned integers, they are different for\nsigned integers.</p>\n<h5 id=\"examples-1752\"><a href=\"#examples-1752\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    3  MAX    (a = 3 × 2^32 + 2^32 - 1)\n// +  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    9    6    (sum = 9 × 2^32 + 6)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">3</span>, u32::MAX);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(sum1, carry2) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(carry2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">9</span>, <span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++3++MAX++++(a+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A//+%2B++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++9++++6++++(sum+=+9+%C3%97+2%5E32+%2B+6)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(3,+u32::MAX);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+carry0+=+false;%0A%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0Alet+(sum1,+carry2)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(carry2,+false);%0A%0Aassert_eq!((sum1,+sum0),+(9,+6));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_signed-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_signed-2\" class=\"fn\">overflowing_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1753\"><a href=\"#examples-1753\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(-<span class=\"number\">2</span>), (u32::MAX, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).overflowing_add_signed(<span class=\"number\">4</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.overflowing_add_signed(2),+(3,+false));%0Aassert_eq!(1u32.overflowing_add_signed(-2),+(u32::MAX,+true));%0Aassert_eq!((u32::MAX+-+2).overflowing_add_signed(4),+(1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-14\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1754\"><a href=\"#examples-1754\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_sub(<span class=\"number\">1</span>), (u32::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_sub(2),+(3,+false));%0Aassert_eq!(0u32.overflowing_sub(1),+(u32::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-14\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple\ncontaining the difference and the output borrow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns an output\ninteger and a borrow-out bit. This allows chaining together multiple\nsubtractions to create a wider subtraction, and can be useful for\nbignum subtraction.</p>\n<h5 id=\"examples-1755\"><a href=\"#examples-1755\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    9    6    (a = 9 × 2^32 + 6)\n// -  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    3  MAX    (diff = 3 × 2^32 + 2^32 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">9</span>, <span class=\"number\">6</span>);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(borrow2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">3</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++9++++6++++(a+=+9+%C3%97+2%5E32+%2B+6)%0A//+-++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++3++MAX++++(diff+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(9,+6);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+borrow0+=+false;%0A%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0Alet+(diff1,+borrow2)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(borrow2,+false);%0A%0Aassert_eq!((diff1,+diff0),+(3,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-14\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-1756\"><a href=\"#examples-1756\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.abs_diff(80),+20u32);%0Aassert_eq!(100u32.abs_diff(110),+10u32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-14\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1757\"><a href=\"#examples-1757\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000u32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-14\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.</p>\n<h5 id=\"panics-318\"><a href=\"#panics-318\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1758\"><a href=\"#examples-1758\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-14\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.overflowing_div(rhs)</code>.</p>\n<h5 id=\"panics-319\"><a href=\"#panics-319\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1759\"><a href=\"#examples-1759\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div_euclid(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-14\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.</p>\n<h5 id=\"panics-320\"><a href=\"#panics-320\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1760\"><a href=\"#examples-1760\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-14\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by Euclidean division.</p>\n<p>Returns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to <code>self.overflowing_rem(rhs)</code>.</p>\n<h5 id=\"panics-321\"><a href=\"#panics-321\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1761\"><a href=\"#examples-1761\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem_euclid(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-14\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self in an overflowing fashion.</p>\n<p>Returns <code>!self + 1</code> using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.</p>\n<h5 id=\"examples-1762\"><a href=\"#examples-1762\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_neg(), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.overflowing_neg(), (-<span class=\"number\">2i32 </span><span class=\"kw\">as </span>u32, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.overflowing_neg(),+(0,+false));%0Aassert_eq!(2u32.overflowing_neg(),+(-2i32+as+u32,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-14\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-1763\"><a href=\"#examples-1763\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">132</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1u32.overflowing_shl(132),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-14\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-1764\"><a href=\"#examples-1764\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">132</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10u32.overflowing_shr(132),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-14\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1765\"><a href=\"#examples-1765\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.overflowing_pow(<span class=\"number\">5</span>), (<span class=\"number\">243</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.overflowing_pow(<span class=\"number\">6</span>), (<span class=\"number\">217</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.overflowing_pow(5),+(243,+false));%0Aassert_eq!(3u8.overflowing_pow(6),+(217,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-14\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1766\"><a href=\"#examples-1766\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-14\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-1767\"><a href=\"#examples-1767\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-16\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Performs Euclidean division.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self / rhs</code>.</p>\n<h5 id=\"panics-322\"><a href=\"#panics-322\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1768\"><a href=\"#examples-1768\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.div_euclid(<span class=\"number\">4</span>), <span class=\"number\">1</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.div_euclid(4),+1);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-16\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least remainder of <code>self (mod rhs)</code>.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self % rhs</code>.</p>\n<h5 id=\"panics-323\"><a href=\"#panics-323\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1769\"><a href=\"#examples-1769\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.rem_euclid(<span class=\"number\">4</span>), <span class=\"number\">3</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.rem_euclid(4),+3);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-14\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-14\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<p>This is the same as performing <code>self / rhs</code> for all unsigned integers.</p>\n<h5 id=\"panics-324\"><a href=\"#panics-324\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-1770\"><a href=\"#examples-1770\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_floor(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_floor(4),+1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-14\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-325\"><a href=\"#panics-325\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-52\"><a href=\"#overflow-behavior-52\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1771\"><a href=\"#examples-1771\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_ceil(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_ceil(4),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-14\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>.</p>\n<h5 id=\"panics-326\"><a href=\"#panics-326\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-53\"><a href=\"#overflow-behavior-53\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1772\"><a href=\"#examples-1772\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.next_multiple_of(8),+16);%0Aassert_eq!(23_u32.next_multiple_of(8),+24);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-14\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the\noperation would result in overflow.</p>\n<h5 id=\"examples-1773\"><a href=\"#examples-1773\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_u32</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_u32.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(1_u32.checked_next_multiple_of(0),+None);%0Aassert_eq!(u32::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-2\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.</p>\n<h5 id=\"examples-1774\"><a href=\"#examples-1774\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">16u32</span>.is_power_of_two());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10u32</span>.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(16u32.is_power_of_two());%0Aassert!(!10u32.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_two-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_power_of_two-2\" class=\"fn\">next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.</p>\n<p>When return value overflows (i.e., <code>self &gt; (1 &lt;&lt; (N-1))</code> for type\n<code>uN</code>), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).</p>\n<h5 id=\"examples-1775\"><a href=\"#examples-1775\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.next_power_of_two(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.next_power_of_two(),+2);%0Aassert_eq!(3u32.next_power_of_two(),+4);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-2\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\n<code>None</code> is returned, otherwise the power of two is wrapped in <code>Some</code>.</p>\n<h5 id=\"examples-1776\"><a href=\"#examples-1776\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_power_of_two(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_next_power_of_two(),+Some(2));%0Aassert_eq!(3u32.checked_next_power_of_two(),+Some(4));%0Aassert_eq!(u32::MAX.checked_next_power_of_two(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_next_power_of_two-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/32463\" title=\"Tracking issue for wrapping_next_power_of_two\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wrapping_next_power_of_two-2\" class=\"fn\">wrapping_next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wrapping_next_power_of_two</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32463\">#32463</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\nthe return value is wrapped to <code>0</code>.</p>\n<h5 id=\"examples-1777\"><a href=\"#examples-1777\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(wrapping_next_power_of_two)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.wrapping_next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_next_power_of_two(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_next_power_of_two(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(wrapping_next_power_of_two)%5D%0A%0Afn+main()+%7B%0Aassert_eq!(2u32.wrapping_next_power_of_two(),+2);%0Aassert_eq!(3u32.wrapping_next_power_of_two(),+4);%0Aassert_eq!(u32::MAX.wrapping_next_power_of_two(),+0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-16\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1778\"><a href=\"#examples-1778\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-16\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1779\"><a href=\"#examples-1779\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-16\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.u32.html#method.to_be_bytes\" title=\"method u32::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.to_le_bytes\" title=\"method u32::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1780\"><a href=\"#examples-1780\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78%5D%0A++++%7D+else+%7B%0A++++++++%5B0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-16\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in big endian.</p>\n<h5 id=\"examples-1781\"><a href=\"#examples-1781\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-16\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in little endian.</p>\n<h5 id=\"examples-1782\"><a href=\"#examples-1782\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_le_bytes([<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_le_bytes(%5B0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-16\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its memory representation\nas a byte array in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.u32.html#method.from_be_bytes\" title=\"associated function u32::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.from_le_bytes\" title=\"associated function u32::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1783\"><a href=\"#examples-1783\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78%5D%0A%7D+else+%7B%0A++++%5B0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-14\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MIN\" title=\"associated constant u32::MIN\"><code>u32::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-14\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MAX\" title=\"associated constant u32::MAX\"><code>u32::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.widening_mul-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.widening_mul-2\" class=\"fn\">widening_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the complete product <code>self * rhs</code> without the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>If you also need to add a carry to the wide result, then you want\n<a href=\"std/primitive.u32.html#method.carrying_mul\" title=\"method u32::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-1784\"><a href=\"#examples-1784\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.widening_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.widening_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.widening_mul(2),+(10,+0));%0Aassert_eq!(1_000_000_000u32.widening_mul(10),+(1410065408,+2));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_mul-2\" class=\"fn\">carrying_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need the <code>carry</code>, then you can use <a href=\"std/primitive.u32.html#method.widening_mul\" title=\"method u32::widening_mul\"><code>Self::widening_mul</code></a> instead.</p>\n<h5 id=\"examples-1785\"><a href=\"#examples-1785\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">10</span>), (<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">0</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">1410065418</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.carrying_mul(u32::MAX, u32::MAX), (<span class=\"number\">0</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.carrying_mul(2,+0),+(10,+0));%0Aassert_eq!(5u32.carrying_mul(2,+10),+(20,+0));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+0),+(1410065408,+2));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+10),+(1410065418,+2));%0Aassert_eq!(u32::MAX.carrying_mul(u32::MAX,+u32::MAX),+(0,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This is the core operation needed for scalar multiplication when\nimplementing it for wider-than-native types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">fn </span>scalar_mul_eq(little_endian_digits: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u16&gt;, multiplicand: u16) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>carry = <span class=\"number\">0</span>;\n    <span class=\"kw\">for </span>d <span class=\"kw\">in </span>little_endian_digits.iter_mut() {\n        (<span class=\"kw-2\">*</span>d, carry) = d.carrying_mul(multiplicand, carry);\n    }\n    <span class=\"kw\">if </span>carry != <span class=\"number\">0 </span>{\n        little_endian_digits.push(carry);\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">30</span>, <span class=\"number\">60</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x87654321_u64 </span>* <span class=\"number\">0xFEED</span>, <span class=\"number\">0x86D3D159E38D</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0x4321</span>, <span class=\"number\">0x8765</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">0xFEED</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">0xE38D</span>, <span class=\"number\">0xD159</span>, <span class=\"number\">0x86D3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Afn+scalar_mul_eq(little_endian_digits:+%26mut+Vec%3Cu16%3E,+multiplicand:+u16)+%7B%0A++++let+mut+carry+=+0;%0A++++for+d+in+little_endian_digits.iter_mut()+%7B%0A++++++++(*d,+carry)+=+d.carrying_mul(multiplicand,+carry);%0A++++%7D%0A++++if+carry+!=+0+%7B%0A++++++++little_endian_digits.push(carry);%0A++++%7D%0A%7D%0A%0Alet+mut+v+=+vec!%5B10,+20%5D;%0Ascalar_mul_eq(%26mut+v,+3);%0Aassert_eq!(v,+%5B30,+60%5D);%0A%0Aassert_eq!(0x87654321_u64+*+0xFEED,+0x86D3D159E38D);%0Alet+mut+v+=+vec!%5B0x4321,+0x8765%5D;%0Ascalar_mul_eq(%26mut+v,+0xFEED);%0Aassert_eq!(v,+%5B0xE38D,+0xD159,+0x86D3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If <code>carry</code> is zero, this is similar to <a href=\"std/primitive.u32.html#method.overflowing_mul\" title=\"method u32::overflowing_mul\"><code>overflowing_mul</code></a>,\nexcept that it gives the value of the overflow instead of just whether one happened:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Alet+r+=+u8::carrying_mul(7,+13,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(7,+13));%0Alet+r+=+u8::carrying_mul(13,+42,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(13,+42));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>The value of the first field in the returned tuple matches what you’d get\nby combining the <a href=\"std/primitive.u32.html#method.wrapping_mul\" title=\"method u32::wrapping_mul\"><code>wrapping_mul</code></a> and\n<a href=\"std/primitive.u32.html#method.wrapping_add\" title=\"method u32::wrapping_add\"><code>wrapping_add</code></a> methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"number\">789_u16</span>.carrying_mul(<span class=\"number\">456</span>, <span class=\"number\">123</span>).<span class=\"number\">0</span>,\n    <span class=\"number\">789_u16</span>.wrapping_mul(<span class=\"number\">456</span>).wrapping_add(<span class=\"number\">123</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(%0A++++789_u16.carrying_mul(456,+123).0,%0A++++789_u16.wrapping_mul(456).wrapping_add(123),%0A);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1162\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-16\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1786\"><a href=\"#examples-1786\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.midpoint(4),+2);%0Aassert_eq!(1u32.midpoint(4),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details>",0,"std::os::unix::raw::uid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-u32-2\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1141\">source</a><a href=\"#impl-u32-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-17\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-17\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 0u32</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type.</p>\n<h5 id=\"examples-1787\"><a href=\"#examples-1787\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MIN, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MIN,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-17\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-17\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 4_294_967_295u32</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>32</sup> − 1).</p>\n<h5 id=\"examples-1788\"><a href=\"#examples-1788\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX, <span class=\"number\">4294967295</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX,+4294967295);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-15\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-15\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1789\"><a href=\"#examples-1789\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::BITS, <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::BITS,+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-15\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-327\"><a href=\"#panics-327\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1790\"><a href=\"#examples-1790\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-15\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1791\"><a href=\"#examples-1791\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b01001100u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b01001100u32;%0A%0Aassert_eq!(n.count_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-15\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1792\"><a href=\"#examples-1792\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX.count_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX.count_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-15\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.u32.html#method.ilog2\" title=\"method u32::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1793\"><a href=\"#examples-1793\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = u32::MAX &gt;&gt; <span class=\"number\">2</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+u32::MAX+%3E%3E+2;%0A%0Aassert_eq!(n.leading_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-15\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1794\"><a href=\"#examples-1794\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b0101000u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b0101000u32;%0A%0Aassert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-15\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1795\"><a href=\"#examples-1795\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = !(u32::MAX &gt;&gt; <span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+!(u32::MAX+%3E%3E+2);%0A%0Aassert_eq!(n.leading_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-15\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1796\"><a href=\"#examples-1796\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b1010111u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b1010111u32;%0A%0Aassert_eq!(n.trailing_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-15\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1797\"><a href=\"#examples-1797\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x10000b3u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xb301</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x10000b3u32;%0Alet+m+=+0xb301;%0A%0Aassert_eq!(n.rotate_left(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-15\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1798\"><a href=\"#examples-1798\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xb301u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x10000b3</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xb301u32;%0Alet+m+=+0x10000b3;%0A%0Aassert_eq!(n.rotate_right(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-15\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1799\"><a href=\"#examples-1799\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x78563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x78563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-15\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1800\"><a href=\"#examples-1800\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x1e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0u32</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x1e6a2c48);%0Aassert_eq!(0,+0u32.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-15\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1801\"><a href=\"#examples-1801\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(u32::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-15\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1802\"><a href=\"#examples-1802\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(u32::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-15\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1803\"><a href=\"#examples-1803\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-15\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1804\"><a href=\"#examples-1804\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-15\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1805\"><a href=\"#examples-1805\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(u32::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((u32::MAX+-+2).checked_add(1),+Some(u32::MAX+-+1));%0Aassert_eq!((u32::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-15\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-87\"><a href=\"#safety-87\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; u32::MAX</code> or <code>self + rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_add\" title=\"method u32::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_signed-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_signed-3\" class=\"fn\">checked_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with a signed integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1806\"><a href=\"#examples-1806\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(-<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add_signed(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_add_signed(2),+Some(3));%0Aassert_eq!(1u32.checked_add_signed(-2),+None);%0Aassert_eq!((u32::MAX+-+2).checked_add_signed(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-15\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1807\"><a href=\"#examples-1807\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_sub(1),+Some(0));%0Aassert_eq!(0u32.checked_sub(1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-15\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-88\"><a href=\"#safety-88\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; u32::MAX</code> or <code>self - rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_sub\" title=\"method u32::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-15\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1808\"><a href=\"#examples-1808\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_mul(1),+Some(5));%0Aassert_eq!(u32::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-15\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-89\"><a href=\"#safety-89\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; u32::MAX</code> or <code>self * rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_mul\" title=\"method u32::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-15\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1809\"><a href=\"#examples-1809\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div(2),+Some(64));%0Aassert_eq!(1u32.checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-15\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1810\"><a href=\"#examples-1810\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div_euclid(2),+Some(64));%0Aassert_eq!(1u32.checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-15\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1811\"><a href=\"#examples-1811\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem(2),+Some(1));%0Aassert_eq!(5u32.checked_rem(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-15\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1812\"><a href=\"#examples-1812\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5u32.checked_rem_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-15\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-328\"><a href=\"#panics-328\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero, or if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1813\"><a href=\"#examples-1813\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-15\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-329\"><a href=\"#panics-329\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"examples-1814\"><a href=\"#examples-1814\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-15\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-330\"><a href=\"#panics-330\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"example-29\"><a href=\"#example-29\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-15\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1815\"><a href=\"#examples-1815\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-15\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1816\"><a href=\"#examples-1816\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-15\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1817\"><a href=\"#examples-1817\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-15\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.</p>\n<p>Note that negating any positive integer will overflow.</p>\n<h5 id=\"examples-1818\"><a href=\"#examples-1818\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.checked_neg(),+Some(0));%0Aassert_eq!(1u32.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-15\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1819\"><a href=\"#examples-1819\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x10u32.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-15\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-90\"><a href=\"#safety-90\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shl\" title=\"method u32::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-15\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1820\"><a href=\"#examples-1820\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10u32.checked_shr(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-15\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-91\"><a href=\"#safety-91\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shr\" title=\"method u32::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-15\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1821\"><a href=\"#examples-1821\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_pow(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">32</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_pow(5),+Some(32));%0Aassert_eq!(u32::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-15\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1822\"><a href=\"#examples-1822\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_add(<span class=\"number\">127</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_add(1),+101);%0Aassert_eq!(u32::MAX.saturating_add(127),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_signed-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_signed-3\" class=\"fn\">saturating_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with a signed integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1823\"><a href=\"#examples-1823\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(-<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).saturating_add_signed(<span class=\"number\">4</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.saturating_add_signed(2),+3);%0Aassert_eq!(1u32.saturating_add_signed(-2),+0);%0Aassert_eq!((u32::MAX+-+2).saturating_add_signed(4),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-15\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating\nat the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1824\"><a href=\"#examples-1824\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_sub(<span class=\"number\">27</span>), <span class=\"number\">73</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13u32</span>.saturating_sub(<span class=\"number\">127</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_sub(27),+73);%0Aassert_eq!(13u32.saturating_sub(127),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-15\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1825\"><a href=\"#examples-1825\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.saturating_mul(<span class=\"number\">10</span>), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX).saturating_mul(<span class=\"number\">10</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.saturating_mul(10),+20);%0Aassert_eq!((u32::MAX).saturating_mul(10),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-15\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1826\"><a href=\"#examples-1826\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.saturating_div(2),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1u32</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1u32.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-15\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1827\"><a href=\"#examples-1827\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4u32</span>.saturating_pow(<span class=\"number\">3</span>), <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_pow(<span class=\"number\">2</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(4u32.saturating_pow(3),+64);%0Aassert_eq!(u32::MAX.saturating_pow(2),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-15\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1828\"><a href=\"#examples-1828\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(<span class=\"number\">55</span>), <span class=\"number\">255</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(u32::MAX), <span class=\"number\">199</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(200u32.wrapping_add(55),+255);%0Aassert_eq!(200u32.wrapping_add(u32::MAX),+199);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_signed-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_signed-3\" class=\"fn\">wrapping_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with a signed integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1829\"><a href=\"#examples-1829\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(-<span class=\"number\">2</span>), u32::MAX);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).wrapping_add_signed(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_add_signed(2),+3);%0Aassert_eq!(1u32.wrapping_add_signed(-2),+u32::MAX);%0Aassert_eq!((u32::MAX+-+2).wrapping_add_signed(4),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-15\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1830\"><a href=\"#examples-1830\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(<span class=\"number\">100</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(u32::MAX), <span class=\"number\">101</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_sub(100),+0);%0Aassert_eq!(100u32.wrapping_sub(u32::MAX),+101);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-15\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1831\"><a href=\"#examples-1831\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u8</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">25u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">44</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u8.wrapping_mul(12),+120);%0Aassert_eq!(25u8.wrapping_mul(12),+44);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-15\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-331\"><a href=\"#panics-331\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1832\"><a href=\"#examples-1832\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-15\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_div(rhs)</code>.</p>\n<h5 id=\"panics-332\"><a href=\"#panics-332\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1833\"><a href=\"#examples-1833\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div_euclid(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-15\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-333\"><a href=\"#panics-333\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1834\"><a href=\"#examples-1834\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-15\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_rem(rhs)</code>.</p>\n<h5 id=\"panics-334\"><a href=\"#panics-334\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1835\"><a href=\"#examples-1835\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem_euclid(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-15\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type.</p>\n<p>Since unsigned types do not have negative equivalents\nall applications of this function will wrap (except for <code>-0</code>).\nFor values smaller than the corresponding signed type’s maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to <code>MAX + 1 - (val - MAX - 1)</code> where\n<code>MAX</code> is the corresponding signed type’s maximum.</p>\n<h5 id=\"examples-1836\"><a href=\"#examples-1836\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_u32</span>.wrapping_neg(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_neg(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13_u32</span>.wrapping_neg(), (!<span class=\"number\">13</span>) + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42_u32</span>.wrapping_neg(), !(<span class=\"number\">42 </span>- <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0_u32.wrapping_neg(),+0);%0Aassert_eq!(u32::MAX.wrapping_neg(),+1);%0Aassert_eq!(13_u32.wrapping_neg(),+(!13)+%2B+1);%0Aassert_eq!(42_u32.wrapping_neg(),+!(42+-+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-15\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_left\" title=\"method u32::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1837\"><a href=\"#examples-1837\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">7</span>), <span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">128</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_shl(7),+128);%0Aassert_eq!(1u32.wrapping_shl(128),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-15\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_right\" title=\"method u32::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1838\"><a href=\"#examples-1838\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">7</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">128</span>), <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.wrapping_shr(7),+1);%0Aassert_eq!(128u32.wrapping_shr(128),+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-15\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1839\"><a href=\"#examples-1839\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_pow(<span class=\"number\">5</span>), <span class=\"number\">243</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.wrapping_pow(<span class=\"number\">6</span>), <span class=\"number\">217</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.wrapping_pow(5),+243);%0Aassert_eq!(3u8.wrapping_pow(6),+217);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-15\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1840\"><a href=\"#examples-1840\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.overflowing_add(<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_add(2),+(7,+false));%0Aassert_eq!(u32::MAX.overflowing_add(1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-15\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple containing\nthe sum and the output carry.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns an output integer and a carry-out bit. This allows\nchaining together multiple additions to create a wider addition, and\ncan be useful for bignum addition.</p>\n<p>This can be thought of as a 32-bit “full adder”, in the electronics sense.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.u32.html#method.overflowing_add\" title=\"method u32::overflowing_add\"><code>overflowing_add</code></a>, and the output carry is\nequal to the overflow flag. Note that although carry and overflow\nflags are similar for unsigned integers, they are different for\nsigned integers.</p>\n<h5 id=\"examples-1841\"><a href=\"#examples-1841\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    3  MAX    (a = 3 × 2^32 + 2^32 - 1)\n// +  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    9    6    (sum = 9 × 2^32 + 6)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">3</span>, u32::MAX);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(sum1, carry2) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(carry2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">9</span>, <span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++3++MAX++++(a+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A//+%2B++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++9++++6++++(sum+=+9+%C3%97+2%5E32+%2B+6)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(3,+u32::MAX);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+carry0+=+false;%0A%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0Alet+(sum1,+carry2)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(carry2,+false);%0A%0Aassert_eq!((sum1,+sum0),+(9,+6));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_signed-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_signed-3\" class=\"fn\">overflowing_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1842\"><a href=\"#examples-1842\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(-<span class=\"number\">2</span>), (u32::MAX, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).overflowing_add_signed(<span class=\"number\">4</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.overflowing_add_signed(2),+(3,+false));%0Aassert_eq!(1u32.overflowing_add_signed(-2),+(u32::MAX,+true));%0Aassert_eq!((u32::MAX+-+2).overflowing_add_signed(4),+(1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-15\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1843\"><a href=\"#examples-1843\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_sub(<span class=\"number\">1</span>), (u32::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_sub(2),+(3,+false));%0Aassert_eq!(0u32.overflowing_sub(1),+(u32::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-15\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple\ncontaining the difference and the output borrow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns an output\ninteger and a borrow-out bit. This allows chaining together multiple\nsubtractions to create a wider subtraction, and can be useful for\nbignum subtraction.</p>\n<h5 id=\"examples-1844\"><a href=\"#examples-1844\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    9    6    (a = 9 × 2^32 + 6)\n// -  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    3  MAX    (diff = 3 × 2^32 + 2^32 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">9</span>, <span class=\"number\">6</span>);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(borrow2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">3</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++9++++6++++(a+=+9+%C3%97+2%5E32+%2B+6)%0A//+-++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++3++MAX++++(diff+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(9,+6);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+borrow0+=+false;%0A%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0Alet+(diff1,+borrow2)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(borrow2,+false);%0A%0Aassert_eq!((diff1,+diff0),+(3,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-15\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-1845\"><a href=\"#examples-1845\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.abs_diff(80),+20u32);%0Aassert_eq!(100u32.abs_diff(110),+10u32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-15\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1846\"><a href=\"#examples-1846\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000u32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-15\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.</p>\n<h5 id=\"panics-335\"><a href=\"#panics-335\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1847\"><a href=\"#examples-1847\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-15\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.overflowing_div(rhs)</code>.</p>\n<h5 id=\"panics-336\"><a href=\"#panics-336\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1848\"><a href=\"#examples-1848\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div_euclid(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-15\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.</p>\n<h5 id=\"panics-337\"><a href=\"#panics-337\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1849\"><a href=\"#examples-1849\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-15\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by Euclidean division.</p>\n<p>Returns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to <code>self.overflowing_rem(rhs)</code>.</p>\n<h5 id=\"panics-338\"><a href=\"#panics-338\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1850\"><a href=\"#examples-1850\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem_euclid(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-15\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self in an overflowing fashion.</p>\n<p>Returns <code>!self + 1</code> using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.</p>\n<h5 id=\"examples-1851\"><a href=\"#examples-1851\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_neg(), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.overflowing_neg(), (-<span class=\"number\">2i32 </span><span class=\"kw\">as </span>u32, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.overflowing_neg(),+(0,+false));%0Aassert_eq!(2u32.overflowing_neg(),+(-2i32+as+u32,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-15\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-1852\"><a href=\"#examples-1852\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">132</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1u32.overflowing_shl(132),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-15\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-1853\"><a href=\"#examples-1853\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">132</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10u32.overflowing_shr(132),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-15\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1854\"><a href=\"#examples-1854\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.overflowing_pow(<span class=\"number\">5</span>), (<span class=\"number\">243</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.overflowing_pow(<span class=\"number\">6</span>), (<span class=\"number\">217</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.overflowing_pow(5),+(243,+false));%0Aassert_eq!(3u8.overflowing_pow(6),+(217,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-15\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1855\"><a href=\"#examples-1855\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-15\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-1856\"><a href=\"#examples-1856\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-17\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Performs Euclidean division.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self / rhs</code>.</p>\n<h5 id=\"panics-339\"><a href=\"#panics-339\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1857\"><a href=\"#examples-1857\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.div_euclid(<span class=\"number\">4</span>), <span class=\"number\">1</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.div_euclid(4),+1);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-17\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least remainder of <code>self (mod rhs)</code>.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self % rhs</code>.</p>\n<h5 id=\"panics-340\"><a href=\"#panics-340\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1858\"><a href=\"#examples-1858\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.rem_euclid(<span class=\"number\">4</span>), <span class=\"number\">3</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.rem_euclid(4),+3);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-15\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-15\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<p>This is the same as performing <code>self / rhs</code> for all unsigned integers.</p>\n<h5 id=\"panics-341\"><a href=\"#panics-341\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-1859\"><a href=\"#examples-1859\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_floor(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_floor(4),+1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-15\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-342\"><a href=\"#panics-342\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-54\"><a href=\"#overflow-behavior-54\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1860\"><a href=\"#examples-1860\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_ceil(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_ceil(4),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-15\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>.</p>\n<h5 id=\"panics-343\"><a href=\"#panics-343\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-55\"><a href=\"#overflow-behavior-55\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1861\"><a href=\"#examples-1861\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.next_multiple_of(8),+16);%0Aassert_eq!(23_u32.next_multiple_of(8),+24);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-15\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the\noperation would result in overflow.</p>\n<h5 id=\"examples-1862\"><a href=\"#examples-1862\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_u32</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_u32.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(1_u32.checked_next_multiple_of(0),+None);%0Aassert_eq!(u32::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-3\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.</p>\n<h5 id=\"examples-1863\"><a href=\"#examples-1863\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">16u32</span>.is_power_of_two());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10u32</span>.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(16u32.is_power_of_two());%0Aassert!(!10u32.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_two-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_power_of_two-3\" class=\"fn\">next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.</p>\n<p>When return value overflows (i.e., <code>self &gt; (1 &lt;&lt; (N-1))</code> for type\n<code>uN</code>), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).</p>\n<h5 id=\"examples-1864\"><a href=\"#examples-1864\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.next_power_of_two(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.next_power_of_two(),+2);%0Aassert_eq!(3u32.next_power_of_two(),+4);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-3\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\n<code>None</code> is returned, otherwise the power of two is wrapped in <code>Some</code>.</p>\n<h5 id=\"examples-1865\"><a href=\"#examples-1865\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_power_of_two(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_next_power_of_two(),+Some(2));%0Aassert_eq!(3u32.checked_next_power_of_two(),+Some(4));%0Aassert_eq!(u32::MAX.checked_next_power_of_two(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_next_power_of_two-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/32463\" title=\"Tracking issue for wrapping_next_power_of_two\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wrapping_next_power_of_two-3\" class=\"fn\">wrapping_next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wrapping_next_power_of_two</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32463\">#32463</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\nthe return value is wrapped to <code>0</code>.</p>\n<h5 id=\"examples-1866\"><a href=\"#examples-1866\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(wrapping_next_power_of_two)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.wrapping_next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_next_power_of_two(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_next_power_of_two(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(wrapping_next_power_of_two)%5D%0A%0Afn+main()+%7B%0Aassert_eq!(2u32.wrapping_next_power_of_two(),+2);%0Aassert_eq!(3u32.wrapping_next_power_of_two(),+4);%0Aassert_eq!(u32::MAX.wrapping_next_power_of_two(),+0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-17\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1867\"><a href=\"#examples-1867\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-17\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1868\"><a href=\"#examples-1868\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-17\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.u32.html#method.to_be_bytes\" title=\"method u32::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.to_le_bytes\" title=\"method u32::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1869\"><a href=\"#examples-1869\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78%5D%0A++++%7D+else+%7B%0A++++++++%5B0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-17\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in big endian.</p>\n<h5 id=\"examples-1870\"><a href=\"#examples-1870\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-17\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in little endian.</p>\n<h5 id=\"examples-1871\"><a href=\"#examples-1871\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_le_bytes([<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_le_bytes(%5B0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-17\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its memory representation\nas a byte array in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.u32.html#method.from_be_bytes\" title=\"associated function u32::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.from_le_bytes\" title=\"associated function u32::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1872\"><a href=\"#examples-1872\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78%5D%0A%7D+else+%7B%0A++++%5B0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-15\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MIN\" title=\"associated constant u32::MIN\"><code>u32::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-15\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MAX\" title=\"associated constant u32::MAX\"><code>u32::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.widening_mul-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.widening_mul-3\" class=\"fn\">widening_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the complete product <code>self * rhs</code> without the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>If you also need to add a carry to the wide result, then you want\n<a href=\"std/primitive.u32.html#method.carrying_mul\" title=\"method u32::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-1873\"><a href=\"#examples-1873\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.widening_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.widening_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.widening_mul(2),+(10,+0));%0Aassert_eq!(1_000_000_000u32.widening_mul(10),+(1410065408,+2));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_mul-3\" class=\"fn\">carrying_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need the <code>carry</code>, then you can use <a href=\"std/primitive.u32.html#method.widening_mul\" title=\"method u32::widening_mul\"><code>Self::widening_mul</code></a> instead.</p>\n<h5 id=\"examples-1874\"><a href=\"#examples-1874\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">10</span>), (<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">0</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">1410065418</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.carrying_mul(u32::MAX, u32::MAX), (<span class=\"number\">0</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.carrying_mul(2,+0),+(10,+0));%0Aassert_eq!(5u32.carrying_mul(2,+10),+(20,+0));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+0),+(1410065408,+2));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+10),+(1410065418,+2));%0Aassert_eq!(u32::MAX.carrying_mul(u32::MAX,+u32::MAX),+(0,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This is the core operation needed for scalar multiplication when\nimplementing it for wider-than-native types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">fn </span>scalar_mul_eq(little_endian_digits: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u16&gt;, multiplicand: u16) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>carry = <span class=\"number\">0</span>;\n    <span class=\"kw\">for </span>d <span class=\"kw\">in </span>little_endian_digits.iter_mut() {\n        (<span class=\"kw-2\">*</span>d, carry) = d.carrying_mul(multiplicand, carry);\n    }\n    <span class=\"kw\">if </span>carry != <span class=\"number\">0 </span>{\n        little_endian_digits.push(carry);\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">30</span>, <span class=\"number\">60</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x87654321_u64 </span>* <span class=\"number\">0xFEED</span>, <span class=\"number\">0x86D3D159E38D</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0x4321</span>, <span class=\"number\">0x8765</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">0xFEED</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">0xE38D</span>, <span class=\"number\">0xD159</span>, <span class=\"number\">0x86D3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Afn+scalar_mul_eq(little_endian_digits:+%26mut+Vec%3Cu16%3E,+multiplicand:+u16)+%7B%0A++++let+mut+carry+=+0;%0A++++for+d+in+little_endian_digits.iter_mut()+%7B%0A++++++++(*d,+carry)+=+d.carrying_mul(multiplicand,+carry);%0A++++%7D%0A++++if+carry+!=+0+%7B%0A++++++++little_endian_digits.push(carry);%0A++++%7D%0A%7D%0A%0Alet+mut+v+=+vec!%5B10,+20%5D;%0Ascalar_mul_eq(%26mut+v,+3);%0Aassert_eq!(v,+%5B30,+60%5D);%0A%0Aassert_eq!(0x87654321_u64+*+0xFEED,+0x86D3D159E38D);%0Alet+mut+v+=+vec!%5B0x4321,+0x8765%5D;%0Ascalar_mul_eq(%26mut+v,+0xFEED);%0Aassert_eq!(v,+%5B0xE38D,+0xD159,+0x86D3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If <code>carry</code> is zero, this is similar to <a href=\"std/primitive.u32.html#method.overflowing_mul\" title=\"method u32::overflowing_mul\"><code>overflowing_mul</code></a>,\nexcept that it gives the value of the overflow instead of just whether one happened:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Alet+r+=+u8::carrying_mul(7,+13,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(7,+13));%0Alet+r+=+u8::carrying_mul(13,+42,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(13,+42));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>The value of the first field in the returned tuple matches what you’d get\nby combining the <a href=\"std/primitive.u32.html#method.wrapping_mul\" title=\"method u32::wrapping_mul\"><code>wrapping_mul</code></a> and\n<a href=\"std/primitive.u32.html#method.wrapping_add\" title=\"method u32::wrapping_add\"><code>wrapping_add</code></a> methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"number\">789_u16</span>.carrying_mul(<span class=\"number\">456</span>, <span class=\"number\">123</span>).<span class=\"number\">0</span>,\n    <span class=\"number\">789_u16</span>.wrapping_mul(<span class=\"number\">456</span>).wrapping_add(<span class=\"number\">123</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(%0A++++789_u16.carrying_mul(456,+123).0,%0A++++789_u16.wrapping_mul(456).wrapping_add(123),%0A);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1162\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-17\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1875\"><a href=\"#examples-1875\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.midpoint(4),+2);%0Aassert_eq!(1u32.midpoint(4),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details>",0,"std::os::unix::raw::gid_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-u32-3\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1141\">source</a><a href=\"#impl-u32-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-18\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-18\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 0u32</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type.</p>\n<h5 id=\"examples-1876\"><a href=\"#examples-1876\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MIN, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MIN,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-18\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-18\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 4_294_967_295u32</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>32</sup> − 1).</p>\n<h5 id=\"examples-1877\"><a href=\"#examples-1877\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX, <span class=\"number\">4294967295</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX,+4294967295);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-16\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-16\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1878\"><a href=\"#examples-1878\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::BITS, <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::BITS,+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-16\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-344\"><a href=\"#panics-344\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1879\"><a href=\"#examples-1879\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-16\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1880\"><a href=\"#examples-1880\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b01001100u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b01001100u32;%0A%0Aassert_eq!(n.count_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-16\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1881\"><a href=\"#examples-1881\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX.count_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX.count_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-16\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.u32.html#method.ilog2\" title=\"method u32::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1882\"><a href=\"#examples-1882\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = u32::MAX &gt;&gt; <span class=\"number\">2</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+u32::MAX+%3E%3E+2;%0A%0Aassert_eq!(n.leading_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-16\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1883\"><a href=\"#examples-1883\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b0101000u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b0101000u32;%0A%0Aassert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-16\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1884\"><a href=\"#examples-1884\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = !(u32::MAX &gt;&gt; <span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+!(u32::MAX+%3E%3E+2);%0A%0Aassert_eq!(n.leading_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-16\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1885\"><a href=\"#examples-1885\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b1010111u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b1010111u32;%0A%0Aassert_eq!(n.trailing_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-16\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1886\"><a href=\"#examples-1886\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x10000b3u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xb301</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x10000b3u32;%0Alet+m+=+0xb301;%0A%0Aassert_eq!(n.rotate_left(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-16\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1887\"><a href=\"#examples-1887\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xb301u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x10000b3</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xb301u32;%0Alet+m+=+0x10000b3;%0A%0Aassert_eq!(n.rotate_right(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-16\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1888\"><a href=\"#examples-1888\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x78563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x78563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-16\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1889\"><a href=\"#examples-1889\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x1e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0u32</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x1e6a2c48);%0Aassert_eq!(0,+0u32.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-16\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1890\"><a href=\"#examples-1890\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(u32::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-16\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1891\"><a href=\"#examples-1891\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(u32::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-16\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1892\"><a href=\"#examples-1892\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-16\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1893\"><a href=\"#examples-1893\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-16\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1894\"><a href=\"#examples-1894\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(u32::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((u32::MAX+-+2).checked_add(1),+Some(u32::MAX+-+1));%0Aassert_eq!((u32::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-16\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-92\"><a href=\"#safety-92\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; u32::MAX</code> or <code>self + rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_add\" title=\"method u32::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_signed-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_signed-4\" class=\"fn\">checked_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with a signed integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1895\"><a href=\"#examples-1895\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(-<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add_signed(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_add_signed(2),+Some(3));%0Aassert_eq!(1u32.checked_add_signed(-2),+None);%0Aassert_eq!((u32::MAX+-+2).checked_add_signed(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-16\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1896\"><a href=\"#examples-1896\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_sub(1),+Some(0));%0Aassert_eq!(0u32.checked_sub(1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-16\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-93\"><a href=\"#safety-93\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; u32::MAX</code> or <code>self - rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_sub\" title=\"method u32::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-16\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1897\"><a href=\"#examples-1897\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_mul(1),+Some(5));%0Aassert_eq!(u32::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-16\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-94\"><a href=\"#safety-94\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; u32::MAX</code> or <code>self * rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_mul\" title=\"method u32::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-16\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1898\"><a href=\"#examples-1898\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div(2),+Some(64));%0Aassert_eq!(1u32.checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-16\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1899\"><a href=\"#examples-1899\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div_euclid(2),+Some(64));%0Aassert_eq!(1u32.checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-16\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1900\"><a href=\"#examples-1900\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem(2),+Some(1));%0Aassert_eq!(5u32.checked_rem(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-16\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1901\"><a href=\"#examples-1901\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5u32.checked_rem_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-16\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-345\"><a href=\"#panics-345\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero, or if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1902\"><a href=\"#examples-1902\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-16\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-346\"><a href=\"#panics-346\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"examples-1903\"><a href=\"#examples-1903\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-16\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-347\"><a href=\"#panics-347\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"example-30\"><a href=\"#example-30\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-16\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1904\"><a href=\"#examples-1904\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-16\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1905\"><a href=\"#examples-1905\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-16\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1906\"><a href=\"#examples-1906\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-16\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.</p>\n<p>Note that negating any positive integer will overflow.</p>\n<h5 id=\"examples-1907\"><a href=\"#examples-1907\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.checked_neg(),+Some(0));%0Aassert_eq!(1u32.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-16\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1908\"><a href=\"#examples-1908\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x10u32.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-16\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-95\"><a href=\"#safety-95\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shl\" title=\"method u32::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-16\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1909\"><a href=\"#examples-1909\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10u32.checked_shr(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-16\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-96\"><a href=\"#safety-96\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shr\" title=\"method u32::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-16\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1910\"><a href=\"#examples-1910\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_pow(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">32</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_pow(5),+Some(32));%0Aassert_eq!(u32::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-16\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1911\"><a href=\"#examples-1911\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_add(<span class=\"number\">127</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_add(1),+101);%0Aassert_eq!(u32::MAX.saturating_add(127),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_signed-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_signed-4\" class=\"fn\">saturating_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with a signed integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1912\"><a href=\"#examples-1912\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(-<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).saturating_add_signed(<span class=\"number\">4</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.saturating_add_signed(2),+3);%0Aassert_eq!(1u32.saturating_add_signed(-2),+0);%0Aassert_eq!((u32::MAX+-+2).saturating_add_signed(4),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-16\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating\nat the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1913\"><a href=\"#examples-1913\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_sub(<span class=\"number\">27</span>), <span class=\"number\">73</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13u32</span>.saturating_sub(<span class=\"number\">127</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_sub(27),+73);%0Aassert_eq!(13u32.saturating_sub(127),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-16\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1914\"><a href=\"#examples-1914\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.saturating_mul(<span class=\"number\">10</span>), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX).saturating_mul(<span class=\"number\">10</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.saturating_mul(10),+20);%0Aassert_eq!((u32::MAX).saturating_mul(10),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-16\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1915\"><a href=\"#examples-1915\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.saturating_div(2),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1u32</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1u32.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-16\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1916\"><a href=\"#examples-1916\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4u32</span>.saturating_pow(<span class=\"number\">3</span>), <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_pow(<span class=\"number\">2</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(4u32.saturating_pow(3),+64);%0Aassert_eq!(u32::MAX.saturating_pow(2),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-16\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1917\"><a href=\"#examples-1917\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(<span class=\"number\">55</span>), <span class=\"number\">255</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(u32::MAX), <span class=\"number\">199</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(200u32.wrapping_add(55),+255);%0Aassert_eq!(200u32.wrapping_add(u32::MAX),+199);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_signed-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_signed-4\" class=\"fn\">wrapping_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with a signed integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1918\"><a href=\"#examples-1918\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(-<span class=\"number\">2</span>), u32::MAX);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).wrapping_add_signed(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_add_signed(2),+3);%0Aassert_eq!(1u32.wrapping_add_signed(-2),+u32::MAX);%0Aassert_eq!((u32::MAX+-+2).wrapping_add_signed(4),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-16\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1919\"><a href=\"#examples-1919\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(<span class=\"number\">100</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(u32::MAX), <span class=\"number\">101</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_sub(100),+0);%0Aassert_eq!(100u32.wrapping_sub(u32::MAX),+101);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-16\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1920\"><a href=\"#examples-1920\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u8</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">25u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">44</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u8.wrapping_mul(12),+120);%0Aassert_eq!(25u8.wrapping_mul(12),+44);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-16\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-348\"><a href=\"#panics-348\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1921\"><a href=\"#examples-1921\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-16\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_div(rhs)</code>.</p>\n<h5 id=\"panics-349\"><a href=\"#panics-349\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1922\"><a href=\"#examples-1922\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div_euclid(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-16\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-350\"><a href=\"#panics-350\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1923\"><a href=\"#examples-1923\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-16\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_rem(rhs)</code>.</p>\n<h5 id=\"panics-351\"><a href=\"#panics-351\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1924\"><a href=\"#examples-1924\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem_euclid(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-16\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type.</p>\n<p>Since unsigned types do not have negative equivalents\nall applications of this function will wrap (except for <code>-0</code>).\nFor values smaller than the corresponding signed type’s maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to <code>MAX + 1 - (val - MAX - 1)</code> where\n<code>MAX</code> is the corresponding signed type’s maximum.</p>\n<h5 id=\"examples-1925\"><a href=\"#examples-1925\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_u32</span>.wrapping_neg(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_neg(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13_u32</span>.wrapping_neg(), (!<span class=\"number\">13</span>) + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42_u32</span>.wrapping_neg(), !(<span class=\"number\">42 </span>- <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0_u32.wrapping_neg(),+0);%0Aassert_eq!(u32::MAX.wrapping_neg(),+1);%0Aassert_eq!(13_u32.wrapping_neg(),+(!13)+%2B+1);%0Aassert_eq!(42_u32.wrapping_neg(),+!(42+-+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-16\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_left\" title=\"method u32::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1926\"><a href=\"#examples-1926\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">7</span>), <span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">128</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_shl(7),+128);%0Aassert_eq!(1u32.wrapping_shl(128),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-16\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_right\" title=\"method u32::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1927\"><a href=\"#examples-1927\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">7</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">128</span>), <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.wrapping_shr(7),+1);%0Aassert_eq!(128u32.wrapping_shr(128),+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-16\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1928\"><a href=\"#examples-1928\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_pow(<span class=\"number\">5</span>), <span class=\"number\">243</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.wrapping_pow(<span class=\"number\">6</span>), <span class=\"number\">217</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.wrapping_pow(5),+243);%0Aassert_eq!(3u8.wrapping_pow(6),+217);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-16\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1929\"><a href=\"#examples-1929\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.overflowing_add(<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_add(2),+(7,+false));%0Aassert_eq!(u32::MAX.overflowing_add(1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-16\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple containing\nthe sum and the output carry.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns an output integer and a carry-out bit. This allows\nchaining together multiple additions to create a wider addition, and\ncan be useful for bignum addition.</p>\n<p>This can be thought of as a 32-bit “full adder”, in the electronics sense.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.u32.html#method.overflowing_add\" title=\"method u32::overflowing_add\"><code>overflowing_add</code></a>, and the output carry is\nequal to the overflow flag. Note that although carry and overflow\nflags are similar for unsigned integers, they are different for\nsigned integers.</p>\n<h5 id=\"examples-1930\"><a href=\"#examples-1930\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    3  MAX    (a = 3 × 2^32 + 2^32 - 1)\n// +  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    9    6    (sum = 9 × 2^32 + 6)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">3</span>, u32::MAX);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(sum1, carry2) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(carry2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">9</span>, <span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++3++MAX++++(a+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A//+%2B++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++9++++6++++(sum+=+9+%C3%97+2%5E32+%2B+6)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(3,+u32::MAX);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+carry0+=+false;%0A%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0Alet+(sum1,+carry2)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(carry2,+false);%0A%0Aassert_eq!((sum1,+sum0),+(9,+6));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_signed-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_signed-4\" class=\"fn\">overflowing_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1931\"><a href=\"#examples-1931\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(-<span class=\"number\">2</span>), (u32::MAX, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).overflowing_add_signed(<span class=\"number\">4</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.overflowing_add_signed(2),+(3,+false));%0Aassert_eq!(1u32.overflowing_add_signed(-2),+(u32::MAX,+true));%0Aassert_eq!((u32::MAX+-+2).overflowing_add_signed(4),+(1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-16\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1932\"><a href=\"#examples-1932\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_sub(<span class=\"number\">1</span>), (u32::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_sub(2),+(3,+false));%0Aassert_eq!(0u32.overflowing_sub(1),+(u32::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-16\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple\ncontaining the difference and the output borrow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns an output\ninteger and a borrow-out bit. This allows chaining together multiple\nsubtractions to create a wider subtraction, and can be useful for\nbignum subtraction.</p>\n<h5 id=\"examples-1933\"><a href=\"#examples-1933\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    9    6    (a = 9 × 2^32 + 6)\n// -  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    3  MAX    (diff = 3 × 2^32 + 2^32 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">9</span>, <span class=\"number\">6</span>);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(borrow2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">3</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++9++++6++++(a+=+9+%C3%97+2%5E32+%2B+6)%0A//+-++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++3++MAX++++(diff+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(9,+6);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+borrow0+=+false;%0A%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0Alet+(diff1,+borrow2)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(borrow2,+false);%0A%0Aassert_eq!((diff1,+diff0),+(3,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-16\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-1934\"><a href=\"#examples-1934\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.abs_diff(80),+20u32);%0Aassert_eq!(100u32.abs_diff(110),+10u32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-16\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1935\"><a href=\"#examples-1935\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000u32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-16\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.</p>\n<h5 id=\"panics-352\"><a href=\"#panics-352\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1936\"><a href=\"#examples-1936\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-16\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.overflowing_div(rhs)</code>.</p>\n<h5 id=\"panics-353\"><a href=\"#panics-353\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1937\"><a href=\"#examples-1937\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div_euclid(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-16\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.</p>\n<h5 id=\"panics-354\"><a href=\"#panics-354\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1938\"><a href=\"#examples-1938\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-16\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by Euclidean division.</p>\n<p>Returns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to <code>self.overflowing_rem(rhs)</code>.</p>\n<h5 id=\"panics-355\"><a href=\"#panics-355\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1939\"><a href=\"#examples-1939\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem_euclid(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-16\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self in an overflowing fashion.</p>\n<p>Returns <code>!self + 1</code> using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.</p>\n<h5 id=\"examples-1940\"><a href=\"#examples-1940\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_neg(), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.overflowing_neg(), (-<span class=\"number\">2i32 </span><span class=\"kw\">as </span>u32, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.overflowing_neg(),+(0,+false));%0Aassert_eq!(2u32.overflowing_neg(),+(-2i32+as+u32,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-16\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-1941\"><a href=\"#examples-1941\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">132</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1u32.overflowing_shl(132),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-16\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-1942\"><a href=\"#examples-1942\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">132</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10u32.overflowing_shr(132),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-16\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1943\"><a href=\"#examples-1943\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.overflowing_pow(<span class=\"number\">5</span>), (<span class=\"number\">243</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.overflowing_pow(<span class=\"number\">6</span>), (<span class=\"number\">217</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.overflowing_pow(5),+(243,+false));%0Aassert_eq!(3u8.overflowing_pow(6),+(217,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-16\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1944\"><a href=\"#examples-1944\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-16\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-1945\"><a href=\"#examples-1945\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-18\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Performs Euclidean division.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self / rhs</code>.</p>\n<h5 id=\"panics-356\"><a href=\"#panics-356\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1946\"><a href=\"#examples-1946\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.div_euclid(<span class=\"number\">4</span>), <span class=\"number\">1</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.div_euclid(4),+1);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-18\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least remainder of <code>self (mod rhs)</code>.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self % rhs</code>.</p>\n<h5 id=\"panics-357\"><a href=\"#panics-357\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1947\"><a href=\"#examples-1947\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.rem_euclid(<span class=\"number\">4</span>), <span class=\"number\">3</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.rem_euclid(4),+3);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-16\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-16\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<p>This is the same as performing <code>self / rhs</code> for all unsigned integers.</p>\n<h5 id=\"panics-358\"><a href=\"#panics-358\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-1948\"><a href=\"#examples-1948\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_floor(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_floor(4),+1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-16\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-359\"><a href=\"#panics-359\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-56\"><a href=\"#overflow-behavior-56\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1949\"><a href=\"#examples-1949\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_ceil(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_ceil(4),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-16\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>.</p>\n<h5 id=\"panics-360\"><a href=\"#panics-360\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-57\"><a href=\"#overflow-behavior-57\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1950\"><a href=\"#examples-1950\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.next_multiple_of(8),+16);%0Aassert_eq!(23_u32.next_multiple_of(8),+24);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-16\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the\noperation would result in overflow.</p>\n<h5 id=\"examples-1951\"><a href=\"#examples-1951\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_u32</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_u32.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(1_u32.checked_next_multiple_of(0),+None);%0Aassert_eq!(u32::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-4\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.</p>\n<h5 id=\"examples-1952\"><a href=\"#examples-1952\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">16u32</span>.is_power_of_two());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10u32</span>.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(16u32.is_power_of_two());%0Aassert!(!10u32.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_two-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_power_of_two-4\" class=\"fn\">next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.</p>\n<p>When return value overflows (i.e., <code>self &gt; (1 &lt;&lt; (N-1))</code> for type\n<code>uN</code>), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).</p>\n<h5 id=\"examples-1953\"><a href=\"#examples-1953\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.next_power_of_two(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.next_power_of_two(),+2);%0Aassert_eq!(3u32.next_power_of_two(),+4);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-4\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\n<code>None</code> is returned, otherwise the power of two is wrapped in <code>Some</code>.</p>\n<h5 id=\"examples-1954\"><a href=\"#examples-1954\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_power_of_two(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_next_power_of_two(),+Some(2));%0Aassert_eq!(3u32.checked_next_power_of_two(),+Some(4));%0Aassert_eq!(u32::MAX.checked_next_power_of_two(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_next_power_of_two-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/32463\" title=\"Tracking issue for wrapping_next_power_of_two\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wrapping_next_power_of_two-4\" class=\"fn\">wrapping_next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wrapping_next_power_of_two</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32463\">#32463</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\nthe return value is wrapped to <code>0</code>.</p>\n<h5 id=\"examples-1955\"><a href=\"#examples-1955\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(wrapping_next_power_of_two)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.wrapping_next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_next_power_of_two(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_next_power_of_two(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(wrapping_next_power_of_two)%5D%0A%0Afn+main()+%7B%0Aassert_eq!(2u32.wrapping_next_power_of_two(),+2);%0Aassert_eq!(3u32.wrapping_next_power_of_two(),+4);%0Aassert_eq!(u32::MAX.wrapping_next_power_of_two(),+0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-18\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1956\"><a href=\"#examples-1956\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-18\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1957\"><a href=\"#examples-1957\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-18\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.u32.html#method.to_be_bytes\" title=\"method u32::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.to_le_bytes\" title=\"method u32::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1958\"><a href=\"#examples-1958\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78%5D%0A++++%7D+else+%7B%0A++++++++%5B0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-18\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in big endian.</p>\n<h5 id=\"examples-1959\"><a href=\"#examples-1959\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-18\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in little endian.</p>\n<h5 id=\"examples-1960\"><a href=\"#examples-1960\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_le_bytes([<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_le_bytes(%5B0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-18\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its memory representation\nas a byte array in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.u32.html#method.from_be_bytes\" title=\"associated function u32::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.from_le_bytes\" title=\"associated function u32::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1961\"><a href=\"#examples-1961\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78%5D%0A%7D+else+%7B%0A++++%5B0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-16\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MIN\" title=\"associated constant u32::MIN\"><code>u32::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-16\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MAX\" title=\"associated constant u32::MAX\"><code>u32::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.widening_mul-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.widening_mul-4\" class=\"fn\">widening_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the complete product <code>self * rhs</code> without the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>If you also need to add a carry to the wide result, then you want\n<a href=\"std/primitive.u32.html#method.carrying_mul\" title=\"method u32::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-1962\"><a href=\"#examples-1962\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.widening_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.widening_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.widening_mul(2),+(10,+0));%0Aassert_eq!(1_000_000_000u32.widening_mul(10),+(1410065408,+2));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_mul-4\" class=\"fn\">carrying_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need the <code>carry</code>, then you can use <a href=\"std/primitive.u32.html#method.widening_mul\" title=\"method u32::widening_mul\"><code>Self::widening_mul</code></a> instead.</p>\n<h5 id=\"examples-1963\"><a href=\"#examples-1963\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">10</span>), (<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">0</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">1410065418</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.carrying_mul(u32::MAX, u32::MAX), (<span class=\"number\">0</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.carrying_mul(2,+0),+(10,+0));%0Aassert_eq!(5u32.carrying_mul(2,+10),+(20,+0));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+0),+(1410065408,+2));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+10),+(1410065418,+2));%0Aassert_eq!(u32::MAX.carrying_mul(u32::MAX,+u32::MAX),+(0,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This is the core operation needed for scalar multiplication when\nimplementing it for wider-than-native types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">fn </span>scalar_mul_eq(little_endian_digits: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u16&gt;, multiplicand: u16) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>carry = <span class=\"number\">0</span>;\n    <span class=\"kw\">for </span>d <span class=\"kw\">in </span>little_endian_digits.iter_mut() {\n        (<span class=\"kw-2\">*</span>d, carry) = d.carrying_mul(multiplicand, carry);\n    }\n    <span class=\"kw\">if </span>carry != <span class=\"number\">0 </span>{\n        little_endian_digits.push(carry);\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">30</span>, <span class=\"number\">60</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x87654321_u64 </span>* <span class=\"number\">0xFEED</span>, <span class=\"number\">0x86D3D159E38D</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0x4321</span>, <span class=\"number\">0x8765</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">0xFEED</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">0xE38D</span>, <span class=\"number\">0xD159</span>, <span class=\"number\">0x86D3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Afn+scalar_mul_eq(little_endian_digits:+%26mut+Vec%3Cu16%3E,+multiplicand:+u16)+%7B%0A++++let+mut+carry+=+0;%0A++++for+d+in+little_endian_digits.iter_mut()+%7B%0A++++++++(*d,+carry)+=+d.carrying_mul(multiplicand,+carry);%0A++++%7D%0A++++if+carry+!=+0+%7B%0A++++++++little_endian_digits.push(carry);%0A++++%7D%0A%7D%0A%0Alet+mut+v+=+vec!%5B10,+20%5D;%0Ascalar_mul_eq(%26mut+v,+3);%0Aassert_eq!(v,+%5B30,+60%5D);%0A%0Aassert_eq!(0x87654321_u64+*+0xFEED,+0x86D3D159E38D);%0Alet+mut+v+=+vec!%5B0x4321,+0x8765%5D;%0Ascalar_mul_eq(%26mut+v,+0xFEED);%0Aassert_eq!(v,+%5B0xE38D,+0xD159,+0x86D3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If <code>carry</code> is zero, this is similar to <a href=\"std/primitive.u32.html#method.overflowing_mul\" title=\"method u32::overflowing_mul\"><code>overflowing_mul</code></a>,\nexcept that it gives the value of the overflow instead of just whether one happened:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Alet+r+=+u8::carrying_mul(7,+13,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(7,+13));%0Alet+r+=+u8::carrying_mul(13,+42,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(13,+42));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>The value of the first field in the returned tuple matches what you’d get\nby combining the <a href=\"std/primitive.u32.html#method.wrapping_mul\" title=\"method u32::wrapping_mul\"><code>wrapping_mul</code></a> and\n<a href=\"std/primitive.u32.html#method.wrapping_add\" title=\"method u32::wrapping_add\"><code>wrapping_add</code></a> methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"number\">789_u16</span>.carrying_mul(<span class=\"number\">456</span>, <span class=\"number\">123</span>).<span class=\"number\">0</span>,\n    <span class=\"number\">789_u16</span>.wrapping_mul(<span class=\"number\">456</span>).wrapping_add(<span class=\"number\">123</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(%0A++++789_u16.carrying_mul(456,+123).0,%0A++++789_u16.wrapping_mul(456).wrapping_add(123),%0A);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1162\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-18\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1964\"><a href=\"#examples-1964\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.midpoint(4),+2);%0Aassert_eq!(1u32.midpoint(4),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details>",0,"std::os::linux::raw::mode_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-u32-4\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1141\">source</a><a href=\"#impl-u32-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-19\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-19\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 0u32</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type.</p>\n<h5 id=\"examples-1965\"><a href=\"#examples-1965\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MIN, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MIN,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-19\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-19\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 4_294_967_295u32</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>32</sup> − 1).</p>\n<h5 id=\"examples-1966\"><a href=\"#examples-1966\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX, <span class=\"number\">4294967295</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX,+4294967295);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-17\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-17\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1967\"><a href=\"#examples-1967\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::BITS, <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::BITS,+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-17\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-361\"><a href=\"#panics-361\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1968\"><a href=\"#examples-1968\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-17\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1969\"><a href=\"#examples-1969\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b01001100u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b01001100u32;%0A%0Aassert_eq!(n.count_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-17\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1970\"><a href=\"#examples-1970\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX.count_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX.count_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-17\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.u32.html#method.ilog2\" title=\"method u32::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1971\"><a href=\"#examples-1971\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = u32::MAX &gt;&gt; <span class=\"number\">2</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+u32::MAX+%3E%3E+2;%0A%0Aassert_eq!(n.leading_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-17\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1972\"><a href=\"#examples-1972\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b0101000u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b0101000u32;%0A%0Aassert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-17\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1973\"><a href=\"#examples-1973\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = !(u32::MAX &gt;&gt; <span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+!(u32::MAX+%3E%3E+2);%0A%0Aassert_eq!(n.leading_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-17\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-1974\"><a href=\"#examples-1974\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b1010111u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b1010111u32;%0A%0Aassert_eq!(n.trailing_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-17\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1975\"><a href=\"#examples-1975\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x10000b3u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xb301</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x10000b3u32;%0Alet+m+=+0xb301;%0A%0Aassert_eq!(n.rotate_left(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-17\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1976\"><a href=\"#examples-1976\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xb301u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x10000b3</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xb301u32;%0Alet+m+=+0x10000b3;%0A%0Aassert_eq!(n.rotate_right(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-17\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1977\"><a href=\"#examples-1977\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x78563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x78563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-17\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1978\"><a href=\"#examples-1978\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x1e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0u32</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x1e6a2c48);%0Aassert_eq!(0,+0u32.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-17\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1979\"><a href=\"#examples-1979\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(u32::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-17\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1980\"><a href=\"#examples-1980\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(u32::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-17\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1981\"><a href=\"#examples-1981\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-17\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-1982\"><a href=\"#examples-1982\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-17\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1983\"><a href=\"#examples-1983\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(u32::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((u32::MAX+-+2).checked_add(1),+Some(u32::MAX+-+1));%0Aassert_eq!((u32::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-17\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-97\"><a href=\"#safety-97\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; u32::MAX</code> or <code>self + rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_add\" title=\"method u32::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_signed-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_signed-5\" class=\"fn\">checked_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with a signed integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1984\"><a href=\"#examples-1984\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(-<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add_signed(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_add_signed(2),+Some(3));%0Aassert_eq!(1u32.checked_add_signed(-2),+None);%0Aassert_eq!((u32::MAX+-+2).checked_add_signed(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-17\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1985\"><a href=\"#examples-1985\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_sub(1),+Some(0));%0Aassert_eq!(0u32.checked_sub(1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-17\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-98\"><a href=\"#safety-98\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; u32::MAX</code> or <code>self - rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_sub\" title=\"method u32::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-17\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1986\"><a href=\"#examples-1986\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_mul(1),+Some(5));%0Aassert_eq!(u32::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-17\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-99\"><a href=\"#safety-99\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; u32::MAX</code> or <code>self * rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_mul\" title=\"method u32::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-17\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1987\"><a href=\"#examples-1987\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div(2),+Some(64));%0Aassert_eq!(1u32.checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-17\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1988\"><a href=\"#examples-1988\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div_euclid(2),+Some(64));%0Aassert_eq!(1u32.checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-17\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1989\"><a href=\"#examples-1989\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem(2),+Some(1));%0Aassert_eq!(5u32.checked_rem(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-17\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-1990\"><a href=\"#examples-1990\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5u32.checked_rem_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-17\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-362\"><a href=\"#panics-362\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero, or if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1991\"><a href=\"#examples-1991\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-17\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-363\"><a href=\"#panics-363\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"examples-1992\"><a href=\"#examples-1992\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-17\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-364\"><a href=\"#panics-364\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"example-31\"><a href=\"#example-31\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-17\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1993\"><a href=\"#examples-1993\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-17\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1994\"><a href=\"#examples-1994\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-17\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-1995\"><a href=\"#examples-1995\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-17\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.</p>\n<p>Note that negating any positive integer will overflow.</p>\n<h5 id=\"examples-1996\"><a href=\"#examples-1996\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.checked_neg(),+Some(0));%0Aassert_eq!(1u32.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-17\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1997\"><a href=\"#examples-1997\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x10u32.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-17\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-100\"><a href=\"#safety-100\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shl\" title=\"method u32::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-17\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1998\"><a href=\"#examples-1998\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10u32.checked_shr(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-17\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-101\"><a href=\"#safety-101\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shr\" title=\"method u32::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-17\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1999\"><a href=\"#examples-1999\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_pow(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">32</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_pow(5),+Some(32));%0Aassert_eq!(u32::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-17\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2000\"><a href=\"#examples-2000\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_add(<span class=\"number\">127</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_add(1),+101);%0Aassert_eq!(u32::MAX.saturating_add(127),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_signed-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_signed-5\" class=\"fn\">saturating_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with a signed integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2001\"><a href=\"#examples-2001\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(-<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).saturating_add_signed(<span class=\"number\">4</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.saturating_add_signed(2),+3);%0Aassert_eq!(1u32.saturating_add_signed(-2),+0);%0Aassert_eq!((u32::MAX+-+2).saturating_add_signed(4),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-17\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating\nat the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2002\"><a href=\"#examples-2002\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_sub(<span class=\"number\">27</span>), <span class=\"number\">73</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13u32</span>.saturating_sub(<span class=\"number\">127</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_sub(27),+73);%0Aassert_eq!(13u32.saturating_sub(127),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-17\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2003\"><a href=\"#examples-2003\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.saturating_mul(<span class=\"number\">10</span>), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX).saturating_mul(<span class=\"number\">10</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.saturating_mul(10),+20);%0Aassert_eq!((u32::MAX).saturating_mul(10),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-17\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2004\"><a href=\"#examples-2004\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.saturating_div(2),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1u32</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1u32.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-17\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2005\"><a href=\"#examples-2005\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4u32</span>.saturating_pow(<span class=\"number\">3</span>), <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_pow(<span class=\"number\">2</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(4u32.saturating_pow(3),+64);%0Aassert_eq!(u32::MAX.saturating_pow(2),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-17\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2006\"><a href=\"#examples-2006\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(<span class=\"number\">55</span>), <span class=\"number\">255</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(u32::MAX), <span class=\"number\">199</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(200u32.wrapping_add(55),+255);%0Aassert_eq!(200u32.wrapping_add(u32::MAX),+199);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_signed-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_signed-5\" class=\"fn\">wrapping_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with a signed integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2007\"><a href=\"#examples-2007\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(-<span class=\"number\">2</span>), u32::MAX);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).wrapping_add_signed(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_add_signed(2),+3);%0Aassert_eq!(1u32.wrapping_add_signed(-2),+u32::MAX);%0Aassert_eq!((u32::MAX+-+2).wrapping_add_signed(4),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-17\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2008\"><a href=\"#examples-2008\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(<span class=\"number\">100</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(u32::MAX), <span class=\"number\">101</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_sub(100),+0);%0Aassert_eq!(100u32.wrapping_sub(u32::MAX),+101);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-17\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2009\"><a href=\"#examples-2009\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u8</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">25u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">44</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u8.wrapping_mul(12),+120);%0Aassert_eq!(25u8.wrapping_mul(12),+44);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-17\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-365\"><a href=\"#panics-365\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2010\"><a href=\"#examples-2010\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-17\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_div(rhs)</code>.</p>\n<h5 id=\"panics-366\"><a href=\"#panics-366\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2011\"><a href=\"#examples-2011\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div_euclid(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-17\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-367\"><a href=\"#panics-367\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2012\"><a href=\"#examples-2012\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-17\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_rem(rhs)</code>.</p>\n<h5 id=\"panics-368\"><a href=\"#panics-368\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2013\"><a href=\"#examples-2013\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem_euclid(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-17\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type.</p>\n<p>Since unsigned types do not have negative equivalents\nall applications of this function will wrap (except for <code>-0</code>).\nFor values smaller than the corresponding signed type’s maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to <code>MAX + 1 - (val - MAX - 1)</code> where\n<code>MAX</code> is the corresponding signed type’s maximum.</p>\n<h5 id=\"examples-2014\"><a href=\"#examples-2014\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_u32</span>.wrapping_neg(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_neg(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13_u32</span>.wrapping_neg(), (!<span class=\"number\">13</span>) + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42_u32</span>.wrapping_neg(), !(<span class=\"number\">42 </span>- <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0_u32.wrapping_neg(),+0);%0Aassert_eq!(u32::MAX.wrapping_neg(),+1);%0Aassert_eq!(13_u32.wrapping_neg(),+(!13)+%2B+1);%0Aassert_eq!(42_u32.wrapping_neg(),+!(42+-+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-17\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_left\" title=\"method u32::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-2015\"><a href=\"#examples-2015\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">7</span>), <span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">128</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_shl(7),+128);%0Aassert_eq!(1u32.wrapping_shl(128),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-17\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_right\" title=\"method u32::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-2016\"><a href=\"#examples-2016\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">7</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">128</span>), <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.wrapping_shr(7),+1);%0Aassert_eq!(128u32.wrapping_shr(128),+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-17\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2017\"><a href=\"#examples-2017\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_pow(<span class=\"number\">5</span>), <span class=\"number\">243</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.wrapping_pow(<span class=\"number\">6</span>), <span class=\"number\">217</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.wrapping_pow(5),+243);%0Aassert_eq!(3u8.wrapping_pow(6),+217);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-17\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-2018\"><a href=\"#examples-2018\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.overflowing_add(<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_add(2),+(7,+false));%0Aassert_eq!(u32::MAX.overflowing_add(1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-17\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple containing\nthe sum and the output carry.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns an output integer and a carry-out bit. This allows\nchaining together multiple additions to create a wider addition, and\ncan be useful for bignum addition.</p>\n<p>This can be thought of as a 32-bit “full adder”, in the electronics sense.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.u32.html#method.overflowing_add\" title=\"method u32::overflowing_add\"><code>overflowing_add</code></a>, and the output carry is\nequal to the overflow flag. Note that although carry and overflow\nflags are similar for unsigned integers, they are different for\nsigned integers.</p>\n<h5 id=\"examples-2019\"><a href=\"#examples-2019\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    3  MAX    (a = 3 × 2^32 + 2^32 - 1)\n// +  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    9    6    (sum = 9 × 2^32 + 6)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">3</span>, u32::MAX);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(sum1, carry2) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(carry2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">9</span>, <span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++3++MAX++++(a+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A//+%2B++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++9++++6++++(sum+=+9+%C3%97+2%5E32+%2B+6)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(3,+u32::MAX);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+carry0+=+false;%0A%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0Alet+(sum1,+carry2)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(carry2,+false);%0A%0Aassert_eq!((sum1,+sum0),+(9,+6));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_signed-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_signed-5\" class=\"fn\">overflowing_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-2020\"><a href=\"#examples-2020\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(-<span class=\"number\">2</span>), (u32::MAX, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).overflowing_add_signed(<span class=\"number\">4</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.overflowing_add_signed(2),+(3,+false));%0Aassert_eq!(1u32.overflowing_add_signed(-2),+(u32::MAX,+true));%0Aassert_eq!((u32::MAX+-+2).overflowing_add_signed(4),+(1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-17\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-2021\"><a href=\"#examples-2021\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_sub(<span class=\"number\">1</span>), (u32::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_sub(2),+(3,+false));%0Aassert_eq!(0u32.overflowing_sub(1),+(u32::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-17\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple\ncontaining the difference and the output borrow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns an output\ninteger and a borrow-out bit. This allows chaining together multiple\nsubtractions to create a wider subtraction, and can be useful for\nbignum subtraction.</p>\n<h5 id=\"examples-2022\"><a href=\"#examples-2022\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    9    6    (a = 9 × 2^32 + 6)\n// -  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    3  MAX    (diff = 3 × 2^32 + 2^32 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">9</span>, <span class=\"number\">6</span>);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(borrow2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">3</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++9++++6++++(a+=+9+%C3%97+2%5E32+%2B+6)%0A//+-++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++3++MAX++++(diff+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(9,+6);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+borrow0+=+false;%0A%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0Alet+(diff1,+borrow2)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(borrow2,+false);%0A%0Aassert_eq!((diff1,+diff0),+(3,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-17\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-2023\"><a href=\"#examples-2023\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.abs_diff(80),+20u32);%0Aassert_eq!(100u32.abs_diff(110),+10u32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-17\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-2024\"><a href=\"#examples-2024\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000u32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-17\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.</p>\n<h5 id=\"panics-369\"><a href=\"#panics-369\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2025\"><a href=\"#examples-2025\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-17\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.overflowing_div(rhs)</code>.</p>\n<h5 id=\"panics-370\"><a href=\"#panics-370\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2026\"><a href=\"#examples-2026\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div_euclid(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-17\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.</p>\n<h5 id=\"panics-371\"><a href=\"#panics-371\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2027\"><a href=\"#examples-2027\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-17\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by Euclidean division.</p>\n<p>Returns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to <code>self.overflowing_rem(rhs)</code>.</p>\n<h5 id=\"panics-372\"><a href=\"#panics-372\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2028\"><a href=\"#examples-2028\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem_euclid(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-17\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self in an overflowing fashion.</p>\n<p>Returns <code>!self + 1</code> using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.</p>\n<h5 id=\"examples-2029\"><a href=\"#examples-2029\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_neg(), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.overflowing_neg(), (-<span class=\"number\">2i32 </span><span class=\"kw\">as </span>u32, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.overflowing_neg(),+(0,+false));%0Aassert_eq!(2u32.overflowing_neg(),+(-2i32+as+u32,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-17\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-2030\"><a href=\"#examples-2030\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">132</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1u32.overflowing_shl(132),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-17\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-2031\"><a href=\"#examples-2031\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">132</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10u32.overflowing_shr(132),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-17\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-2032\"><a href=\"#examples-2032\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.overflowing_pow(<span class=\"number\">5</span>), (<span class=\"number\">243</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.overflowing_pow(<span class=\"number\">6</span>), (<span class=\"number\">217</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.overflowing_pow(5),+(243,+false));%0Aassert_eq!(3u8.overflowing_pow(6),+(217,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-17\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-2033\"><a href=\"#examples-2033\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-17\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-2034\"><a href=\"#examples-2034\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-19\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Performs Euclidean division.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self / rhs</code>.</p>\n<h5 id=\"panics-373\"><a href=\"#panics-373\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2035\"><a href=\"#examples-2035\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.div_euclid(<span class=\"number\">4</span>), <span class=\"number\">1</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.div_euclid(4),+1);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-19\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least remainder of <code>self (mod rhs)</code>.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self % rhs</code>.</p>\n<h5 id=\"panics-374\"><a href=\"#panics-374\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2036\"><a href=\"#examples-2036\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.rem_euclid(<span class=\"number\">4</span>), <span class=\"number\">3</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.rem_euclid(4),+3);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-17\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-17\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<p>This is the same as performing <code>self / rhs</code> for all unsigned integers.</p>\n<h5 id=\"panics-375\"><a href=\"#panics-375\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-2037\"><a href=\"#examples-2037\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_floor(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_floor(4),+1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-17\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-376\"><a href=\"#panics-376\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-58\"><a href=\"#overflow-behavior-58\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-2038\"><a href=\"#examples-2038\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_ceil(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_ceil(4),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-17\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>.</p>\n<h5 id=\"panics-377\"><a href=\"#panics-377\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-59\"><a href=\"#overflow-behavior-59\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-2039\"><a href=\"#examples-2039\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.next_multiple_of(8),+16);%0Aassert_eq!(23_u32.next_multiple_of(8),+24);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-17\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the\noperation would result in overflow.</p>\n<h5 id=\"examples-2040\"><a href=\"#examples-2040\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_u32</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_u32.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(1_u32.checked_next_multiple_of(0),+None);%0Aassert_eq!(u32::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-5\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.</p>\n<h5 id=\"examples-2041\"><a href=\"#examples-2041\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">16u32</span>.is_power_of_two());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10u32</span>.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(16u32.is_power_of_two());%0Aassert!(!10u32.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_two-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_power_of_two-5\" class=\"fn\">next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.</p>\n<p>When return value overflows (i.e., <code>self &gt; (1 &lt;&lt; (N-1))</code> for type\n<code>uN</code>), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).</p>\n<h5 id=\"examples-2042\"><a href=\"#examples-2042\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.next_power_of_two(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.next_power_of_two(),+2);%0Aassert_eq!(3u32.next_power_of_two(),+4);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-5\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\n<code>None</code> is returned, otherwise the power of two is wrapped in <code>Some</code>.</p>\n<h5 id=\"examples-2043\"><a href=\"#examples-2043\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_power_of_two(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_next_power_of_two(),+Some(2));%0Aassert_eq!(3u32.checked_next_power_of_two(),+Some(4));%0Aassert_eq!(u32::MAX.checked_next_power_of_two(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_next_power_of_two-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/32463\" title=\"Tracking issue for wrapping_next_power_of_two\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wrapping_next_power_of_two-5\" class=\"fn\">wrapping_next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wrapping_next_power_of_two</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32463\">#32463</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\nthe return value is wrapped to <code>0</code>.</p>\n<h5 id=\"examples-2044\"><a href=\"#examples-2044\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(wrapping_next_power_of_two)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.wrapping_next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_next_power_of_two(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_next_power_of_two(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(wrapping_next_power_of_two)%5D%0A%0Afn+main()+%7B%0Aassert_eq!(2u32.wrapping_next_power_of_two(),+2);%0Aassert_eq!(3u32.wrapping_next_power_of_two(),+4);%0Aassert_eq!(u32::MAX.wrapping_next_power_of_two(),+0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-19\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-2045\"><a href=\"#examples-2045\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-19\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-2046\"><a href=\"#examples-2046\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-19\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.u32.html#method.to_be_bytes\" title=\"method u32::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.to_le_bytes\" title=\"method u32::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-2047\"><a href=\"#examples-2047\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78%5D%0A++++%7D+else+%7B%0A++++++++%5B0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-19\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in big endian.</p>\n<h5 id=\"examples-2048\"><a href=\"#examples-2048\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-19\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in little endian.</p>\n<h5 id=\"examples-2049\"><a href=\"#examples-2049\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_le_bytes([<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_le_bytes(%5B0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-19\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its memory representation\nas a byte array in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.u32.html#method.from_be_bytes\" title=\"associated function u32::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.from_le_bytes\" title=\"associated function u32::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-2050\"><a href=\"#examples-2050\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78%5D%0A%7D+else+%7B%0A++++%5B0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-17\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MIN\" title=\"associated constant u32::MIN\"><code>u32::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-17\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MAX\" title=\"associated constant u32::MAX\"><code>u32::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.widening_mul-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.widening_mul-5\" class=\"fn\">widening_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the complete product <code>self * rhs</code> without the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>If you also need to add a carry to the wide result, then you want\n<a href=\"std/primitive.u32.html#method.carrying_mul\" title=\"method u32::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-2051\"><a href=\"#examples-2051\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.widening_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.widening_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.widening_mul(2),+(10,+0));%0Aassert_eq!(1_000_000_000u32.widening_mul(10),+(1410065408,+2));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul-5\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_mul-5\" class=\"fn\">carrying_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need the <code>carry</code>, then you can use <a href=\"std/primitive.u32.html#method.widening_mul\" title=\"method u32::widening_mul\"><code>Self::widening_mul</code></a> instead.</p>\n<h5 id=\"examples-2052\"><a href=\"#examples-2052\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">10</span>), (<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">0</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">1410065418</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.carrying_mul(u32::MAX, u32::MAX), (<span class=\"number\">0</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.carrying_mul(2,+0),+(10,+0));%0Aassert_eq!(5u32.carrying_mul(2,+10),+(20,+0));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+0),+(1410065408,+2));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+10),+(1410065418,+2));%0Aassert_eq!(u32::MAX.carrying_mul(u32::MAX,+u32::MAX),+(0,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This is the core operation needed for scalar multiplication when\nimplementing it for wider-than-native types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">fn </span>scalar_mul_eq(little_endian_digits: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u16&gt;, multiplicand: u16) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>carry = <span class=\"number\">0</span>;\n    <span class=\"kw\">for </span>d <span class=\"kw\">in </span>little_endian_digits.iter_mut() {\n        (<span class=\"kw-2\">*</span>d, carry) = d.carrying_mul(multiplicand, carry);\n    }\n    <span class=\"kw\">if </span>carry != <span class=\"number\">0 </span>{\n        little_endian_digits.push(carry);\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">30</span>, <span class=\"number\">60</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x87654321_u64 </span>* <span class=\"number\">0xFEED</span>, <span class=\"number\">0x86D3D159E38D</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0x4321</span>, <span class=\"number\">0x8765</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">0xFEED</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">0xE38D</span>, <span class=\"number\">0xD159</span>, <span class=\"number\">0x86D3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Afn+scalar_mul_eq(little_endian_digits:+%26mut+Vec%3Cu16%3E,+multiplicand:+u16)+%7B%0A++++let+mut+carry+=+0;%0A++++for+d+in+little_endian_digits.iter_mut()+%7B%0A++++++++(*d,+carry)+=+d.carrying_mul(multiplicand,+carry);%0A++++%7D%0A++++if+carry+!=+0+%7B%0A++++++++little_endian_digits.push(carry);%0A++++%7D%0A%7D%0A%0Alet+mut+v+=+vec!%5B10,+20%5D;%0Ascalar_mul_eq(%26mut+v,+3);%0Aassert_eq!(v,+%5B30,+60%5D);%0A%0Aassert_eq!(0x87654321_u64+*+0xFEED,+0x86D3D159E38D);%0Alet+mut+v+=+vec!%5B0x4321,+0x8765%5D;%0Ascalar_mul_eq(%26mut+v,+0xFEED);%0Aassert_eq!(v,+%5B0xE38D,+0xD159,+0x86D3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If <code>carry</code> is zero, this is similar to <a href=\"std/primitive.u32.html#method.overflowing_mul\" title=\"method u32::overflowing_mul\"><code>overflowing_mul</code></a>,\nexcept that it gives the value of the overflow instead of just whether one happened:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Alet+r+=+u8::carrying_mul(7,+13,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(7,+13));%0Alet+r+=+u8::carrying_mul(13,+42,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(13,+42));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>The value of the first field in the returned tuple matches what you’d get\nby combining the <a href=\"std/primitive.u32.html#method.wrapping_mul\" title=\"method u32::wrapping_mul\"><code>wrapping_mul</code></a> and\n<a href=\"std/primitive.u32.html#method.wrapping_add\" title=\"method u32::wrapping_add\"><code>wrapping_add</code></a> methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"number\">789_u16</span>.carrying_mul(<span class=\"number\">456</span>, <span class=\"number\">123</span>).<span class=\"number\">0</span>,\n    <span class=\"number\">789_u16</span>.wrapping_mul(<span class=\"number\">456</span>).wrapping_add(<span class=\"number\">123</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(%0A++++789_u16.carrying_mul(456,+123).0,%0A++++789_u16.wrapping_mul(456).wrapping_add(123),%0A);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1162\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-19\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-2053\"><a href=\"#examples-2053\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.midpoint(4),+2);%0Aassert_eq!(1u32.midpoint(4),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details>",0,"std::os::linux::raw::arch::nlink_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-u32-5\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1141\">source</a><a href=\"#impl-u32-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-20\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-20\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 0u32</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type.</p>\n<h5 id=\"examples-2054\"><a href=\"#examples-2054\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MIN, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MIN,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-20\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-20\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 4_294_967_295u32</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>32</sup> − 1).</p>\n<h5 id=\"examples-2055\"><a href=\"#examples-2055\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX, <span class=\"number\">4294967295</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX,+4294967295);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-18\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-18\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-2056\"><a href=\"#examples-2056\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::BITS, <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::BITS,+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-18\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> sign\nfollowed by digits.\nLeading and trailing whitespace represent an error.\nDigits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-378\"><a href=\"#panics-378\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-2057\"><a href=\"#examples-2057\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-18\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-2058\"><a href=\"#examples-2058\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b01001100u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b01001100u32;%0A%0Aassert_eq!(n.count_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-18\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-2059\"><a href=\"#examples-2059\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u32::MAX.count_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(u32::MAX.count_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-18\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.u32.html#method.ilog2\" title=\"method u32::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-2060\"><a href=\"#examples-2060\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = u32::MAX &gt;&gt; <span class=\"number\">2</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+u32::MAX+%3E%3E+2;%0A%0Aassert_eq!(n.leading_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-18\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-2061\"><a href=\"#examples-2061\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b0101000u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b0101000u32;%0A%0Aassert_eq!(n.trailing_zeros(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-18\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-2062\"><a href=\"#examples-2062\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = !(u32::MAX &gt;&gt; <span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+!(u32::MAX+%3E%3E+2);%0A%0Aassert_eq!(n.leading_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-18\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-2063\"><a href=\"#examples-2063\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b1010111u32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b1010111u32;%0A%0Aassert_eq!(n.trailing_ones(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-18\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-2064\"><a href=\"#examples-2064\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x10000b3u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xb301</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x10000b3u32;%0Alet+m+=+0xb301;%0A%0Aassert_eq!(n.rotate_left(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-18\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-2065\"><a href=\"#examples-2065\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xb301u32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x10000b3</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xb301u32;%0Alet+m+=+0x10000b3;%0A%0Aassert_eq!(n.rotate_right(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-18\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-2066\"><a href=\"#examples-2066\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x78563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x78563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-18\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-2067\"><a href=\"#examples-2067\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678u32</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x1e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0u32</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678u32;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x1e6a2c48);%0Aassert_eq!(0,+0u32.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-18\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-2068\"><a href=\"#examples-2068\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(u32::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-18\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-2069\"><a href=\"#examples-2069\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u32::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(u32::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(u32::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-18\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-2070\"><a href=\"#examples-2070\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-18\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-2071\"><a href=\"#examples-2071\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Au32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-18\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-2072\"><a href=\"#examples-2072\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(u32::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((u32::MAX+-+2).checked_add(1),+Some(u32::MAX+-+1));%0Aassert_eq!((u32::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-18\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-102\"><a href=\"#safety-102\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; u32::MAX</code> or <code>self + rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_add\" title=\"method u32::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_signed-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_signed-6\" class=\"fn\">checked_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with a signed integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-2073\"><a href=\"#examples-2073\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_add_signed(-<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).checked_add_signed(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_add_signed(2),+Some(3));%0Aassert_eq!(1u32.checked_add_signed(-2),+None);%0Aassert_eq!((u32::MAX+-+2).checked_add_signed(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-18\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-2074\"><a href=\"#examples-2074\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.checked_sub(1),+Some(0));%0Aassert_eq!(0u32.checked_sub(1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-18\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-103\"><a href=\"#safety-103\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; u32::MAX</code> or <code>self - rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_sub\" title=\"method u32::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-18\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-2075\"><a href=\"#examples-2075\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_mul(1),+Some(5));%0Aassert_eq!(u32::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-18\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-104\"><a href=\"#safety-104\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; u32::MAX</code> or <code>self * rhs &lt; u32::MIN</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_mul\" title=\"method u32::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-18\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-2076\"><a href=\"#examples-2076\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div(2),+Some(64));%0Aassert_eq!(1u32.checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-18\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-2077\"><a href=\"#examples-2077\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.checked_div_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.checked_div_euclid(2),+Some(64));%0Aassert_eq!(1u32.checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-18\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-2078\"><a href=\"#examples-2078\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem(2),+Some(1));%0Aassert_eq!(5u32.checked_rem(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-18\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-2079\"><a href=\"#examples-2079\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5u32.checked_rem_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-18\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-379\"><a href=\"#panics-379\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero, or if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-2080\"><a href=\"#examples-2080\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-18\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-380\"><a href=\"#panics-380\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"examples-2081\"><a href=\"#examples-2081\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-18\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-381\"><a href=\"#panics-381\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"example-32\"><a href=\"#example-32\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-18\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-2082\"><a href=\"#examples-2082\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-18\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-2083\"><a href=\"#examples-2083\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-18\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-2084\"><a href=\"#examples-2084\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-18\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.</p>\n<p>Note that negating any positive integer will overflow.</p>\n<h5 id=\"examples-2085\"><a href=\"#examples-2085\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.checked_neg(),+Some(0));%0Aassert_eq!(1u32.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-18\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-2086\"><a href=\"#examples-2086\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x10u32.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-18\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-105\"><a href=\"#safety-105\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shl\" title=\"method u32::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-18\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-2087\"><a href=\"#examples-2087\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.checked_shr(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10u32.checked_shr(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-18\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-106\"><a href=\"#safety-106\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.u32.html#method.checked_shr\" title=\"method u32::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-18\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-2088\"><a href=\"#examples-2088\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_pow(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">32</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_pow(5),+Some(32));%0Aassert_eq!(u32::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-18\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2089\"><a href=\"#examples-2089\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_add(<span class=\"number\">127</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_add(1),+101);%0Aassert_eq!(u32::MAX.saturating_add(127),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_signed-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_signed-6\" class=\"fn\">saturating_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with a signed integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2090\"><a href=\"#examples-2090\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.saturating_add_signed(-<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).saturating_add_signed(<span class=\"number\">4</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.saturating_add_signed(2),+3);%0Aassert_eq!(1u32.saturating_add_signed(-2),+0);%0Aassert_eq!((u32::MAX+-+2).saturating_add_signed(4),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-18\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating\nat the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2091\"><a href=\"#examples-2091\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.saturating_sub(<span class=\"number\">27</span>), <span class=\"number\">73</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13u32</span>.saturating_sub(<span class=\"number\">127</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.saturating_sub(27),+73);%0Aassert_eq!(13u32.saturating_sub(127),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-18\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2092\"><a href=\"#examples-2092\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.saturating_mul(<span class=\"number\">10</span>), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>((u32::MAX).saturating_mul(<span class=\"number\">10</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.saturating_mul(10),+20);%0Aassert_eq!((u32::MAX).saturating_mul(10),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-18\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2093\"><a href=\"#examples-2093\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.saturating_div(2),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1u32</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1u32.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-18\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-2094\"><a href=\"#examples-2094\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4u32</span>.saturating_pow(<span class=\"number\">3</span>), <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.saturating_pow(<span class=\"number\">2</span>), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(4u32.saturating_pow(3),+64);%0Aassert_eq!(u32::MAX.saturating_pow(2),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-18\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2095\"><a href=\"#examples-2095\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(<span class=\"number\">55</span>), <span class=\"number\">255</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u32</span>.wrapping_add(u32::MAX), <span class=\"number\">199</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(200u32.wrapping_add(55),+255);%0Aassert_eq!(200u32.wrapping_add(u32::MAX),+199);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_signed-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_signed-6\" class=\"fn\">wrapping_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with a signed integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2096\"><a href=\"#examples-2096\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_add_signed(-<span class=\"number\">2</span>), u32::MAX);\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).wrapping_add_signed(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_add_signed(2),+3);%0Aassert_eq!(1u32.wrapping_add_signed(-2),+u32::MAX);%0Aassert_eq!((u32::MAX+-+2).wrapping_add_signed(4),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-18\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2097\"><a href=\"#examples-2097\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(<span class=\"number\">100</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_sub(u32::MAX), <span class=\"number\">101</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_sub(100),+0);%0Aassert_eq!(100u32.wrapping_sub(u32::MAX),+101);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-18\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2098\"><a href=\"#examples-2098\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u8</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">25u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">44</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10u8.wrapping_mul(12),+120);%0Aassert_eq!(25u8.wrapping_mul(12),+44);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-18\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-382\"><a href=\"#panics-382\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2099\"><a href=\"#examples-2099\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-18\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.\nWrapped division on unsigned types is just normal division.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_div(rhs)</code>.</p>\n<h5 id=\"panics-383\"><a href=\"#panics-383\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2100\"><a href=\"#examples-2100\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_div_euclid(10),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-18\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.</p>\n<h5 id=\"panics-384\"><a href=\"#panics-384\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2101\"><a href=\"#examples-2101\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-18\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>.\nWrapped modulo calculation on unsigned types is\njust the regular remainder calculation.\nThere’s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.wrapping_rem(rhs)</code>.</p>\n<h5 id=\"panics-385\"><a href=\"#panics-385\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2102\"><a href=\"#examples-2102\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.wrapping_rem_euclid(10),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-18\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type.</p>\n<p>Since unsigned types do not have negative equivalents\nall applications of this function will wrap (except for <code>-0</code>).\nFor values smaller than the corresponding signed type’s maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to <code>MAX + 1 - (val - MAX - 1)</code> where\n<code>MAX</code> is the corresponding signed type’s maximum.</p>\n<h5 id=\"examples-2103\"><a href=\"#examples-2103\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_u32</span>.wrapping_neg(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_neg(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13_u32</span>.wrapping_neg(), (!<span class=\"number\">13</span>) + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42_u32</span>.wrapping_neg(), !(<span class=\"number\">42 </span>- <span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0_u32.wrapping_neg(),+0);%0Aassert_eq!(u32::MAX.wrapping_neg(),+1);%0Aassert_eq!(13_u32.wrapping_neg(),+(!13)+%2B+1);%0Aassert_eq!(42_u32.wrapping_neg(),+!(42+-+1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-18\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_left\" title=\"method u32::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-2104\"><a href=\"#examples-2104\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">7</span>), <span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.wrapping_shl(<span class=\"number\">128</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.wrapping_shl(7),+128);%0Aassert_eq!(1u32.wrapping_shl(128),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-18\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"std/primitive.u32.html#method.rotate_right\" title=\"method u32::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-2105\"><a href=\"#examples-2105\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">7</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u32</span>.wrapping_shr(<span class=\"number\">128</span>), <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(128u32.wrapping_shr(7),+1);%0Aassert_eq!(128u32.wrapping_shr(128),+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-18\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-2106\"><a href=\"#examples-2106\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_pow(<span class=\"number\">5</span>), <span class=\"number\">243</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.wrapping_pow(<span class=\"number\">6</span>), <span class=\"number\">217</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.wrapping_pow(5),+243);%0Aassert_eq!(3u8.wrapping_pow(6),+217);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-18\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-2107\"><a href=\"#examples-2107\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.overflowing_add(<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_add(2),+(7,+false));%0Aassert_eq!(u32::MAX.overflowing_add(1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-18\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple containing\nthe sum and the output carry.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns an output integer and a carry-out bit. This allows\nchaining together multiple additions to create a wider addition, and\ncan be useful for bignum addition.</p>\n<p>This can be thought of as a 32-bit “full adder”, in the electronics sense.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.u32.html#method.overflowing_add\" title=\"method u32::overflowing_add\"><code>overflowing_add</code></a>, and the output carry is\nequal to the overflow flag. Note that although carry and overflow\nflags are similar for unsigned integers, they are different for\nsigned integers.</p>\n<h5 id=\"examples-2108\"><a href=\"#examples-2108\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    3  MAX    (a = 3 × 2^32 + 2^32 - 1)\n// +  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    9    6    (sum = 9 × 2^32 + 6)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">3</span>, u32::MAX);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(sum1, carry2) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(carry2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">9</span>, <span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++3++MAX++++(a+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A//+%2B++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++9++++6++++(sum+=+9+%C3%97+2%5E32+%2B+6)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(3,+u32::MAX);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+carry0+=+false;%0A%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0Alet+(sum1,+carry2)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(carry2,+false);%0A%0Aassert_eq!((sum1,+sum0),+(9,+6));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_signed-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_signed-6\" class=\"fn\">overflowing_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-2109\"><a href=\"#examples-2109\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.overflowing_add_signed(-<span class=\"number\">2</span>), (u32::MAX, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>((u32::MAX - <span class=\"number\">2</span>).overflowing_add_signed(<span class=\"number\">4</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1u32.overflowing_add_signed(2),+(3,+false));%0Aassert_eq!(1u32.overflowing_add_signed(-2),+(u32::MAX,+true));%0Aassert_eq!((u32::MAX+-+2).overflowing_add_signed(4),+(1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-18\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-2110\"><a href=\"#examples-2110\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_sub(<span class=\"number\">1</span>), (u32::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_sub(2),+(3,+false));%0Aassert_eq!(0u32.overflowing_sub(1),+(u32::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-18\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple\ncontaining the difference and the output borrow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns an output\ninteger and a borrow-out bit. This allows chaining together multiple\nsubtractions to create a wider subtraction, and can be useful for\nbignum subtraction.</p>\n<h5 id=\"examples-2111\"><a href=\"#examples-2111\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    9    6    (a = 9 × 2^32 + 6)\n// -  5    7    (b = 5 × 2^32 + 7)\n// ---------\n//    3  MAX    (diff = 3 × 2^32 + 2^32 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u32, u32) = (<span class=\"number\">9</span>, <span class=\"number\">6</span>);\n<span class=\"kw\">let </span>(b1, b0): (u32, u32) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(borrow2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">3</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A%0A//++++9++++6++++(a+=+9+%C3%97+2%5E32+%2B+6)%0A//+-++5++++7++++(b+=+5+%C3%97+2%5E32+%2B+7)%0A//+---------%0A//++++3++MAX++++(diff+=+3+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(u32,+u32)+=+(9,+6);%0Alet+(b1,+b0):+(u32,+u32)+=+(5,+7);%0Alet+borrow0+=+false;%0A%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0Alet+(diff1,+borrow2)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(borrow2,+false);%0A%0Aassert_eq!((diff1,+diff0),+(3,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-18\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-2112\"><a href=\"#examples-2112\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u32</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100u32.abs_diff(80),+20u32);%0Aassert_eq!(100u32.abs_diff(110),+10u32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-18\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-2113\"><a href=\"#examples-2113\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000u32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-18\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.</p>\n<h5 id=\"panics-386\"><a href=\"#panics-386\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2114\"><a href=\"#examples-2114\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-18\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.overflowing_div(rhs)</code>.</p>\n<h5 id=\"panics-387\"><a href=\"#panics-387\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2115\"><a href=\"#examples-2115\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_div_euclid(2),+(2,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-18\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.</p>\n<h5 id=\"panics-388\"><a href=\"#panics-388\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2116\"><a href=\"#examples-2116\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-18\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by Euclidean division.</p>\n<p>Returns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to <code>self.overflowing_rem(rhs)</code>.</p>\n<h5 id=\"panics-389\"><a href=\"#panics-389\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2117\"><a href=\"#examples-2117\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.overflowing_rem_euclid(2),+(1,+false));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-18\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self in an overflowing fashion.</p>\n<p>Returns <code>!self + 1</code> using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.</p>\n<h5 id=\"examples-2118\"><a href=\"#examples-2118\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.overflowing_neg(), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.overflowing_neg(), (-<span class=\"number\">2i32 </span><span class=\"kw\">as </span>u32, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.overflowing_neg(),+(0,+false));%0Aassert_eq!(2u32.overflowing_neg(),+(-2i32+as+u32,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-18\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-2119\"><a href=\"#examples-2119\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u32</span>.overflowing_shl(<span class=\"number\">132</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1u32.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1u32.overflowing_shl(132),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-18\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-2120\"><a href=\"#examples-2120\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u32</span>.overflowing_shr(<span class=\"number\">132</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10u32.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10u32.overflowing_shr(132),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-18\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-2121\"><a href=\"#examples-2121\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.overflowing_pow(<span class=\"number\">5</span>), (<span class=\"number\">243</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.overflowing_pow(<span class=\"number\">6</span>), (<span class=\"number\">217</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3u32.overflowing_pow(5),+(243,+false));%0Aassert_eq!(3u8.overflowing_pow(6),+(217,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-18\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-2122\"><a href=\"#examples-2122\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-18\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-2123\"><a href=\"#examples-2123\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u32</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10u32.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-20\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Performs Euclidean division.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self / rhs</code>.</p>\n<h5 id=\"panics-390\"><a href=\"#panics-390\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2124\"><a href=\"#examples-2124\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.div_euclid(<span class=\"number\">4</span>), <span class=\"number\">1</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.div_euclid(4),+1);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-20\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least remainder of <code>self (mod rhs)</code>.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self % rhs</code>.</p>\n<h5 id=\"panics-391\"><a href=\"#panics-391\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-2125\"><a href=\"#examples-2125\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u32</span>.rem_euclid(<span class=\"number\">4</span>), <span class=\"number\">3</span>); <span class=\"comment\">// or any other integer type</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7u32.rem_euclid(4),+3);+//+or+any+other+integer+type%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-18\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-18\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<p>This is the same as performing <code>self / rhs</code> for all unsigned integers.</p>\n<h5 id=\"panics-392\"><a href=\"#panics-392\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-2126\"><a href=\"#examples-2126\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_floor(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_floor(4),+1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-18\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-393\"><a href=\"#panics-393\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-60\"><a href=\"#overflow-behavior-60\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-2127\"><a href=\"#examples-2127\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u32</span>.div_ceil(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(7_u32.div_ceil(4),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-18\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>.</p>\n<h5 id=\"panics-394\"><a href=\"#panics-394\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-61\"><a href=\"#overflow-behavior-61\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-2128\"><a href=\"#examples-2128\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.next_multiple_of(8),+16);%0Aassert_eq!(23_u32.next_multiple_of(8),+24);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-18\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the\noperation would result in overflow.</p>\n<h5 id=\"examples-2129\"><a href=\"#examples-2129\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_u32</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(16_u32.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_u32.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(1_u32.checked_next_multiple_of(0),+None);%0Aassert_eq!(u32::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_power_of_two-6\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.</p>\n<h5 id=\"examples-2130\"><a href=\"#examples-2130\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">16u32</span>.is_power_of_two());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10u32</span>.is_power_of_two());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(16u32.is_power_of_two());%0Aassert!(!10u32.is_power_of_two());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_two-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.next_power_of_two-6\" class=\"fn\">next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.</p>\n<p>When return value overflows (i.e., <code>self &gt; (1 &lt;&lt; (N-1))</code> for type\n<code>uN</code>), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which method can return 0).</p>\n<h5 id=\"examples-2131\"><a href=\"#examples-2131\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.next_power_of_two(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.next_power_of_two(),+2);%0Aassert_eq!(3u32.next_power_of_two(),+4);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_power_of_two-6\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\n<code>None</code> is returned, otherwise the power of two is wrapped in <code>Some</code>.</p>\n<h5 id=\"examples-2132\"><a href=\"#examples-2132\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.checked_next_power_of_two(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2u32.checked_next_power_of_two(),+Some(2));%0Aassert_eq!(3u32.checked_next_power_of_two(),+Some(4));%0Aassert_eq!(u32::MAX.checked_next_power_of_two(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_next_power_of_two-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/32463\" title=\"Tracking issue for wrapping_next_power_of_two\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wrapping_next_power_of_two-6\" class=\"fn\">wrapping_next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wrapping_next_power_of_two</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32463\">#32463</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\nthe return value is wrapped to <code>0</code>.</p>\n<h5 id=\"examples-2133\"><a href=\"#examples-2133\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(wrapping_next_power_of_two)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u32</span>.wrapping_next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u32</span>.wrapping_next_power_of_two(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(u32::MAX.wrapping_next_power_of_two(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(wrapping_next_power_of_two)%5D%0A%0Afn+main()+%7B%0Aassert_eq!(2u32.wrapping_next_power_of_two(),+2);%0Aassert_eq!(3u32.wrapping_next_power_of_two(),+4);%0Aassert_eq!(u32::MAX.wrapping_next_power_of_two(),+0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-20\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-2134\"><a href=\"#examples-2134\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-20\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-2135\"><a href=\"#examples-2135\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-20\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.u32.html#method.to_be_bytes\" title=\"method u32::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.to_le_bytes\" title=\"method u32::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-2136\"><a href=\"#examples-2136\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678u32</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678u32.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78%5D%0A++++%7D+else+%7B%0A++++++++%5B0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-20\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in big endian.</p>\n<h5 id=\"examples-2137\"><a href=\"#examples-2137\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-20\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its representation\nas a byte array in little endian.</p>\n<h5 id=\"examples-2138\"><a href=\"#examples-2138\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_le_bytes([<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_le_bytes(%5B0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-20\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Create a native endian integer value from its memory representation\nas a byte array in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.u32.html#method.from_be_bytes\" title=\"associated function u32::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.u32.html#method.from_le_bytes\" title=\"associated function u32::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-2139\"><a href=\"#examples-2139\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u32::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+u32::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78%5D%0A%7D+else+%7B%0A++++%5B0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_u32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u32::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_u32(input:+%26mut+%26%5Bu8%5D)+-%3E+u32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Cu32%3E());%0A++++*input+=+rest;%0A++++u32::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-18\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MIN\" title=\"associated constant u32::MIN\"><code>u32::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1142-1160\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-18\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.u32.html#associatedconstant.MAX\" title=\"associated constant u32::MAX\"><code>u32::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.widening_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.widening_mul-6\" class=\"fn\">widening_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the complete product <code>self * rhs</code> without the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>If you also need to add a carry to the wide result, then you want\n<a href=\"std/primitive.u32.html#method.carrying_mul\" title=\"method u32::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-2140\"><a href=\"#examples-2140\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.widening_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.widening_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.widening_mul(2),+(10,+0));%0Aassert_eq!(1_000_000_000u32.widening_mul(10),+(1410065408,+2));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul-6\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_mul-6\" class=\"fn\">carrying_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, carry: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need the <code>carry</code>, then you can use <a href=\"std/primitive.u32.html#method.widening_mul\" title=\"method u32::widening_mul\"><code>Self::widening_mul</code></a> instead.</p>\n<h5 id=\"examples-2141\"><a href=\"#examples-2141\">Examples</a></h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">10</span>), (<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">0</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">1410065418</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(u32::MAX.carrying_mul(u32::MAX, u32::MAX), (<span class=\"number\">0</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(5u32.carrying_mul(2,+0),+(10,+0));%0Aassert_eq!(5u32.carrying_mul(2,+10),+(20,+0));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+0),+(1410065408,+2));%0Aassert_eq!(1_000_000_000u32.carrying_mul(10,+10),+(1410065418,+2));%0Aassert_eq!(u32::MAX.carrying_mul(u32::MAX,+u32::MAX),+(0,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This is the core operation needed for scalar multiplication when\nimplementing it for wider-than-native types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">fn </span>scalar_mul_eq(little_endian_digits: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u16&gt;, multiplicand: u16) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>carry = <span class=\"number\">0</span>;\n    <span class=\"kw\">for </span>d <span class=\"kw\">in </span>little_endian_digits.iter_mut() {\n        (<span class=\"kw-2\">*</span>d, carry) = d.carrying_mul(multiplicand, carry);\n    }\n    <span class=\"kw\">if </span>carry != <span class=\"number\">0 </span>{\n        little_endian_digits.push(carry);\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">30</span>, <span class=\"number\">60</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x87654321_u64 </span>* <span class=\"number\">0xFEED</span>, <span class=\"number\">0x86D3D159E38D</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0x4321</span>, <span class=\"number\">0x8765</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">0xFEED</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">0xE38D</span>, <span class=\"number\">0xD159</span>, <span class=\"number\">0x86D3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Afn+scalar_mul_eq(little_endian_digits:+%26mut+Vec%3Cu16%3E,+multiplicand:+u16)+%7B%0A++++let+mut+carry+=+0;%0A++++for+d+in+little_endian_digits.iter_mut()+%7B%0A++++++++(*d,+carry)+=+d.carrying_mul(multiplicand,+carry);%0A++++%7D%0A++++if+carry+!=+0+%7B%0A++++++++little_endian_digits.push(carry);%0A++++%7D%0A%7D%0A%0Alet+mut+v+=+vec!%5B10,+20%5D;%0Ascalar_mul_eq(%26mut+v,+3);%0Aassert_eq!(v,+%5B30,+60%5D);%0A%0Aassert_eq!(0x87654321_u64+*+0xFEED,+0x86D3D159E38D);%0Alet+mut+v+=+vec!%5B0x4321,+0x8765%5D;%0Ascalar_mul_eq(%26mut+v,+0xFEED);%0Aassert_eq!(v,+%5B0xE38D,+0xD159,+0x86D3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If <code>carry</code> is zero, this is similar to <a href=\"std/primitive.u32.html#method.overflowing_mul\" title=\"method u32::overflowing_mul\"><code>overflowing_mul</code></a>,\nexcept that it gives the value of the overflow instead of just whether one happened:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Alet+r+=+u8::carrying_mul(7,+13,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(7,+13));%0Alet+r+=+u8::carrying_mul(13,+42,+0);%0Aassert_eq!((r.0,+r.1+!=+0),+u8::overflowing_mul(13,+42));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>The value of the first field in the returned tuple matches what you’d get\nby combining the <a href=\"std/primitive.u32.html#method.wrapping_mul\" title=\"method u32::wrapping_mul\"><code>wrapping_mul</code></a> and\n<a href=\"std/primitive.u32.html#method.wrapping_add\" title=\"method u32::wrapping_add\"><code>wrapping_add</code></a> methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"number\">789_u16</span>.carrying_mul(<span class=\"number\">456</span>, <span class=\"number\">123</span>).<span class=\"number\">0</span>,\n    <span class=\"number\">789_u16</span>.wrapping_mul(<span class=\"number\">456</span>).wrapping_add(<span class=\"number\">123</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0Afn+main()+%7B%0Aassert_eq!(%0A++++789_u16.carrying_mul(456,+123).0,%0A++++789_u16.wrapping_mul(456).wrapping_add(123),%0A);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-20\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1162\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-20\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-2142\"><a href=\"#examples-2142\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0u32.midpoint(4),+2);%0Aassert_eq!(1u32.midpoint(4),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details>",0,"std::os::macos::raw::mode_t"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()