(function() {var type_impls = {
"std":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-20\"><a href=\"#panics-20\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-21\"><a href=\"#panics-21\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-Binary-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#179\">source</a><a href=\"#method.fmt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-Binary-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Binary.html\" title=\"trait std::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#179\">source</a><a href=\"#method.fmt-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#91\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#91\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i8</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-204\"><a href=\"#examples-204\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i8::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::from(true),+1);%0Aassert_eq!(i8::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#91\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#91\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i8</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-205\"><a href=\"#examples-205\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i8::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::from(true),+1);%0Aassert_eq!(i8::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI8</code> into an <code>i8</code></p>\n</div></details></div></details>","From","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI8</code> into an <code>i8</code></p>\n</div></details></div></details>","From","std::ffi::c_schar"],["<section id=\"impl-Copy-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","Copy","std::ffi::c_char"],["<section id=\"impl-Copy-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","Copy","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-13\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-14\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#316\">source</a></span><a href=\"#impl-TryFrom%3Cu32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#316\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#316\">source</a></span><a href=\"#impl-TryFrom%3Cu32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#316\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#314\">source</a></span><a href=\"#impl-TryFrom%3Cu8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#314\">source</a><a href=\"#method.try_from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#314\">source</a></span><a href=\"#impl-TryFrom%3Cu8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#314\">source</a><a href=\"#method.try_from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#315\">source</a></span><a href=\"#impl-TryFrom%3Cu16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#315\">source</a><a href=\"#method.try_from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#315\">source</a></span><a href=\"#impl-TryFrom%3Cu16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#315\">source</a><a href=\"#method.try_from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#309\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#309\">source</a><a href=\"#method.try_from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#309\">source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#309\">source</a><a href=\"#method.try_from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#308\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#308\">source</a><a href=\"#method.try_from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#308\">source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#308\">source</a><a href=\"#method.try_from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-13\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-14\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#310\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#310\">source</a><a href=\"#method.try_from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-16\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#310\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#310\">source</a><a href=\"#method.try_from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-17\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-18\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-19\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#396\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#396\">source</a><a href=\"#method.try_from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-20\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#396\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#396\">source</a><a href=\"#method.try_from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-21\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"std/num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#169\">source</a></span><a href=\"#impl-Default-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#169\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#169\">source</a></span><a href=\"#impl-Default-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#169\">source</a><a href=\"#method.default-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-LowerHex-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#179\">source</a><a href=\"#method.fmt-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-LowerHex-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerHex.html\" title=\"trait std::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#179\">source</a><a href=\"#method.fmt-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-16\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-17\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-18\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","std::ffi::c_schar"],["<section id=\"impl-ConstParamTy-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","ConstParamTy","std::ffi::c_char"],["<section id=\"impl-ConstParamTy-for-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","ConstParamTy","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-19\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-20\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-21\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-22\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-22\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-23\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-23\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-24\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-24\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-25\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-25\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-26\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-26\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-27\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-27\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-28\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-28\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-29\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-29\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-30\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-30\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-31\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-31\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-32\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-32\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-33\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-33\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-34\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-34\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-35\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-35\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-36\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-36\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-37\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-37\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-38\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-38\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-39\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-39\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-40\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-40\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-41\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-41\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-42\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-42\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-43\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-43\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-44\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-44\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-45\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-45\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-46\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-46\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-47\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-47\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-48\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-48\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-49\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-49\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-50\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-50\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-51\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-51\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-52\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-52\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-53\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-53\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-54\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-54\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-55\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-55\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-56\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-56\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-57\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-57\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-58\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-58\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-59\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-59\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-60\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-60\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-61\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-61\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-62\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-62\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-63\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-63\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-64\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-64\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-65\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-65\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-66\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-66\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-67\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-67\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-68\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-68\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-69\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-69\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-70\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-70\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-UpperHex-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#179\">source</a><a href=\"#method.fmt-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-UpperHex-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#179\">source</a><a href=\"#method.fmt-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","std::ffi::c_schar"],["<section id=\"impl-TrustedStep-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","TrustedStep","std::ffi::c_char"],["<section id=\"impl-TrustedStep-for-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.TrustedStep.html\" title=\"trait std::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","TrustedStep","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#906\">source</a><a href=\"#impl-SimdElement-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#906\">source</a><a href=\"#impl-SimdElement-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, end: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Step.html\" title=\"trait std::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-1\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-1\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, end: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-71\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-71\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-72\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-72\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-73\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-73\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-74\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-74\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","std::ffi::c_schar"],["<section id=\"impl-MaskElement-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#78\">source</a><a href=\"#impl-MaskElement-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","MaskElement","std::ffi::c_char"],["<section id=\"impl-MaskElement-for-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#78\">source</a><a href=\"#impl-MaskElement-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","MaskElement","std::ffi::c_schar"],["<section id=\"impl-StructuralEq-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","StructuralEq","std::ffi::c_char"],["<section id=\"impl-StructuralEq-for-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralEq.html\" title=\"trait std::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","StructuralEq","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-22\"><a href=\"#panics-22\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-75\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-75\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-23\"><a href=\"#panics-23\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-76\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-76\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-77\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-77\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-78\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-78\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","std::ffi::c_schar"],["<section id=\"impl-Eq-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","Eq","std::ffi::c_char"],["<section id=\"impl-Eq-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","Eq","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-79\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-79\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-80\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-80\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-81\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-81\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-82\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-82\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-83\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-83\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-84\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-84\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"std/num/struct.NonZeroI8.html\" title=\"struct std::num::NonZeroI8\">NonZeroI8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-85\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-85\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-86\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-86\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-87\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-87\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-88\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-88\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-89\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-89\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-90\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-90\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.LowerExp.html\" title=\"trait std::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","std::ffi::c_schar"],["<section id=\"impl-SimdCast-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#18\">source</a><a href=\"#impl-SimdCast-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","SimdCast","std::ffi::c_char"],["<section id=\"impl-SimdCast-for-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#18\">source</a><a href=\"#impl-SimdCast-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","SimdCast","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-91\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-91\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-92\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-92\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-93\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-93\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-94\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-94\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-95\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-95\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-96\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-96\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-97\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-97\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-98\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-98\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-99\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-99\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-100\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-100\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-101\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-101\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-102\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-102\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-103\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-103\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-104\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-104\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-105\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-105\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-106\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-106\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-107\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-107\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-108\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-108\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-109\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-109\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-110\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-110\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-111\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-111\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-112\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-112\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-113\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-113\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-114\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-114\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-115\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-115\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-116\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-116\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-117\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-117\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-118\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-118\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-119\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-119\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-120\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-120\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-121\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-121\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-122\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-122\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-123\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-123\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-124\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-124\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-125\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-125\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-126\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-126\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-127\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-127\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-128\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-128\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-129\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-129\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-38\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-38\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-130\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-130\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-39\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-39\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-131\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-131\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-40\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-40\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-132\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-132\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-41\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-41\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-133\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-133\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-134\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-134\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-135\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-135\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-136\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-136\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-137\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-137\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-46\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-46\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-138\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-138\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-47\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-47\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a> as <a class=\"trait\" href=\"std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.UpperExp.html\" title=\"trait std::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-Octal-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#179\">source</a><a href=\"#method.fmt-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-Octal-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/fmt/trait.Octal.html\" title=\"trait std::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#179\">source</a><a href=\"#method.fmt-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/str/trait.FromStr.html\" title=\"trait std::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","std::ffi::c_schar"],["<section id=\"impl-StructuralPartialEq-for-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","StructuralPartialEq","std::ffi::c_char"],["<section id=\"impl-StructuralPartialEq-for-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section>","StructuralPartialEq","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci8%3E-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci8%3E-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci8%3E-for-i8-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci8%3E-for-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","std::ffi::c_schar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i8\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#288\">source</a><a href=\"#impl-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a> = -128i8</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>7</sup>).</p>\n<h5 id=\"examples-206\"><a href=\"#examples-206\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::MIN, -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::MIN,+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a> = 127i8</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>7</sup> − 1).</p>\n<h5 id=\"examples-207\"><a href=\"#examples-207\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::MAX, <span class=\"number\">127</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::MAX,+127);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 8u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-208\"><a href=\"#examples-208\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::BITS, <span class=\"number\">8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::BITS,+8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-24\"><a href=\"#panics-24\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-209\"><a href=\"#examples-209\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-210\"><a href=\"#examples-210\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i8;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-211\"><a href=\"#examples-211\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.i8.html#method.ilog2\" title=\"method i8::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-212\"><a href=\"#examples-212\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i8;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-213\"><a href=\"#examples-213\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i8;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-214\"><a href=\"#examples-214\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i8;%0A%0Aassert_eq!(n.leading_ones(),+8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-215\"><a href=\"#examples-215\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i8;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-216\"><a href=\"#examples-216\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">0x7ei8</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">2</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-0x7ei8;%0Alet+m+=+0xa;%0A%0Aassert_eq!(n.rotate_left(2),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-217\"><a href=\"#examples-217\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xai8</span>;\n<span class=\"kw\">let </span>m = -<span class=\"number\">0x7e</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">2</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xai8;%0Alet+m+=+-0x7e;%0A%0Aassert_eq!(n.rotate_right(2),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-218\"><a href=\"#examples-218\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12i8</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12i8;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x12);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-219\"><a href=\"#examples-219\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12i8</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i8</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12i8;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x48);%0Aassert_eq!(0,+0i8.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-220\"><a href=\"#examples-220\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai8</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i8::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i8::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai8;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i8::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i8::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-221\"><a href=\"#examples-221\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai8</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i8::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i8::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai8;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i8::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i8::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-222\"><a href=\"#examples-222\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai8</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai8;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-223\"><a href=\"#examples-223\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai8</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai8;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-224\"><a href=\"#examples-224\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i8::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i8::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i8::MAX+-+2).checked_add(1),+Some(i8::MAX+-+1));%0Aassert_eq!((i8::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-10\"><a href=\"#safety-10\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i8::MAX</code> or <code>self + rhs &lt; i8::MIN</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_add\" title=\"method i8::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-225\"><a href=\"#examples-225\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i8::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-226\"><a href=\"#examples-226\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i8::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i8::MIN+%2B+2).checked_sub(1),+Some(i8::MIN+%2B+1));%0Aassert_eq!((i8::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-11\"><a href=\"#safety-11\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i8::MAX</code> or <code>self - rhs &lt; i8::MIN</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_sub\" title=\"method i8::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-227\"><a href=\"#examples-227\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i8::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-228\"><a href=\"#examples-228\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i8::MAX));\n<span class=\"macro\">assert_eq!</span>(i8::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::MAX.checked_mul(1),+Some(i8::MAX));%0Aassert_eq!(i8::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-12\"><a href=\"#safety-12\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i8::MAX</code> or <code>self * rhs &lt; i8::MIN</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_mul\" title=\"method i8::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-229\"><a href=\"#examples-229\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">127</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i8</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i8::MIN+%2B+1).checked_div(-1),+Some(127));%0Aassert_eq!(i8::MIN.checked_div(-1),+None);%0Aassert_eq!((1i8).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-230\"><a href=\"#examples-230\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">127</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i8</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i8::MIN+%2B+1).checked_div_euclid(-1),+Some(127));%0Aassert_eq!(i8::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i8).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-231\"><a href=\"#examples-231\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.checked_rem(2),+Some(1));%0Aassert_eq!(5i8.checked_rem(0),+None);%0Aassert_eq!(i8::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-232\"><a href=\"#examples-232\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i8.checked_rem_euclid(0),+None);%0Aassert_eq!(i8::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-233\"><a href=\"#examples-233\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.checked_neg(),+Some(-5));%0Aassert_eq!(i8::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-234\"><a href=\"#examples-234\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i8</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i8</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i8.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i8.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-13\"><a href=\"#safety-13\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_shl\" title=\"method i8::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-235\"><a href=\"#examples-235\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i8</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i8</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i8.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i8.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-14\"><a href=\"#safety-14\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_shr\" title=\"method i8::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-236\"><a href=\"#examples-236\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i8</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i8).checked_abs(),+Some(5));%0Aassert_eq!(i8::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-237\"><a href=\"#examples-237\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i8</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i8.checked_pow(2),+Some(64));%0Aassert_eq!(i8::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-238\"><a href=\"#examples-238\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-239\"><a href=\"#examples-239\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_add(<span class=\"number\">100</span>), i8::MAX);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_add(-<span class=\"number\">1</span>), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_add(1),+101);%0Aassert_eq!(i8::MAX.saturating_add(100),+i8::MAX);%0Aassert_eq!(i8::MIN.saturating_add(-1),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-240\"><a href=\"#examples-240\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.saturating_add_unsigned(2),+3);%0Aassert_eq!(i8::MAX.saturating_add_unsigned(100),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-241\"><a href=\"#examples-241\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_sub(<span class=\"number\">100</span>), i8::MIN);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_sub(-<span class=\"number\">1</span>), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_sub(127),+-27);%0Aassert_eq!(i8::MIN.saturating_sub(100),+i8::MIN);%0Aassert_eq!(i8::MAX.saturating_sub(-1),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-242\"><a href=\"#examples-242\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i8::MIN.saturating_sub_unsigned(100),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-243\"><a href=\"#examples-243\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_neg(), i8::MAX);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_neg(), i8::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_neg(),+-100);%0Aassert_eq!((-100i8).saturating_neg(),+100);%0Aassert_eq!(i8::MIN.saturating_neg(),+i8::MAX);%0Aassert_eq!(i8::MAX.saturating_neg(),+i8::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-244\"><a href=\"#examples-244\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_abs(), i8::MAX);\n<span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">1</span>).saturating_abs(), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_abs(),+100);%0Aassert_eq!((-100i8).saturating_abs(),+100);%0Aassert_eq!(i8::MIN.saturating_abs(),+i8::MAX);%0Aassert_eq!((i8::MIN+%2B+1).saturating_abs(),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-245\"><a href=\"#examples-245\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_mul(<span class=\"number\">10</span>), i8::MAX);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_mul(<span class=\"number\">10</span>), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.saturating_mul(12),+120);%0Aassert_eq!(i8::MAX.saturating_mul(10),+i8::MAX);%0Aassert_eq!(i8::MIN.saturating_mul(10),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-246\"><a href=\"#examples-246\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_div(-<span class=\"number\">1</span>), i8::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_div(-<span class=\"number\">1</span>), i8::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.saturating_div(2),+2);%0Aassert_eq!(i8::MAX.saturating_div(-1),+i8::MIN+%2B+1);%0Aassert_eq!(i8::MIN.saturating_div(-1),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i8</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i8.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-247\"><a href=\"#examples-247\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i8</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_pow(<span class=\"number\">2</span>), i8::MAX);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_pow(<span class=\"number\">3</span>), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i8).saturating_pow(3),+-64);%0Aassert_eq!(i8::MIN.saturating_pow(2),+i8::MAX);%0Aassert_eq!(i8::MIN.saturating_pow(3),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-248\"><a href=\"#examples-248\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.wrapping_add(<span class=\"number\">2</span>), i8::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_add(27),+127);%0Aassert_eq!(i8::MAX.wrapping_add(2),+i8::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-249\"><a href=\"#examples-249\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i8::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i8::MAX.wrapping_add_unsigned(2),+i8::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-250\"><a href=\"#examples-250\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i8</span>).wrapping_sub(i8::MAX), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i8.wrapping_sub(127),+-127);%0Aassert_eq!((-2i8).wrapping_sub(i8::MAX),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-251\"><a href=\"#examples-251\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i8</span>).wrapping_sub_unsigned(u8::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i8.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i8).wrapping_sub_unsigned(u8::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-252\"><a href=\"#examples-252\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-25\"><a href=\"#panics-25\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-253\"><a href=\"#examples-253\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-26\"><a href=\"#panics-26\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-254\"><a href=\"#examples-254\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-27\"><a href=\"#panics-27\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-255\"><a href=\"#examples-255\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-28\"><a href=\"#panics-28\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-256\"><a href=\"#examples-256\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-257\"><a href=\"#examples-257\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.wrapping_neg(), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_neg(),+-100);%0Aassert_eq!(i8::MIN.wrapping_neg(),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"std/primitive.i8.html#method.rotate_left\" title=\"method i8::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-258\"><a href=\"#examples-258\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i8</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i8</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i8).wrapping_shl(7),+-128);%0Aassert_eq!((-1i8).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"std/primitive.i8.html#method.rotate_right\" title=\"method i8::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-259\"><a href=\"#examples-259\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i8).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-260\"><a href=\"#examples-260\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.wrapping_abs(), i8::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_abs(),+100);%0Aassert_eq!((-100i8).wrapping_abs(),+100);%0Aassert_eq!(i8::MIN.wrapping_abs(),+i8::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-261\"><a href=\"#examples-261\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.unsigned_abs(), <span class=\"number\">100u8</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).unsigned_abs(), <span class=\"number\">100u8</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.unsigned_abs(),+100u8);%0Aassert_eq!((-100i8).unsigned_abs(),+100u8);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-262\"><a href=\"#examples-262\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i8.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-263\"><a href=\"#examples-263\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MAX.overflowing_add(<span class=\"number\">1</span>), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_add(2),+(7,+false));%0Aassert_eq!(i8::MAX.overflowing_add(1),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"std/primitive.u8.html#method.carrying_add\" title=\"method u8::carrying_add\"><code>u8::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.i8.html#method.overflowing_add\" title=\"method i8::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-264\"><a href=\"#examples-264\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^8 + 2^8 - 1)\n// + -5    9    (b = -5 × 2^8 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^8 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i8, u8) = (<span class=\"number\">10</span>, u8::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i8, u8) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u8::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i8::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E8+%2B+2%5E8+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E8+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E8+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i8,+u8)+=+(10,+u8::MAX);%0Alet+(b1,+b0):+(i8,+u8)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u8::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i8::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-265\"><a href=\"#examples-265\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN).overflowing_add_unsigned(u8::MAX), (i8::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i8::MIN).overflowing_add_unsigned(u8::MAX),+(i8::MAX,+false));%0Aassert_eq!((i8::MAX+-+2).overflowing_add_unsigned(3),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-266\"><a href=\"#examples-266\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_sub(<span class=\"number\">1</span>), (i8::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i8::MIN.overflowing_sub(1),+(i8::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"std/primitive.u8.html#method.borrowing_sub\" title=\"method u8::borrowing_sub\"><code>u8::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"std/primitive.i8.html#method.overflowing_sub\" title=\"method i8::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-267\"><a href=\"#examples-267\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^8 + 8)\n// - -5    9    (b = -5 × 2^8 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^8 + 2^8 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i8, u8) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i8, u8) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u8::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i8::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u8::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E8+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E8+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E8+%2B+2%5E8+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i8,+u8)+=+(6,+8);%0Alet+(b1,+b0):+(i8,+u8)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u8::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i8::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u8::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-268\"><a href=\"#examples-268\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MAX).overflowing_sub_unsigned(u8::MAX), (i8::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i8::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i8::MAX).overflowing_sub_unsigned(u8::MAX),+(i8::MIN,+false));%0Aassert_eq!((i8::MIN+%2B+2).overflowing_sub_unsigned(3),+(i8::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-269\"><a href=\"#examples-269\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-29\"><a href=\"#panics-29\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-270\"><a href=\"#examples-270\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_div(-<span class=\"number\">1</span>), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_div(2),+(2,+false));%0Aassert_eq!(i8::MIN.overflowing_div(-1),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-30\"><a href=\"#panics-30\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-271\"><a href=\"#examples-271\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i8::MIN.overflowing_div_euclid(-1),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-31\"><a href=\"#panics-31\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-272\"><a href=\"#examples-272\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i8::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-32\"><a href=\"#panics-32\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-273\"><a href=\"#examples-273\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i8::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-274\"><a href=\"#examples-274\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i8</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_neg(), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i8.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i8::MIN.overflowing_neg(),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-275\"><a href=\"#examples-275\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i8</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i8.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-276\"><a href=\"#examples-276\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i8</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i8.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i8::MIN for values of type i8),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-277\"><a href=\"#examples-277\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i8</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN).overflowing_abs(), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i8).overflowing_abs(),+(10,+false));%0Aassert_eq!((i8::MIN).overflowing_abs(),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-278\"><a href=\"#examples-278\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i8.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-279\"><a href=\"#examples-279\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i8 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i8+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-33\"><a href=\"#panics-33\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-280\"><a href=\"#examples-280\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-34\"><a href=\"#panics-34\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-281\"><a href=\"#examples-281\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i8 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i8+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-35\"><a href=\"#panics-35\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-282\"><a href=\"#examples-282\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i8 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i8+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#289-308\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-36\"><a href=\"#panics-36\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior\"><a href=\"#overflow-behavior\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-283\"><a href=\"#examples-283\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i8 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i8+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#289-308\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-37\"><a href=\"#panics-37\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-1\"><a href=\"#overflow-behavior-1\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-284\"><a href=\"#examples-284\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i8 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i8+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#289-308\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-38\"><a href=\"#panics-38\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-2\"><a href=\"#overflow-behavior-2\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-285\"><a href=\"#examples-285\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i8</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i8</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i8</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i8</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i8</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i8</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i8</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i8</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i8.next_multiple_of(8),+16);%0Aassert_eq!(23_i8.next_multiple_of(8),+24);%0Aassert_eq!(16_i8.next_multiple_of(-8),+16);%0Aassert_eq!(23_i8.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i8).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i8).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i8).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i8).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#289-308\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-286\"><a href=\"#examples-286\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i8</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i8</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i8</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i8</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i8</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i8</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i8</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i8</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i8</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i8.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i8.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i8.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i8.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i8).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i8).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i8).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i8).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i8.checked_next_multiple_of(0),+None);%0Aassert_eq!(i8::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-287\"><a href=\"#examples-287\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i8</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i8.midpoint(4),+2);%0Aassert_eq!(0i8.midpoint(-1),+-1);%0Aassert_eq!((-1i8).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-39\"><a href=\"#panics-39\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-288\"><a href=\"#examples-288\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-40\"><a href=\"#panics-40\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-289\"><a href=\"#examples-289\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i8</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i8.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-41\"><a href=\"#panics-41\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-290\"><a href=\"#examples-290\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-291\"><a href=\"#examples-291\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i8</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i8.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-1\"><a href=\"#example-1\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-3\"><a href=\"#overflow-behavior-3\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i8::MIN</code>\ncannot be represented as an\n<code>i8</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i8::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-292\"><a href=\"#examples-292\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i8</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.abs(),+10);%0Aassert_eq!((-10i8).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-293\"><a href=\"#examples-293\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u8</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u8</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u8</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u8</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.abs_diff(i8::MAX), u8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.abs_diff(80),+20u8);%0Aassert_eq!(100i8.abs_diff(110),+10u8);%0Aassert_eq!((-100i8).abs_diff(80),+180u8);%0Aassert_eq!((-100i8).abs_diff(-120),+20u8);%0Aassert_eq!(i8::MIN.abs_diff(i8::MAX),+u8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-294\"><a href=\"#examples-294\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i8</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.signum(),+1);%0Aassert_eq!(0i8.signum(),+0);%0Aassert_eq!((-10i8).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-295\"><a href=\"#examples-295\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i8</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i8</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i8.is_positive());%0Aassert!(!(-10i8).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-296\"><a href=\"#examples-296\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i8</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i8</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i8).is_negative());%0Aassert!(!10i8.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-297\"><a href=\"#examples-297\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12i8</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12i8.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-298\"><a href=\"#examples-298\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12i8</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12i8.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.i8.html#method.to_be_bytes\" title=\"method i8::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.i8.html#method.to_le_bytes\" title=\"method i8::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-299\"><a href=\"#examples-299\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12i8</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12i8.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12%5D%0A++++%7D+else+%7B%0A++++++++%5B0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-300\"><a href=\"#examples-300\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i8::from_be_bytes([<span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i8::from_be_bytes(%5B0x12%5D);%0Aassert_eq!(value,+0x12);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i8(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i8 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i8&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i8::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i8(input:+%26mut+%26%5Bu8%5D)+-%3E+i8+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci8%3E());%0A++++*input+=+rest;%0A++++i8::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-301\"><a href=\"#examples-301\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i8::from_le_bytes([<span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i8::from_le_bytes(%5B0x12%5D);%0Aassert_eq!(value,+0x12);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i8(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i8 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i8&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i8::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i8(input:+%26mut+%26%5Bu8%5D)+-%3E+i8+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci8%3E());%0A++++*input+=+rest;%0A++++i8::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.i8.html#method.from_be_bytes\" title=\"associated function i8::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.i8.html#method.from_le_bytes\" title=\"associated function i8::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-302\"><a href=\"#examples-302\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i8::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i8::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12%5D%0A%7D+else+%7B%0A++++%5B0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i8(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i8 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i8&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i8::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i8(input:+%26mut+%26%5Bu8%5D)+-%3E+i8+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci8%3E());%0A++++*input+=+rest;%0A++++i8::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i8.html#associatedconstant.MIN\" title=\"associated constant i8::MIN\"><code>i8::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i8.html#associatedconstant.MAX\" title=\"associated constant i8::MAX\"><code>i8::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"std::ffi::c_char"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i8-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#288\">source</a><a href=\"#impl-i8-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-1\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-1\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a> = -128i8</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>7</sup>).</p>\n<h5 id=\"examples-303\"><a href=\"#examples-303\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::MIN, -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::MIN,+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-1\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-1\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a> = 127i8</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>7</sup> − 1).</p>\n<h5 id=\"examples-304\"><a href=\"#examples-304\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::MAX, <span class=\"number\">127</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::MAX,+127);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-1\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-1\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 8u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-305\"><a href=\"#examples-305\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::BITS, <span class=\"number\">8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::BITS,+8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-1\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"struct\" href=\"std/num/struct.ParseIntError.html\" title=\"struct std::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-42\"><a href=\"#panics-42\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-306\"><a href=\"#examples-306\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-1\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-307\"><a href=\"#examples-307\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i8;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-1\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-308\"><a href=\"#examples-308\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-1\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"std/primitive.i8.html#method.ilog2\" title=\"method i8::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-309\"><a href=\"#examples-309\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i8;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-1\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-310\"><a href=\"#examples-310\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i8;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-1\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-311\"><a href=\"#examples-311\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i8;%0A%0Aassert_eq!(n.leading_ones(),+8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-1\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-312\"><a href=\"#examples-312\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i8</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i8;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-1\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-313\"><a href=\"#examples-313\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">0x7ei8</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">2</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-0x7ei8;%0Alet+m+=+0xa;%0A%0Aassert_eq!(n.rotate_left(2),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-1\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-314\"><a href=\"#examples-314\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xai8</span>;\n<span class=\"kw\">let </span>m = -<span class=\"number\">0x7e</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">2</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xai8;%0Alet+m+=+-0x7e;%0A%0Aassert_eq!(n.rotate_right(2),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-1\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-315\"><a href=\"#examples-315\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12i8</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12i8;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x12);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-1\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-316\"><a href=\"#examples-316\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12i8</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i8</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12i8;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x48);%0Aassert_eq!(0,+0i8.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-1\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-317\"><a href=\"#examples-317\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai8</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i8::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i8::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai8;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i8::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i8::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-1\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-318\"><a href=\"#examples-318\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai8</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i8::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i8::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai8;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i8::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i8::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-1\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-319\"><a href=\"#examples-319\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai8</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai8;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-1\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-320\"><a href=\"#examples-320\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai8</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai8;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-1\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-321\"><a href=\"#examples-321\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i8::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i8::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i8::MAX+-+2).checked_add(1),+Some(i8::MAX+-+1));%0Aassert_eq!((i8::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-1\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-15\"><a href=\"#safety-15\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i8::MAX</code> or <code>self + rhs &lt; i8::MIN</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_add\" title=\"method i8::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned-1\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-322\"><a href=\"#examples-322\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i8::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-1\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-323\"><a href=\"#examples-323\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i8::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i8::MIN+%2B+2).checked_sub(1),+Some(i8::MIN+%2B+1));%0Aassert_eq!((i8::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-1\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-16\"><a href=\"#safety-16\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i8::MAX</code> or <code>self - rhs &lt; i8::MIN</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_sub\" title=\"method i8::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned-1\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-324\"><a href=\"#examples-324\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i8::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-1\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-325\"><a href=\"#examples-325\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i8::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i8::MAX));\n<span class=\"macro\">assert_eq!</span>(i8::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i8::MAX.checked_mul(1),+Some(i8::MAX));%0Aassert_eq!(i8::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-1\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-17\"><a href=\"#safety-17\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i8::MAX</code> or <code>self * rhs &lt; i8::MIN</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_mul\" title=\"method i8::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-1\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-326\"><a href=\"#examples-326\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">127</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i8</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i8::MIN+%2B+1).checked_div(-1),+Some(127));%0Aassert_eq!(i8::MIN.checked_div(-1),+None);%0Aassert_eq!((1i8).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-1\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-327\"><a href=\"#examples-327\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">127</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i8</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i8::MIN+%2B+1).checked_div_euclid(-1),+Some(127));%0Aassert_eq!(i8::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i8).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-1\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-328\"><a href=\"#examples-328\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.checked_rem(2),+Some(1));%0Aassert_eq!(5i8.checked_rem(0),+None);%0Aassert_eq!(i8::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-1\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-329\"><a href=\"#examples-329\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i8.checked_rem_euclid(0),+None);%0Aassert_eq!(i8::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-1\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-330\"><a href=\"#examples-330\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.checked_neg(),+Some(-5));%0Aassert_eq!(i8::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-1\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-331\"><a href=\"#examples-331\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i8</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i8</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i8.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i8.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-1\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-18\"><a href=\"#safety-18\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_shl\" title=\"method i8::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-1\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-332\"><a href=\"#examples-332\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i8</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i8</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i8.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i8.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-1\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-19\"><a href=\"#safety-19\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"std/primitive.i8.html#method.checked_shr\" title=\"method i8::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-1\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-333\"><a href=\"#examples-333\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i8</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i8).checked_abs(),+Some(5));%0Aassert_eq!(i8::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-1\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-334\"><a href=\"#examples-334\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i8</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i8.checked_pow(2),+Some(64));%0Aassert_eq!(i8::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt-1\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-335\"><a href=\"#examples-335\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-1\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-336\"><a href=\"#examples-336\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_add(<span class=\"number\">100</span>), i8::MAX);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_add(-<span class=\"number\">1</span>), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_add(1),+101);%0Aassert_eq!(i8::MAX.saturating_add(100),+i8::MAX);%0Aassert_eq!(i8::MIN.saturating_add(-1),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned-1\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-337\"><a href=\"#examples-337\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.saturating_add_unsigned(2),+3);%0Aassert_eq!(i8::MAX.saturating_add_unsigned(100),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-1\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-338\"><a href=\"#examples-338\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_sub(<span class=\"number\">100</span>), i8::MIN);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_sub(-<span class=\"number\">1</span>), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_sub(127),+-27);%0Aassert_eq!(i8::MIN.saturating_sub(100),+i8::MIN);%0Aassert_eq!(i8::MAX.saturating_sub(-1),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned-1\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-339\"><a href=\"#examples-339\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i8::MIN.saturating_sub_unsigned(100),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-1\" class=\"fn\">saturating_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-340\"><a href=\"#examples-340\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_neg(), i8::MAX);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_neg(), i8::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_neg(),+-100);%0Aassert_eq!((-100i8).saturating_neg(),+100);%0Aassert_eq!(i8::MIN.saturating_neg(),+i8::MAX);%0Aassert_eq!(i8::MAX.saturating_neg(),+i8::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-1\" class=\"fn\">saturating_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-341\"><a href=\"#examples-341\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_abs(), i8::MAX);\n<span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">1</span>).saturating_abs(), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.saturating_abs(),+100);%0Aassert_eq!((-100i8).saturating_abs(),+100);%0Aassert_eq!(i8::MIN.saturating_abs(),+i8::MAX);%0Aassert_eq!((i8::MIN+%2B+1).saturating_abs(),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-1\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-342\"><a href=\"#examples-342\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_mul(<span class=\"number\">10</span>), i8::MAX);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_mul(<span class=\"number\">10</span>), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.saturating_mul(12),+120);%0Aassert_eq!(i8::MAX.saturating_mul(10),+i8::MAX);%0Aassert_eq!(i8::MIN.saturating_mul(10),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-1\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-343\"><a href=\"#examples-343\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.saturating_div(-<span class=\"number\">1</span>), i8::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_div(-<span class=\"number\">1</span>), i8::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.saturating_div(2),+2);%0Aassert_eq!(i8::MAX.saturating_div(-1),+i8::MIN+%2B+1);%0Aassert_eq!(i8::MIN.saturating_div(-1),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i8</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i8.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-1\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-344\"><a href=\"#examples-344\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i8</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_pow(<span class=\"number\">2</span>), i8::MAX);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.saturating_pow(<span class=\"number\">3</span>), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i8).saturating_pow(3),+-64);%0Aassert_eq!(i8::MIN.saturating_pow(2),+i8::MAX);%0Aassert_eq!(i8::MIN.saturating_pow(3),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-1\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-345\"><a href=\"#examples-345\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.wrapping_add(<span class=\"number\">2</span>), i8::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_add(27),+127);%0Aassert_eq!(i8::MAX.wrapping_add(2),+i8::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned-1\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-346\"><a href=\"#examples-346\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i8::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i8::MAX.wrapping_add_unsigned(2),+i8::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-1\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-347\"><a href=\"#examples-347\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i8</span>).wrapping_sub(i8::MAX), i8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i8.wrapping_sub(127),+-127);%0Aassert_eq!((-2i8).wrapping_sub(i8::MAX),+i8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned-1\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-348\"><a href=\"#examples-348\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i8</span>).wrapping_sub_unsigned(u8::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i8.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i8).wrapping_sub_unsigned(u8::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-1\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-349\"><a href=\"#examples-349\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-1\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-43\"><a href=\"#panics-43\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-350\"><a href=\"#examples-350\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-1\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-44\"><a href=\"#panics-44\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-351\"><a href=\"#examples-351\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-1\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-45\"><a href=\"#panics-45\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-352\"><a href=\"#examples-352\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-1\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-46\"><a href=\"#panics-46\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-353\"><a href=\"#examples-353\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-1\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-354\"><a href=\"#examples-354\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.wrapping_neg(), i8::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_neg(),+-100);%0Aassert_eq!(i8::MIN.wrapping_neg(),+i8::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-1\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"std/primitive.i8.html#method.rotate_left\" title=\"method i8::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-355\"><a href=\"#examples-355\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i8</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i8</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i8).wrapping_shl(7),+-128);%0Aassert_eq!((-1i8).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-1\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"std/primitive.i8.html#method.rotate_right\" title=\"method i8::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-356\"><a href=\"#examples-356\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i8).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-1\" class=\"fn\">wrapping_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-357\"><a href=\"#examples-357\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.wrapping_abs(), i8::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.wrapping_abs(),+100);%0Aassert_eq!((-100i8).wrapping_abs(),+100);%0Aassert_eq!(i8::MIN.wrapping_abs(),+i8::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-1\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-358\"><a href=\"#examples-358\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.unsigned_abs(), <span class=\"number\">100u8</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).unsigned_abs(), <span class=\"number\">100u8</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.unsigned_abs(),+100u8);%0Aassert_eq!((-100i8).unsigned_abs(),+100u8);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-1\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-359\"><a href=\"#examples-359\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i8.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-1\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-360\"><a href=\"#examples-360\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MAX.overflowing_add(<span class=\"number\">1</span>), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_add(2),+(7,+false));%0Aassert_eq!(i8::MAX.overflowing_add(1),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-1\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"std/primitive.u8.html#method.carrying_add\" title=\"method u8::carrying_add\"><code>u8::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"std/primitive.i8.html#method.overflowing_add\" title=\"method i8::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-361\"><a href=\"#examples-361\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^8 + 2^8 - 1)\n// + -5    9    (b = -5 × 2^8 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^8 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i8, u8) = (<span class=\"number\">10</span>, u8::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i8, u8) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u8::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i8::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E8+%2B+2%5E8+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E8+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E8+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i8,+u8)+=+(10,+u8::MAX);%0Alet+(b1,+b0):+(i8,+u8)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u8::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i8::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned-1\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-362\"><a href=\"#examples-362\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN).overflowing_add_unsigned(u8::MAX), (i8::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i8::MIN).overflowing_add_unsigned(u8::MAX),+(i8::MAX,+false));%0Aassert_eq!((i8::MAX+-+2).overflowing_add_unsigned(3),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-1\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-363\"><a href=\"#examples-363\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_sub(<span class=\"number\">1</span>), (i8::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i8::MIN.overflowing_sub(1),+(i8::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-1\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"std/primitive.u8.html#method.borrowing_sub\" title=\"method u8::borrowing_sub\"><code>u8::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"std/primitive.i8.html#method.overflowing_sub\" title=\"method i8::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-364\"><a href=\"#examples-364\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^8 + 8)\n// - -5    9    (b = -5 × 2^8 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^8 + 2^8 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i8, u8) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i8, u8) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u8::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i8::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u8::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E8+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E8+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E8+%2B+2%5E8+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i8,+u8)+=+(6,+8);%0Alet+(b1,+b0):+(i8,+u8)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u8::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i8::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u8::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned-1\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-365\"><a href=\"#examples-365\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i8</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MAX).overflowing_sub_unsigned(u8::MAX), (i8::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i8::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i8.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i8::MAX).overflowing_sub_unsigned(u8::MAX),+(i8::MIN,+false));%0Aassert_eq!((i8::MIN+%2B+2).overflowing_sub_unsigned(3),+(i8::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-1\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-366\"><a href=\"#examples-366\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-1\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-47\"><a href=\"#panics-47\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-367\"><a href=\"#examples-367\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_div(-<span class=\"number\">1</span>), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_div(2),+(2,+false));%0Aassert_eq!(i8::MIN.overflowing_div(-1),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-1\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-48\"><a href=\"#panics-48\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-368\"><a href=\"#examples-368\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i8::MIN.overflowing_div_euclid(-1),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-1\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-49\"><a href=\"#panics-49\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-369\"><a href=\"#examples-369\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i8::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-1\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-50\"><a href=\"#panics-50\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-370\"><a href=\"#examples-370\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i8::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-1\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-371\"><a href=\"#examples-371\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i8</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i8::MIN.overflowing_neg(), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i8.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i8::MIN.overflowing_neg(),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-1\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-372\"><a href=\"#examples-372\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i8</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i8.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-1\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-373\"><a href=\"#examples-373\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i8</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i8.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-1\" class=\"fn\">overflowing_abs</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i8::MIN for values of type i8),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-374\"><a href=\"#examples-374\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i8</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i8::MIN).overflowing_abs(), (i8::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i8).overflowing_abs(),+(10,+false));%0Aassert_eq!((i8::MIN).overflowing_abs(),+(i8::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-1\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-375\"><a href=\"#examples-375\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i8.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-1\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-376\"><a href=\"#examples-376\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i8 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i8+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-1\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-51\"><a href=\"#panics-51\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-377\"><a href=\"#examples-377\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-1\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-52\"><a href=\"#panics-52\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-378\"><a href=\"#examples-378\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i8 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i8+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-1\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-53\"><a href=\"#panics-53\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-379\"><a href=\"#examples-379\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i8 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i8+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-1\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#289-308\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-1\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-54\"><a href=\"#panics-54\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-4\"><a href=\"#overflow-behavior-4\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-380\"><a href=\"#examples-380\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i8 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i8+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-1\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#289-308\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-1\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-55\"><a href=\"#panics-55\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-5\"><a href=\"#overflow-behavior-5\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-381\"><a href=\"#examples-381\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i8 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i8+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-1\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#289-308\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-1\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-56\"><a href=\"#panics-56\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-6\"><a href=\"#overflow-behavior-6\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-382\"><a href=\"#examples-382\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i8</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i8</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i8</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i8</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i8</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i8</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i8</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i8</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i8.next_multiple_of(8),+16);%0Aassert_eq!(23_i8.next_multiple_of(8),+24);%0Aassert_eq!(16_i8.next_multiple_of(-8),+16);%0Aassert_eq!(23_i8.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i8).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i8).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i8).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i8).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-1\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#289-308\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-1\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-383\"><a href=\"#examples-383\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i8</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i8</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i8</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i8</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i8</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i8</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i8</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i8</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i8</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i8.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i8.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i8.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i8.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i8).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i8).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i8).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i8).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i8.checked_next_multiple_of(0),+None);%0Aassert_eq!(i8::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-1\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-384\"><a href=\"#examples-384\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i8</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i8.midpoint(4),+2);%0Aassert_eq!(0i8.midpoint(-1),+-1);%0Aassert_eq!((-1i8).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-1\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-57\"><a href=\"#panics-57\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-385\"><a href=\"#examples-385\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-1\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-58\"><a href=\"#panics-58\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-386\"><a href=\"#examples-386\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i8</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i8.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-1\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-59\"><a href=\"#panics-59\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example-2\"><a href=\"#example-2\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-1\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-387\"><a href=\"#examples-387\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i8</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i8.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-1\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-388\"><a href=\"#examples-388\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i8</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i8.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-1\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-3\"><a href=\"#example-3\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-1\" class=\"fn\">abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-7\"><a href=\"#overflow-behavior-7\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i8::MIN</code>\ncannot be represented as an\n<code>i8</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i8::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-389\"><a href=\"#examples-389\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i8</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.abs(),+10);%0Aassert_eq!((-10i8).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-1\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-390\"><a href=\"#examples-390\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u8</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i8</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u8</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u8</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i8</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u8</span>);\n<span class=\"macro\">assert_eq!</span>(i8::MIN.abs_diff(i8::MAX), u8::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i8.abs_diff(80),+20u8);%0Aassert_eq!(100i8.abs_diff(110),+10u8);%0Aassert_eq!((-100i8).abs_diff(80),+180u8);%0Aassert_eq!((-100i8).abs_diff(-120),+20u8);%0Aassert_eq!(i8::MIN.abs_diff(i8::MAX),+u8::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum-1\" class=\"fn\">signum</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-391\"><a href=\"#examples-391\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i8</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i8</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i8</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i8.signum(),+1);%0Aassert_eq!(0i8.signum(),+0);%0Aassert_eq!((-10i8).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-1\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-392\"><a href=\"#examples-392\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i8</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i8</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i8.is_positive());%0Aassert!(!(-10i8).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-1\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-393\"><a href=\"#examples-393\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i8</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i8</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i8).is_negative());%0Aassert!(!10i8.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-1\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-394\"><a href=\"#examples-394\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12i8</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12i8.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-1\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-395\"><a href=\"#examples-395\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12i8</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12i8.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-1\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"std/primitive.i8.html#method.to_be_bytes\" title=\"method i8::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"std/primitive.i8.html#method.to_le_bytes\" title=\"method i8::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-396\"><a href=\"#examples-396\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12i8</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12i8.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12%5D%0A++++%7D+else+%7B%0A++++++++%5B0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-1\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-397\"><a href=\"#examples-397\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i8::from_be_bytes([<span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i8::from_be_bytes(%5B0x12%5D);%0Aassert_eq!(value,+0x12);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i8(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i8 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i8&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i8::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i8(input:+%26mut+%26%5Bu8%5D)+-%3E+i8+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci8%3E());%0A++++*input+=+rest;%0A++++i8::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-1\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-398\"><a href=\"#examples-398\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i8::from_le_bytes([<span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i8::from_le_bytes(%5B0x12%5D);%0Aassert_eq!(value,+0x12);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i8(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i8 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i8&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i8::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i8(input:+%26mut+%26%5Bu8%5D)+-%3E+i8+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci8%3E());%0A++++*input+=+rest;%0A++++i8::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-1\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">1</a>]) -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"std/primitive.i8.html#method.from_be_bytes\" title=\"associated function i8::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"std/primitive.i8.html#method.from_le_bytes\" title=\"associated function i8::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-399\"><a href=\"#examples-399\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i8::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i8::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12%5D%0A%7D+else+%7B%0A++++%5B0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i8(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i8 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i8&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i8::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i8(input:+%26mut+%26%5Bu8%5D)+-%3E+i8+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci8%3E());%0A++++*input+=+rest;%0A++++i8::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-1\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i8.html#associatedconstant.MIN\" title=\"associated constant i8::MIN\"><code>i8::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#289-308\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-1\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"primitive.i8.html\">i8</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"std/primitive.i8.html#associatedconstant.MAX\" title=\"associated constant i8::MAX\"><code>i8::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"std::ffi::c_schar"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()