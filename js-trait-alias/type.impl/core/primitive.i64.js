(function() {var type_impls = {
"core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#357-378\">source</a><a href=\"#impl-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-21\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-21\" class=\"constant\">MIN</a>: Self = -9_223_372_036_854_775_808i64</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>63</sup>).</p>\n<h5 id=\"examples-1462\"><a href=\"#examples-1462\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MIN, -<span class=\"number\">9223372036854775808</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MIN,+-9223372036854775808);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-21\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-21\" class=\"constant\">MAX</a>: Self = 9_223_372_036_854_775_807i64</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>63</sup> − 1).</p>\n<h5 id=\"examples-1463\"><a href=\"#examples-1463\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX, <span class=\"number\">9223372036854775807</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX,+9223372036854775807);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-21\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-21\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1464\"><a href=\"#examples-1464\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::BITS, <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::BITS,+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-14\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-274\"><a href=\"#panics-274\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1465\"><a href=\"#examples-1465\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-14\" class=\"fn\">count_ones</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1466\"><a href=\"#examples-1466\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i64;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-14\" class=\"fn\">count_zeros</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1467\"><a href=\"#examples-1467\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-21\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-21\" class=\"fn\">leading_zeros</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"core/primitive.i64.html#method.ilog2\" title=\"method i64::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1468\"><a href=\"#examples-1468\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-21\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-21\" class=\"fn\">trailing_zeros</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1469\"><a href=\"#examples-1469\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i64;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-14\" class=\"fn\">leading_ones</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1470\"><a href=\"#examples-1470\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_ones(),+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-14\" class=\"fn\">trailing_ones</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1471\"><a href=\"#examples-1471\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i64;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-14\" class=\"fn\">rotate_left</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1472\"><a href=\"#examples-1472\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xaa00000000006e1i64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x6e10aa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xaa00000000006e1i64;%0Alet+m+=+0x6e10aa;%0A%0Aassert_eq!(n.rotate_left(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-14\" class=\"fn\">rotate_right</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1473\"><a href=\"#examples-1473\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x6e10aai64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xaa00000000006e1</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x6e10aai64;%0Alet+m+=+0xaa00000000006e1;%0A%0Aassert_eq!(n.rotate_right(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-14\" class=\"fn\">swap_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1474\"><a href=\"#examples-1474\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x5634129078563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x5634129078563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-14\" class=\"fn\">reverse_bits</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1475\"><a href=\"#examples-1475\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x6a2c48091e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i64</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x6a2c48091e6a2c48);%0Aassert_eq!(0,+0i64.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-14\" class=\"fn\">from_be</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(x: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1476\"><a href=\"#examples-1476\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i64::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-14\" class=\"fn\">from_le</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(x: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1477\"><a href=\"#examples-1477\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i64::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-14\" class=\"fn\">to_be</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1478\"><a href=\"#examples-1478\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-14\" class=\"fn\">to_le</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1479\"><a href=\"#examples-1479\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-17\" class=\"fn\">checked_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1480\"><a href=\"#examples-1480\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MAX+-+2).checked_add(1),+Some(i64::MAX+-+1));%0Aassert_eq!((i64::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-17\" class=\"fn\">unchecked_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-77\"><a href=\"#safety-77\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i64::MAX</code> or <code>self + rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_add\" title=\"method i64::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned-8\" class=\"fn\">checked_add_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1481\"><a href=\"#examples-1481\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i64::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-14\" class=\"fn\">checked_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1482\"><a href=\"#examples-1482\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(1),+Some(i64::MIN+%2B+1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-14\" class=\"fn\">unchecked_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-78\"><a href=\"#safety-78\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i64::MAX</code> or <code>self - rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_sub\" title=\"method i64::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned-8\" class=\"fn\">checked_sub_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1483\"><a href=\"#examples-1483\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-21\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-21\" class=\"fn\">checked_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1484\"><a href=\"#examples-1484\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.checked_mul(1),+Some(i64::MAX));%0Aassert_eq!(i64::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-21\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-21\" class=\"fn\">unchecked_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-79\"><a href=\"#safety-79\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i64::MAX</code> or <code>self * rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_mul\" title=\"method i64::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-14\" class=\"fn\">checked_div</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-1485\"><a href=\"#examples-1485\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div(-1),+None);%0Aassert_eq!((1i64).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-14\" class=\"fn\">checked_div_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1486\"><a href=\"#examples-1486\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div_euclid(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i64).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-14\" class=\"fn\">checked_rem</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1487\"><a href=\"#examples-1487\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem(2),+Some(1));%0Aassert_eq!(5i64.checked_rem(0),+None);%0Aassert_eq!(i64::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-14\" class=\"fn\">checked_rem_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1488\"><a href=\"#examples-1488\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i64.checked_rem_euclid(0),+None);%0Aassert_eq!(i64::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-18\" class=\"fn\">checked_neg</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-1489\"><a href=\"#examples-1489\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_neg(),+Some(-5));%0Aassert_eq!(i64::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-14\" class=\"fn\">checked_shl</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1490\"><a href=\"#examples-1490\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i64.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-14\" class=\"fn\">unchecked_shl</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-80\"><a href=\"#safety-80\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_shl\" title=\"method i64::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-14\" class=\"fn\">checked_shr</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1491\"><a href=\"#examples-1491\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i64.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-14\" class=\"fn\">unchecked_shr</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-81\"><a href=\"#safety-81\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_shr\" title=\"method i64::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-12\" class=\"fn\">checked_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-1492\"><a href=\"#examples-1492\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i64</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i64).checked_abs(),+Some(5));%0Aassert_eq!(i64::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-21\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-21\" class=\"fn\">checked_pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1493\"><a href=\"#examples-1493\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i64</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i64.checked_pow(2),+Some(64));%0Aassert_eq!(i64::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt-8\" class=\"fn\">checked_isqrt</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-1494\"><a href=\"#examples-1494\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-17\" class=\"fn\">saturating_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-1495\"><a href=\"#examples-1495\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add(<span class=\"number\">100</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_add(-<span class=\"number\">1</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_add(1),+101);%0Aassert_eq!(i64::MAX.saturating_add(100),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_add(-1),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned-8\" class=\"fn\">saturating_add_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1496\"><a href=\"#examples-1496\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.saturating_add_unsigned(2),+3);%0Aassert_eq!(i64::MAX.saturating_add_unsigned(100),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-14\" class=\"fn\">saturating_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1497\"><a href=\"#examples-1497\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub(<span class=\"number\">100</span>), i64::MIN);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_sub(-<span class=\"number\">1</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub(100),+i64::MIN);%0Aassert_eq!(i64::MAX.saturating_sub(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned-8\" class=\"fn\">saturating_sub_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1498\"><a href=\"#examples-1498\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub_unsigned(100),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-12\" class=\"fn\">saturating_neg</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-1499\"><a href=\"#examples-1499\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_neg(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_neg(), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_neg(),+-100);%0Aassert_eq!((-100i64).saturating_neg(),+100);%0Aassert_eq!(i64::MIN.saturating_neg(),+i64::MAX);%0Aassert_eq!(i64::MAX.saturating_neg(),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-12\" class=\"fn\">saturating_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-1500\"><a href=\"#examples-1500\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_abs(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).saturating_abs(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_abs(),+100);%0Aassert_eq!((-100i64).saturating_abs(),+100);%0Aassert_eq!(i64::MIN.saturating_abs(),+i64::MAX);%0Aassert_eq!((i64::MIN+%2B+1).saturating_abs(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-21\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-21\" class=\"fn\">saturating_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1501\"><a href=\"#examples-1501\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_mul(<span class=\"number\">10</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_mul(<span class=\"number\">10</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.saturating_mul(12),+120);%0Aassert_eq!(i64::MAX.saturating_mul(10),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_mul(10),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-14\" class=\"fn\">saturating_div</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1502\"><a href=\"#examples-1502\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_div(-<span class=\"number\">1</span>), i64::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_div(-<span class=\"number\">1</span>), i64::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.saturating_div(2),+2);%0Aassert_eq!(i64::MAX.saturating_div(-1),+i64::MIN+%2B+1);%0Aassert_eq!(i64::MIN.saturating_div(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i64</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i64.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-21\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-21\" class=\"fn\">saturating_pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1503\"><a href=\"#examples-1503\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i64</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">2</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">3</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i64).saturating_pow(3),+-64);%0Aassert_eq!(i64::MIN.saturating_pow(2),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_pow(3),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-14\" class=\"fn\">wrapping_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1504\"><a href=\"#examples-1504\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned-8\" class=\"fn\">wrapping_add_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1505\"><a href=\"#examples-1505\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add_unsigned(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-14\" class=\"fn\">wrapping_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1506\"><a href=\"#examples-1506\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub(i64::MAX), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub(i64::MAX),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned-8\" class=\"fn\">wrapping_sub_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1507\"><a href=\"#examples-1507\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub_unsigned(u64::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub_unsigned(u64::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-14\" class=\"fn\">wrapping_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-1508\"><a href=\"#examples-1508\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-14\" class=\"fn\">wrapping_div</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-275\"><a href=\"#panics-275\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1509\"><a href=\"#examples-1509\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-14\" class=\"fn\">wrapping_div_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-276\"><a href=\"#panics-276\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1510\"><a href=\"#examples-1510\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-14\" class=\"fn\">wrapping_rem</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-277\"><a href=\"#panics-277\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1511\"><a href=\"#examples-1511\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-14\" class=\"fn\">wrapping_rem_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-278\"><a href=\"#panics-278\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1512\"><a href=\"#examples-1512\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-18\" class=\"fn\">wrapping_neg</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1513\"><a href=\"#examples-1513\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_neg(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_neg(),+-100);%0Aassert_eq!(i64::MIN.wrapping_neg(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-14\" class=\"fn\">wrapping_shl</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"core/primitive.i64.html#method.rotate_left\" title=\"method i64::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1514\"><a href=\"#examples-1514\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i64).wrapping_shl(7),+-128);%0Aassert_eq!((-1i64).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-14\" class=\"fn\">wrapping_shr</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"core/primitive.i64.html#method.rotate_right\" title=\"method i64::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1515\"><a href=\"#examples-1515\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i64</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i64).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-12\" class=\"fn\">wrapping_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1516\"><a href=\"#examples-1516\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_abs(), i64::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_abs(),+100);%0Aassert_eq!((-100i64).wrapping_abs(),+100);%0Aassert_eq!(i64::MIN.wrapping_abs(),+i64::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-12\" class=\"fn\">unsigned_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-1517\"><a href=\"#examples-1517\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.unsigned_abs(),+100u64);%0Aassert_eq!((-100i64).unsigned_abs(),+100u64);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-14\" class=\"fn\">wrapping_pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1518\"><a href=\"#examples-1518\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-14\" class=\"fn\">overflowing_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1519\"><a href=\"#examples-1519\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.overflowing_add(<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_add(2),+(7,+false));%0Aassert_eq!(i64::MAX.overflowing_add(1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-14\" class=\"fn\">carrying_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self,\n    carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"core/primitive.u64.html#method.carrying_add\" title=\"method u64::carrying_add\"><code>u64::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"core/primitive.i64.html#method.overflowing_add\" title=\"method i64::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-1520\"><a href=\"#examples-1520\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^64 + 2^64 - 1)\n// + -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^64 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">10</span>, u64::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E64+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(10,+u64::MAX);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u64::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i64::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned-8\" class=\"fn\">overflowing_add_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1521\"><a href=\"#examples-1521\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_add_unsigned(u64::MAX), (i64::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i64::MIN).overflowing_add_unsigned(u64::MAX),+(i64::MAX,+false));%0Aassert_eq!((i64::MAX+-+2).overflowing_add_unsigned(3),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-14\" class=\"fn\">overflowing_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1522\"><a href=\"#examples-1522\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_sub(<span class=\"number\">1</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i64::MIN.overflowing_sub(1),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-14\" class=\"fn\">borrowing_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self,\n    borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"core/primitive.u64.html#method.borrowing_sub\" title=\"method u64::borrowing_sub\"><code>u64::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"core/primitive.i64.html#method.overflowing_sub\" title=\"method i64::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-1523\"><a href=\"#examples-1523\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^64 + 8)\n// - -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^64 + 2^64 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u64::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E64+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(6,+8);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u64::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i64::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u64::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned-8\" class=\"fn\">overflowing_sub_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1524\"><a href=\"#examples-1524\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX).overflowing_sub_unsigned(u64::MAX), (i64::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i64::MAX).overflowing_sub_unsigned(u64::MAX),+(i64::MIN,+false));%0Aassert_eq!((i64::MIN+%2B+2).overflowing_sub_unsigned(3),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-14\" class=\"fn\">overflowing_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1525\"><a href=\"#examples-1525\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-14\" class=\"fn\">overflowing_div</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-279\"><a href=\"#panics-279\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1526\"><a href=\"#examples-1526\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-14\" class=\"fn\">overflowing_div_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-280\"><a href=\"#panics-280\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1527\"><a href=\"#examples-1527\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div_euclid(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-14\" class=\"fn\">overflowing_rem</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-281\"><a href=\"#panics-281\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1528\"><a href=\"#examples-1528\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-14\" class=\"fn\">overflowing_rem_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-282\"><a href=\"#panics-282\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1529\"><a href=\"#examples-1529\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-18\" class=\"fn\">overflowing_neg</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-1530\"><a href=\"#examples-1530\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_neg(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i64::MIN.overflowing_neg(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-14\" class=\"fn\">overflowing_shl</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1531\"><a href=\"#examples-1531\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-14\" class=\"fn\">overflowing_shr</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1532\"><a href=\"#examples-1532\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-12\" class=\"fn\">overflowing_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i64::MIN for values of type i64),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-1533\"><a href=\"#examples-1533\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_abs(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i64).overflowing_abs(),+(10,+false));%0Aassert_eq!((i64::MIN).overflowing_abs(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-14\" class=\"fn\">overflowing_pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1534\"><a href=\"#examples-1534\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-14\" class=\"fn\">pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1535\"><a href=\"#examples-1535\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i64 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i64+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-14\" class=\"fn\">isqrt</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-283\"><a href=\"#panics-283\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-1536\"><a href=\"#examples-1536\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-14\" class=\"fn\">div_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-284\"><a href=\"#panics-284\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1537\"><a href=\"#examples-1537\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-14\" class=\"fn\">rem_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-285\"><a href=\"#panics-285\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1538\"><a href=\"#examples-1538\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-14\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-14\" class=\"fn\">div_floor</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-286\"><a href=\"#panics-286\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-44\"><a href=\"#overflow-behavior-44\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1539\"><a href=\"#examples-1539\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-14\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-14\" class=\"fn\">div_ceil</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-287\"><a href=\"#panics-287\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-45\"><a href=\"#overflow-behavior-45\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1540\"><a href=\"#examples-1540\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-14\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-14\" class=\"fn\">next_multiple_of</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-288\"><a href=\"#panics-288\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-46\"><a href=\"#overflow-behavior-46\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1541\"><a href=\"#examples-1541\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.next_multiple_of(8),+16);%0Aassert_eq!(23_i64.next_multiple_of(8),+24);%0Aassert_eq!(16_i64.next_multiple_of(-8),+16);%0Aassert_eq!(23_i64.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i64).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-14\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-14\" class=\"fn\">checked_next_multiple_of</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-1542\"><a href=\"#examples-1542\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i64</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i64.checked_next_multiple_of(0),+None);%0Aassert_eq!(i64::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-17\" class=\"fn\">midpoint</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1543\"><a href=\"#examples-1543\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.midpoint(4),+2);%0Aassert_eq!(0i64.midpoint(-1),+-1);%0Aassert_eq!((-1i64).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-14\" class=\"fn\">ilog</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, base: Self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-289\"><a href=\"#panics-289\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1544\"><a href=\"#examples-1544\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-17\" class=\"fn\">ilog2</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-290\"><a href=\"#panics-290\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-1545\"><a href=\"#examples-1545\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-17\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-17\" class=\"fn\">ilog10</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-291\"><a href=\"#panics-291\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example-70\"><a href=\"#example-70\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-14\" class=\"fn\">checked_ilog</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    base: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1546\"><a href=\"#examples-1546\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-14\" class=\"fn\">checked_ilog2</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-1547\"><a href=\"#examples-1547\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-14\" class=\"fn\">checked_ilog10</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-71\"><a href=\"#example-71\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-12\" class=\"fn\">abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-47\"><a href=\"#overflow-behavior-47\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i64::MIN</code>\ncannot be represented as an\n<code>i64</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i64::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-1548\"><a href=\"#examples-1548\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.abs(),+10);%0Aassert_eq!((-10i64).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-14\" class=\"fn\">abs_diff</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, other: Self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-1549\"><a href=\"#examples-1549\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.abs_diff(i64::MAX), u64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.abs_diff(80),+20u64);%0Aassert_eq!(100i64.abs_diff(110),+10u64);%0Aassert_eq!((-100i64).abs_diff(80),+180u64);%0Aassert_eq!((-100i64).abs_diff(-120),+20u64);%0Aassert_eq!(i64::MIN.abs_diff(i64::MAX),+u64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum-8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum-8\" class=\"fn\">signum</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-1550\"><a href=\"#examples-1550\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.signum(),+1);%0Aassert_eq!(0i64.signum(),+0);%0Aassert_eq!((-10i64).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-12\" class=\"fn\">is_positive</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-1551\"><a href=\"#examples-1551\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i64</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i64</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i64.is_positive());%0Aassert!(!(-10i64).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative-12\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-12\" class=\"fn\">is_negative</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-1552\"><a href=\"#examples-1552\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i64</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i64</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i64).is_negative());%0Aassert!(!10i64.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-14\" class=\"fn\">to_be_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1553\"><a href=\"#examples-1553\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-14\" class=\"fn\">to_le_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1554\"><a href=\"#examples-1554\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-14\" class=\"fn\">to_ne_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"core/primitive.i64.html#method.to_be_bytes\" title=\"method i64::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"core/primitive.i64.html#method.to_le_bytes\" title=\"method i64::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1555\"><a href=\"#examples-1555\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A++++%7D+else+%7B%0A++++++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-14\" class=\"fn\">from_be_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-1556\"><a href=\"#examples-1556\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-14\" class=\"fn\">from_le_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-1557\"><a href=\"#examples-1557\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_le_bytes([<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_le_bytes(%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-14\" class=\"fn\">from_ne_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"core/primitive.i64.html#method.from_be_bytes\" title=\"associated function i64::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"core/primitive.i64.html#method.from_le_bytes\" title=\"associated function i64::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1558\"><a href=\"#examples-1558\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A%7D+else+%7B%0A++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-14\" class=\"fn\">min_value</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;() -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"core/primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-14\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-14\" class=\"fn\">max_value</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;() -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"core/primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#357-378\">source</a><a href=\"#impl-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN-22\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MIN-22\" class=\"constant\">MIN</a>: Self = -9_223_372_036_854_775_808i64</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>63</sup>).</p>\n<h5 id=\"examples-1559\"><a href=\"#examples-1559\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MIN, -<span class=\"number\">9223372036854775808</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MIN,+-9223372036854775808);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX-22\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.MAX-22\" class=\"constant\">MAX</a>: Self = 9_223_372_036_854_775_807i64</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>63</sup> − 1).</p>\n<h5 id=\"examples-1560\"><a href=\"#examples-1560\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX, <span class=\"number\">9223372036854775807</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX,+9223372036854775807);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS-22\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.BITS-22\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 64u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-1561\"><a href=\"#examples-1561\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::BITS, <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::BITS,+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_str_radix-15\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics-292\"><a href=\"#panics-292\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-1562\"><a href=\"#examples-1562\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from_str_radix(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_ones-15\" class=\"fn\">count_ones</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1563\"><a href=\"#examples-1563\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i64;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.count_zeros-15\" class=\"fn\">count_zeros</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1564\"><a href=\"#examples-1564\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros-22\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_zeros-22\" class=\"fn\">leading_zeros</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"core/primitive.i64.html#method.ilog2\" title=\"method i64::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-1565\"><a href=\"#examples-1565\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros-22\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_zeros-22\" class=\"fn\">trailing_zeros</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1566\"><a href=\"#examples-1566\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i64;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.leading_ones-15\" class=\"fn\">leading_ones</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1567\"><a href=\"#examples-1567\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">64</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i64;%0A%0Aassert_eq!(n.leading_ones(),+64);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.trailing_ones-15\" class=\"fn\">trailing_ones</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-1568\"><a href=\"#examples-1568\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i64</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i64;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_left-15\" class=\"fn\">rotate_left</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-1569\"><a href=\"#examples-1569\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xaa00000000006e1i64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x6e10aa</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xaa00000000006e1i64;%0Alet+m+=+0x6e10aa;%0A%0Aassert_eq!(n.rotate_left(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rotate_right-15\" class=\"fn\">rotate_right</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-1570\"><a href=\"#examples-1570\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x6e10aai64</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xaa00000000006e1</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">12</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x6e10aai64;%0Alet+m+=+0xaa00000000006e1;%0A%0Aassert_eq!(n.rotate_right(12),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.swap_bytes-15\" class=\"fn\">swap_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-1571\"><a href=\"#examples-1571\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x5634129078563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x5634129078563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.reverse_bits-15\" class=\"fn\">reverse_bits</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-1572\"><a href=\"#examples-1572\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234567890123456i64</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x6a2c48091e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i64</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1234567890123456i64;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x6a2c48091e6a2c48);%0Aassert_eq!(0,+0i64.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be-15\" class=\"fn\">from_be</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(x: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1573\"><a href=\"#examples-1573\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i64::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le-15\" class=\"fn\">from_le</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(x: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1574\"><a href=\"#examples-1574\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i64::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i64::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i64::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be-15\" class=\"fn\">to_be</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-1575\"><a href=\"#examples-1575\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le-15\" class=\"fn\">to_le</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-1576\"><a href=\"#examples-1576\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai64</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;little&quot;</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai64;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add-18\" class=\"fn\">checked_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-1577\"><a href=\"#examples-1577\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MAX+-+2).checked_add(1),+Some(i64::MAX+-+1));%0Aassert_eq!((i64::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_add-18\" class=\"fn\">unchecked_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-82\"><a href=\"#safety-82\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i64::MAX</code> or <code>self + rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_add\" title=\"method i64::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_add_unsigned-9\" class=\"fn\">checked_add_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1578\"><a href=\"#examples-1578\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i64::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub-15\" class=\"fn\">checked_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1579\"><a href=\"#examples-1579\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(1),+Some(i64::MIN+%2B+1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_sub-15\" class=\"fn\">unchecked_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-83\"><a href=\"#safety-83\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i64::MAX</code> or <code>self - rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_sub\" title=\"method i64::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_sub_unsigned-9\" class=\"fn\">checked_sub_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-1580\"><a href=\"#examples-1580\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i64::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul-22\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_mul-22\" class=\"fn\">checked_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1581\"><a href=\"#examples-1581\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i64::MAX));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::MAX.checked_mul(1),+Some(i64::MAX));%0Aassert_eq!(i64::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul-22\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_mul-22\" class=\"fn\">unchecked_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-84\"><a href=\"#safety-84\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i64::MAX</code> or <code>self * rhs &lt; i64::MIN</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_mul\" title=\"method i64::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div-15\" class=\"fn\">checked_div</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-1582\"><a href=\"#examples-1582\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div(-1),+None);%0Aassert_eq!((1i64).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_div_euclid-15\" class=\"fn\">checked_div_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1583\"><a href=\"#examples-1583\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9223372036854775807</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i64</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i64::MIN+%2B+1).checked_div_euclid(-1),+Some(9223372036854775807));%0Aassert_eq!(i64::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i64).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem-15\" class=\"fn\">checked_rem</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1584\"><a href=\"#examples-1584\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem(2),+Some(1));%0Aassert_eq!(5i64.checked_rem(0),+None);%0Aassert_eq!(i64::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_rem_euclid-15\" class=\"fn\">checked_rem_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-1585\"><a href=\"#examples-1585\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i64.checked_rem_euclid(0),+None);%0Aassert_eq!(i64::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_neg-19\" class=\"fn\">checked_neg</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-1586\"><a href=\"#examples-1586\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_neg(),+Some(-5));%0Aassert_eq!(i64::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shl-15\" class=\"fn\">checked_shl</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1587\"><a href=\"#examples-1587\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i64.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shl-15\" class=\"fn\">unchecked_shl</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-85\"><a href=\"#safety-85\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_shl\" title=\"method i64::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_shr-15\" class=\"fn\">checked_shr</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-1588\"><a href=\"#examples-1588\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i64.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for const_inherent_unchecked_arith\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.unchecked_shr-15\" class=\"fn\">unchecked_shr</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-86\"><a href=\"#safety-86\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"core/primitive.i64.html#method.checked_shr\" title=\"method i64::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_abs-13\" class=\"fn\">checked_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-1589\"><a href=\"#examples-1589\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i64</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i64).checked_abs(),+Some(5));%0Aassert_eq!(i64::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow-22\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_pow-22\" class=\"fn\">checked_pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-1590\"><a href=\"#examples-1590\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i64</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i64.checked_pow(2),+Some(64));%0Aassert_eq!(i64::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.checked_isqrt-9\" class=\"fn\">checked_isqrt</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-1591\"><a href=\"#examples-1591\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add-18\" class=\"fn\">saturating_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-1592\"><a href=\"#examples-1592\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add(<span class=\"number\">100</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_add(-<span class=\"number\">1</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_add(1),+101);%0Aassert_eq!(i64::MAX.saturating_add(100),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_add(-1),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_add_unsigned-9\" class=\"fn\">saturating_add_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1593\"><a href=\"#examples-1593\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.saturating_add_unsigned(2),+3);%0Aassert_eq!(i64::MAX.saturating_add_unsigned(100),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub-15\" class=\"fn\">saturating_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1594\"><a href=\"#examples-1594\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub(<span class=\"number\">100</span>), i64::MIN);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_sub(-<span class=\"number\">1</span>), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub(100),+i64::MIN);%0Aassert_eq!(i64::MAX.saturating_sub(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_sub_unsigned-9\" class=\"fn\">saturating_sub_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1595\"><a href=\"#examples-1595\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i64::MIN.saturating_sub_unsigned(100),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_neg-13\" class=\"fn\">saturating_neg</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-1596\"><a href=\"#examples-1596\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_neg(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_neg(), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_neg(),+-100);%0Aassert_eq!((-100i64).saturating_neg(),+100);%0Aassert_eq!(i64::MIN.saturating_neg(),+i64::MAX);%0Aassert_eq!(i64::MAX.saturating_neg(),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_abs-13\" class=\"fn\">saturating_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-1597\"><a href=\"#examples-1597\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_abs(), i64::MAX);\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">1</span>).saturating_abs(), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.saturating_abs(),+100);%0Aassert_eq!((-100i64).saturating_abs(),+100);%0Aassert_eq!(i64::MIN.saturating_abs(),+i64::MAX);%0Aassert_eq!((i64::MIN+%2B+1).saturating_abs(),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul-22\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_mul-22\" class=\"fn\">saturating_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1598\"><a href=\"#examples-1598\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_mul(<span class=\"number\">10</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_mul(<span class=\"number\">10</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.saturating_mul(12),+120);%0Aassert_eq!(i64::MAX.saturating_mul(10),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_mul(10),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_div-15\" class=\"fn\">saturating_div</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1599\"><a href=\"#examples-1599\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.saturating_div(-<span class=\"number\">1</span>), i64::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_div(-<span class=\"number\">1</span>), i64::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.saturating_div(2),+2);%0Aassert_eq!(i64::MAX.saturating_div(-1),+i64::MIN+%2B+1);%0Aassert_eq!(i64::MIN.saturating_div(-1),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i64</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i64.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow-22\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.saturating_pow-22\" class=\"fn\">saturating_pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-1600\"><a href=\"#examples-1600\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i64</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">2</span>), i64::MAX);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.saturating_pow(<span class=\"number\">3</span>), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i64).saturating_pow(3),+-64);%0Aassert_eq!(i64::MIN.saturating_pow(2),+i64::MAX);%0Aassert_eq!(i64::MIN.saturating_pow(3),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-15\" class=\"fn\">wrapping_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1601\"><a href=\"#examples-1601\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add_unsigned-9\" class=\"fn\">wrapping_add_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1602\"><a href=\"#examples-1602\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i64::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i64::MAX.wrapping_add_unsigned(2),+i64::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-15\" class=\"fn\">wrapping_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-1603\"><a href=\"#examples-1603\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub(i64::MAX), i64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub(i64::MAX),+i64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub_unsigned-9\" class=\"fn\">wrapping_sub_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1604\"><a href=\"#examples-1604\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i64</span>).wrapping_sub_unsigned(u64::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i64).wrapping_sub_unsigned(u64::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_mul-15\" class=\"fn\">wrapping_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-1605\"><a href=\"#examples-1605\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div-15\" class=\"fn\">wrapping_div</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-293\"><a href=\"#panics-293\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1606\"><a href=\"#examples-1606\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_div_euclid-15\" class=\"fn\">wrapping_div_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-294\"><a href=\"#panics-294\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1607\"><a href=\"#examples-1607\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem-15\" class=\"fn\">wrapping_rem</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-295\"><a href=\"#panics-295\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1608\"><a href=\"#examples-1608\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_rem_euclid-15\" class=\"fn\">wrapping_rem_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-296\"><a href=\"#panics-296\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1609\"><a href=\"#examples-1609\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_neg-19\" class=\"fn\">wrapping_neg</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1610\"><a href=\"#examples-1610\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_neg(), i64::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_neg(),+-100);%0Aassert_eq!(i64::MIN.wrapping_neg(),+i64::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shl-15\" class=\"fn\">wrapping_shl</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"core/primitive.i64.html#method.rotate_left\" title=\"method i64::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1611\"><a href=\"#examples-1611\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i64).wrapping_shl(7),+-128);%0Aassert_eq!((-1i64).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_shr-15\" class=\"fn\">wrapping_shr</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"core/primitive.i64.html#method.rotate_right\" title=\"method i64::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-1612\"><a href=\"#examples-1612\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i64</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i64).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_abs-13\" class=\"fn\">wrapping_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-1613\"><a href=\"#examples-1613\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.wrapping_abs(), i64::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.wrapping_abs(),+100);%0Aassert_eq!((-100i64).wrapping_abs(),+100);%0Aassert_eq!(i64::MIN.wrapping_abs(),+i64::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.unsigned_abs-13\" class=\"fn\">unsigned_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-1614\"><a href=\"#examples-1614\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).unsigned_abs(), <span class=\"number\">100u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.unsigned_abs(),+100u64);%0Aassert_eq!((-100i64).unsigned_abs(),+100u64);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_pow-15\" class=\"fn\">wrapping_pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-1615\"><a href=\"#examples-1615\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add-15\" class=\"fn\">overflowing_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1616\"><a href=\"#examples-1616\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MAX.overflowing_add(<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_add(2),+(7,+false));%0Aassert_eq!(i64::MAX.overflowing_add(1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.carrying_add-15\" class=\"fn\">carrying_add</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self,\n    carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"core/primitive.u64.html#method.carrying_add\" title=\"method u64::carrying_add\"><code>u64::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"core/primitive.i64.html#method.overflowing_add\" title=\"method i64::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-1617\"><a href=\"#examples-1617\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^64 + 2^64 - 1)\n// + -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^64 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">10</span>, u64::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E64+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(10,+u64::MAX);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u64::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i64::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_add_unsigned-9\" class=\"fn\">overflowing_add_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1618\"><a href=\"#examples-1618\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_add_unsigned(u64::MAX), (i64::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i64::MIN).overflowing_add_unsigned(u64::MAX),+(i64::MAX,+false));%0Aassert_eq!((i64::MAX+-+2).overflowing_add_unsigned(3),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub-15\" class=\"fn\">overflowing_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1619\"><a href=\"#examples-1619\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_sub(<span class=\"number\">1</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i64::MIN.overflowing_sub(1),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrowing_sub-15\" class=\"fn\">borrowing_sub</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self,\n    borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"core/primitive.u64.html#method.borrowing_sub\" title=\"method u64::borrowing_sub\"><code>u64::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"core/primitive.i64.html#method.overflowing_sub\" title=\"method i64::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-1620\"><a href=\"#examples-1620\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^64 + 8)\n// - -5    9    (b = -5 × 2^64 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^64 + 2^64 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i64, u64) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i64, u64) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u64::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i64::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u64::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E64+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E64+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E64+%2B+2%5E64+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i64,+u64)+=+(6,+8);%0Alet+(b1,+b0):+(i64,+u64)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u64::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i64::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u64::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_sub_unsigned-9\" class=\"fn\">overflowing_sub_unsigned</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1621\"><a href=\"#examples-1621\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i64</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MAX).overflowing_sub_unsigned(u64::MAX), (i64::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i64::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i64.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i64::MAX).overflowing_sub_unsigned(u64::MAX),+(i64::MIN,+false));%0Aassert_eq!((i64::MIN+%2B+2).overflowing_sub_unsigned(3),+(i64::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_mul-15\" class=\"fn\">overflowing_mul</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-1622\"><a href=\"#examples-1622\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div-15\" class=\"fn\">overflowing_div</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-297\"><a href=\"#panics-297\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1623\"><a href=\"#examples-1623\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_div_euclid-15\" class=\"fn\">overflowing_div_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-298\"><a href=\"#panics-298\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1624\"><a href=\"#examples-1624\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i64::MIN.overflowing_div_euclid(-1),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem-15\" class=\"fn\">overflowing_rem</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-299\"><a href=\"#panics-299\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1625\"><a href=\"#examples-1625\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_rem_euclid-15\" class=\"fn\">overflowing_rem_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-300\"><a href=\"#panics-300\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-1626\"><a href=\"#examples-1626\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i64::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg-19\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_neg-19\" class=\"fn\">overflowing_neg</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-1627\"><a href=\"#examples-1627\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i64::MIN.overflowing_neg(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i64::MIN.overflowing_neg(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shl-15\" class=\"fn\">overflowing_shl</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1628\"><a href=\"#examples-1628\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i64</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i64.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_shr-15\" class=\"fn\">overflowing_shr</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-1629\"><a href=\"#examples-1629\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i64</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i64.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_abs-13\" class=\"fn\">overflowing_abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i64::MIN for values of type i64),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-1630\"><a href=\"#examples-1630\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i64::MIN).overflowing_abs(), (i64::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i64).overflowing_abs(),+(10,+false));%0Aassert_eq!((i64::MIN).overflowing_abs(),+(i64::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.overflowing_pow-15\" class=\"fn\">overflowing_pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>\n) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-1631\"><a href=\"#examples-1631\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i64</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i64.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.pow-15\" class=\"fn\">pow</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-1632\"><a href=\"#examples-1632\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i64 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i64+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.isqrt-15\" class=\"fn\">isqrt</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-301\"><a href=\"#panics-301\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-1633\"><a href=\"#examples-1633\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.div_euclid-15\" class=\"fn\">div_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-302\"><a href=\"#panics-302\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1634\"><a href=\"#examples-1634\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.rem_euclid-15\" class=\"fn\">rem_euclid</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-303\"><a href=\"#panics-303\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-1635\"><a href=\"#examples-1635\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i64 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor-15\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_floor-15\" class=\"fn\">div_floor</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-304\"><a href=\"#panics-304\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-48\"><a href=\"#overflow-behavior-48\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1636\"><a href=\"#examples-1636\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil-15\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.div_ceil-15\" class=\"fn\">div_ceil</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-305\"><a href=\"#panics-305\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-49\"><a href=\"#overflow-behavior-49\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1637\"><a href=\"#examples-1637\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i64 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i64+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of-15\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.next_multiple_of-15\" class=\"fn\">next_multiple_of</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-306\"><a href=\"#panics-306\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-50\"><a href=\"#overflow-behavior-50\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-1638\"><a href=\"#examples-1638\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.next_multiple_of(8),+16);%0Aassert_eq!(23_i64.next_multiple_of(8),+24);%0Aassert_eq!(16_i64.next_multiple_of(-8),+16);%0Aassert_eq!(23_i64.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i64).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i64).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of-15\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#358-377\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_next_multiple_of-15\" class=\"fn\">checked_next_multiple_of</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    rhs: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-1639\"><a href=\"#examples-1639\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i64</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i64</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i64</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i64.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i64.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i64).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i64).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i64.checked_next_multiple_of(0),+None);%0Aassert_eq!(i64::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.midpoint-18\" class=\"fn\">midpoint</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-1640\"><a href=\"#examples-1640\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i64</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i64.midpoint(4),+2);%0Aassert_eq!(0i64.midpoint(-1),+-1);%0Aassert_eq!((-1i64).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog-15\" class=\"fn\">ilog</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, base: Self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-307\"><a href=\"#panics-307\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-1641\"><a href=\"#examples-1641\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog2-18\" class=\"fn\">ilog2</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-308\"><a href=\"#panics-308\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-1642\"><a href=\"#examples-1642\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10-18\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.ilog10-18\" class=\"fn\">ilog10</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-309\"><a href=\"#panics-309\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example-72\"><a href=\"#example-72\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog-15\" class=\"fn\">checked_ilog</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(\n    self,\n    base: Self\n) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-1643\"><a href=\"#examples-1643\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i64</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i64.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog2-15\" class=\"fn\">checked_ilog2</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-1644\"><a href=\"#examples-1644\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i64</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i64.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.checked_ilog10-15\" class=\"fn\">checked_ilog10</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-73\"><a href=\"#example-73\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs-13\" class=\"fn\">abs</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-51\"><a href=\"#overflow-behavior-51\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i64::MIN</code>\ncannot be represented as an\n<code>i64</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i64::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-1645\"><a href=\"#examples-1645\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.abs(),+10);%0Aassert_eq!((-10i64).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.abs_diff-15\" class=\"fn\">abs_diff</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self, other: Self) -&gt; <a class=\"primitive\" href=\"primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-1646\"><a href=\"#examples-1646\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i64</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u64</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i64</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u64</span>);\n<span class=\"macro\">assert_eq!</span>(i64::MIN.abs_diff(i64::MAX), u64::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i64.abs_diff(80),+20u64);%0Aassert_eq!(100i64.abs_diff(110),+10u64);%0Aassert_eq!((-100i64).abs_diff(80),+180u64);%0Aassert_eq!((-100i64).abs_diff(-120),+20u64);%0Aassert_eq!(i64::MIN.abs_diff(i64::MAX),+u64::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum-9\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.signum-9\" class=\"fn\">signum</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-1647\"><a href=\"#examples-1647\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i64</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i64</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i64</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i64.signum(),+1);%0Aassert_eq!(0i64.signum(),+0);%0Aassert_eq!((-10i64).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_positive-13\" class=\"fn\">is_positive</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-1648\"><a href=\"#examples-1648\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i64</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i64</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i64.is_positive());%0Aassert!(!(-10i64).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative-13\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_negative-13\" class=\"fn\">is_negative</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-1649\"><a href=\"#examples-1649\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i64</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i64</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i64).is_negative());%0Aassert!(!10i64.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_be_bytes-15\" class=\"fn\">to_be_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-1650\"><a href=\"#examples-1650\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_le_bytes-15\" class=\"fn\">to_le_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-1651\"><a href=\"#examples-1651\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.to_ne_bytes-15\" class=\"fn\">to_ne_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"core/primitive.i64.html#method.to_be_bytes\" title=\"method i64::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"core/primitive.i64.html#method.to_le_bytes\" title=\"method i64::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-1652\"><a href=\"#examples-1652\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234567890123456i64</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x1234567890123456i64.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A++++%7D+else+%7B%0A++++++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_be_bytes-15\" class=\"fn\">from_be_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-1653\"><a href=\"#examples-1653\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_le_bytes-15\" class=\"fn\">from_le_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-1654\"><a href=\"#examples-1654\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_le_bytes([<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_le_bytes(%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.from_ne_bytes-15\" class=\"fn\">from_ne_bytes</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">8</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"core/primitive.i64.html#method.from_be_bytes\" title=\"associated function i64::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"core/primitive.i64.html#method.from_le_bytes\" title=\"associated function i64::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-1655\"><a href=\"#examples-1655\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i64::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">&quot;big&quot;</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>, <span class=\"number\">0x90</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234567890123456</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i64::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78,+0x90,+0x12,+0x34,+0x56%5D%0A%7D+else+%7B%0A++++%5B0x56,+0x34,+0x12,+0x90,+0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x1234567890123456);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i64(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i64 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i64&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i64::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i64(input:+%26mut+%26%5Bu8%5D)+-%3E+i64+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci64%3E());%0A++++*input+=+rest;%0A++++i64::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.min_value-15\" class=\"fn\">min_value</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;() -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"core/primitive.i64.html#associatedconstant.MIN\" title=\"associated constant i64::MIN\"><code>i64::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value-15\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#358-377\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.max_value-15\" class=\"fn\">max_value</a>&lt;const host: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a> = true&gt;() -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future Rust version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"core/primitive.i64.html#associatedconstant.MAX\" title=\"associated constant i64::MAX\"><code>i64::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-336\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-336\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-337\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-337\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-338\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-338\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-339\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-339\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#927-929\">source</a><a href=\"#impl-SimdElement-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.SimdElement.html\" title=\"trait core::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-14\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#927-929\">source</a><a href=\"#impl-SimdElement-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.SimdElement.html\" title=\"trait core::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-310\"><a href=\"#panics-310\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-964\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-964\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics-311\"><a href=\"#panics-311\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-965\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-965\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.AddAssign.html\" title=\"trait core::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.AddAssign.html\" title=\"trait core::ops::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-966\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-966\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-336\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-336\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-967\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-967\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-337\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-337\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#172\">source</a></span><a href=\"#impl-Default-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#172\">source</a><a href=\"#method.default-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#172\">source</a></span><a href=\"#impl-Default-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#172\">source</a><a href=\"#method.default-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","core::ffi::c_longlong"],["<section id=\"impl-SimdCast-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#27\">source</a><a href=\"#impl-SimdCast-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.SimdCast.html\" title=\"trait core::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","SimdCast","core::ffi::c_long"],["<section id=\"impl-SimdCast-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#27\">source</a><a href=\"#impl-SimdCast-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.SimdCast.html\" title=\"trait core::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","SimdCast","core::ffi::c_longlong"],["<section id=\"impl-ConstParamTy-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.ConstParamTy.html\" title=\"trait core::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","ConstParamTy","core::ffi::c_long"],["<section id=\"impl-ConstParamTy-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1008-1019\">source</a><a href=\"#impl-ConstParamTy-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.ConstParamTy.html\" title=\"trait core::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","ConstParamTy","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-968\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-968\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Add.html#associatedtype.Output\" title=\"type core::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Add.html#associatedtype.Output\" title=\"type core::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-969\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-969\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Add.html#associatedtype.Output\" title=\"type core::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Add.html#associatedtype.Output\" title=\"type core::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-970\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-970\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Div.html#associatedtype.Output\" title=\"type core::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Div.html#associatedtype.Output\" title=\"type core::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-971\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-971\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Div.html#associatedtype.Output\" title=\"type core::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Div.html#associatedtype.Output\" title=\"type core::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Sum.html\" title=\"trait core::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Sum.html\" title=\"trait core::iter::Sum\">Sum</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-205\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-205\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-205\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-205\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-206\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from-206\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-206\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-206\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-340\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-340\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-341\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-341\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#130\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-69\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#130\">source</a><a href=\"#method.from-69\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#130\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-70\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#130\">source</a><a href=\"#method.from-70\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-972\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-972\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-56\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-56\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-973\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-973\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-57\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-57\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXorAssign.html\" title=\"trait core::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXorAssign.html\" title=\"trait core::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-336\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-336\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-337\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-337\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-342\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-342\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-343\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-343\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<section id=\"impl-TrustedStep-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.TrustedStep.html\" title=\"trait core::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","TrustedStep","core::ffi::c_long"],["<section id=\"impl-TrustedStep-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.TrustedStep.html\" title=\"trait core::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","TrustedStep","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-974\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-974\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-338\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-338\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-975\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-975\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-339\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-339\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-976\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-976\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-340\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-340\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-977\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-977\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-341\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-341\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-344\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-344\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-345\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-345\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-978\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-978\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-979\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-979\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-154\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-154\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-UpperExp-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-155\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-155\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-338\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-338\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-339\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-339\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-340\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-340\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-341\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-341\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-342\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-342\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-343\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-343\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-980\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-980\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-336\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-336\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-981\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-981\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-337\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-337\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-344\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-344\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-345\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-345\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-346\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-346\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-347\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-347\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXorAssign.html\" title=\"trait core::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXorAssign.html\" title=\"trait core::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-348\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-348\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-349\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-349\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAndAssign.html\" title=\"trait core::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAndAssign.html\" title=\"trait core::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Octal-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-156\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-156\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Octal-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-157\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-157\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1406-1408\">source</a></span><a href=\"#impl-PartialEq%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.eq-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1406-1408\">source</a><a href=\"#method.ne-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","core::ffi::c_longlong"],["<section id=\"impl-Eq-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Eq","core::ffi::c_long"],["<section id=\"impl-Eq-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1417\">source</a></span><a href=\"#impl-Eq-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Eq","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-982\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-982\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#585-588\">source</a></span><a href=\"#impl-Rem%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-983\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-983\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#585-588\">source</a><a href=\"#method.rem-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"#tymethod.rem\">Read more</a></div></details></div></details>","Rem","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-984\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-984\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-985\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-985\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-986\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-986\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-342\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-342\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-987\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-987\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-343\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-343\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-350\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-350\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-351\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-351\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-71\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-71\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI64</code> into an <code>i64</code></p>\n</div></details></div></details>","From","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-72\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from-72\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI64</code> into an <code>i64</code></p>\n</div></details></div></details>","From","core::ffi::c_longlong"],["<section id=\"impl-StructuralEq-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralEq","core::ffi::c_long"],["<section id=\"impl-StructuralEq-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#276-288\">source</a><a href=\"#impl-StructuralEq-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralEq","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-988\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-988\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-344\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-344\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-989\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-989\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-345\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-345\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-990\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-990\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-58\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-58\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a>) -&gt; Self::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-991\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-991\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-59\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor-59\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"core/num/struct.NonZeroI64.html\" title=\"struct core::num::NonZeroI64\">NonZeroI64</a>) -&gt; Self::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-992\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-992\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-338\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-338\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-993\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-993\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-339\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-339\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-994\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-994\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-340\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-340\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-995\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-995\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-341\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-341\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-352\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-352\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-353\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-353\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-996\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-996\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-342\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-342\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-997\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-997\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-343\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-343\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-998\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-998\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-60\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-60\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-999\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-999\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor-61\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor-61\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-813\">source</a></span><a href=\"#method.max-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-833\">source</a></span><a href=\"#method.min-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-866\">source</a></span><a href=\"#method.clamp-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-Ord-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#808-813\">source</a></span><a href=\"#method.max-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#828-833\">source</a></span><a href=\"#method.min-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#853-866\">source</a></span><a href=\"#method.clamp-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1000\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1000\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-346\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-346\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1001\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1001\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-347\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-347\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-LowerHex-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-158\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-158\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-LowerHex-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-159\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-159\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-354\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-354\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-355\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-355\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-160\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-160\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#466-469\">source</a></span><a href=\"#impl-Display-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-161\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#466-469\">source</a><a href=\"#method.fmt-161\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Display","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-356\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-356\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-357\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-357\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1002\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1002\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-348\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-348\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1003\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1003\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-349\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-349\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1004\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1004\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-344\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-344\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1005\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1005\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-345\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-345\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1006\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1006\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1007\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1007\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-346\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-346\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-347\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-347\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.AddAssign.html\" title=\"trait core::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#760\">source</a></span><a href=\"#impl-AddAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.AddAssign.html\" title=\"trait core::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#760\">source</a><a href=\"#method.add_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.RemAssign.html\" title=\"trait core::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.RemAssign.html\" title=\"trait core::ops::RemAssign\">RemAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1008\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1008\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-346\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-346\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1009\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1009\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-347\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-347\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.SubAssign.html\" title=\"trait core::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.SubAssign.html\" title=\"trait core::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-348\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-348\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-349\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-349\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-350\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-350\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-351\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-351\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Step.html\" title=\"trait core::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-14\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-14\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>, end: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Step.html\" title=\"trait core::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked-15\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked-15\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.forward\" class=\"fn\">forward</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.backward\" class=\"fn\">backward</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>, end: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1010\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1010\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-348\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-348\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1011\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1011\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-349\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-349\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1012\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1012\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-350\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-350\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1013\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1013\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-351\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-351\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-352\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-352\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-353\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-353\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-358\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-358\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-359\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-359\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#120\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-73\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#120\">source</a><a href=\"#method.from-73\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#120\">source</a></span><a href=\"#impl-From%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-74\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#120\">source</a><a href=\"#method.from-74\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>i32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1014\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1014\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-350\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-350\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1015\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1015\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-351\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-351\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<section id=\"impl-StructuralPartialEq-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralPartialEq","core::ffi::c_long"],["<section id=\"impl-StructuralPartialEq-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#208-220\">source</a><a href=\"#impl-StructuralPartialEq-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","StructuralPartialEq","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.DivAssign.html\" title=\"trait core::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.DivAssign.html\" title=\"trait core::ops::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-207\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-207\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-207\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-207\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-208\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from-208\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-208\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-208\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1016\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1016\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-352\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-352\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1017\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1017\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-353\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-353\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1018\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1018\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-352\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-352\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1019\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1019\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-353\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-353\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1020\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1020\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-354\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-354\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1021\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1021\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-355\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-355\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-354\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-354\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-355\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-355\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1022\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1022\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-356\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-356\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1023\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1023\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-357\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-357\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-356\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-356\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-357\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-357\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1024\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1024\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-354\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-354\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1025\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1025\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-355\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-355\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-360\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-360\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-361\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-361\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-362\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-362\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-363\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-363\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1026\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1026\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1027\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1027\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-364\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-364\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-365\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-365\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#127\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-75\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#127\">source</a><a href=\"#method.from-75\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#127\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-76\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#127\">source</a><a href=\"#method.from-76\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#118\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-77\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#118\">source</a><a href=\"#method.from-77\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#118\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-78\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#118\">source</a><a href=\"#method.from-78\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1028\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1028\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1029\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1029\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","core::ffi::c_longlong"],["<section id=\"impl-Copy-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Copy","core::ffi::c_long"],["<section id=\"impl-Copy-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#482-492\">source</a></span><a href=\"#impl-Copy-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","Copy","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-366\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-366\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-367\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-367\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-358\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-358\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-359\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-359\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1030\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1030\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-358\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-358\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1031\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1031\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-359\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-359\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1032\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1032\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-360\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-360\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1033\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1033\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-361\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-361\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-368\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-368\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-369\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-369\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-209\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-209\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-209\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-209\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-210\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from-210\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-210\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-210\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_longlong"],["<section id=\"impl-MaskElement-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#81\">source</a><a href=\"#impl-MaskElement-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.MaskElement.html\" title=\"trait core::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","MaskElement","core::ffi::c_long"],["<section id=\"impl-MaskElement-for-i64-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#81\">source</a><a href=\"#impl-MaskElement-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.MaskElement.html\" title=\"trait core::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section>","MaskElement","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-360\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-360\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-361\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-361\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1034\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1034\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-356\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-356\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1035\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1035\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-357\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-357\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-362\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-362\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-363\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-363\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1036\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1036\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-358\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-358\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1037\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1037\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-359\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-359\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-364\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-364\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-365\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-365\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.RemAssign.html\" title=\"trait core::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#999\">source</a></span><a href=\"#impl-RemAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.RemAssign.html\" title=\"trait core::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#999\">source</a><a href=\"#method.rem_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-370\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-370\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-371\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-371\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1038\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1038\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-360\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-360\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1039\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1039\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-361\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-361\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1040\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1040\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-362\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-362\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1041\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1041\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-363\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-363\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1042\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1042\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-364\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-364\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1043\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1043\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-365\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-365\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1044\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1044\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#109\">source</a></span><a href=\"#impl-Add%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1045\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1045\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#109\">source</a><a href=\"#method.add-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-372\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-372\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-373\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-373\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-366\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-366\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-367\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-367\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1046\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1046\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-362\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-362\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1047\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1047\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-363\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-363\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-368\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-368\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-369\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-369\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1048\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1048\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-364\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-364\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1049\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1049\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-365\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-365\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1050\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1050\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-366\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-366\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1051\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1051\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-367\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-367\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Not.html\" title=\"trait core::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1052\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1052\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Not.html\" title=\"trait core::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1053\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1053\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"#tymethod.not\">Read more</a></div></details></div></details>","Not","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-211\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-211\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-211\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-211\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-212\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from-212\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-212\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-212\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOrAssign.html\" title=\"trait core::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-42\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-42\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOrAssign.html\" title=\"trait core::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-43\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-43\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#132\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-79\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#132\">source</a><a href=\"#method.from-79\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#132\">source</a></span><a href=\"#impl-From%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-80\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#132\">source</a><a href=\"#method.from-80\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>u32</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.MulAssign.html\" title=\"trait core::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.MulAssign.html\" title=\"trait core::ops::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1054\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1054\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-366\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-366\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1055\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1055\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-367\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-367\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1056\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1056\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-368\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-368\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1057\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1057\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-369\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-369\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1058\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1058\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-370\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-370\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1059\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1059\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-371\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-371\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-312\"><a href=\"#panics-312\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1060\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1060\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-36\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-36\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#484-487\">source</a></span><a href=\"#impl-Div%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics-313\"><a href=\"#panics-313\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1061\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1061\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div-37\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#484-487\">source</a><a href=\"#method.div-37\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"#tymethod.div\">Read more</a></div></details></div></details>","Div","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-374\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-374\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-375\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-375\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-370\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-370\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-371\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-371\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1062\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1062\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#217\">source</a></span><a href=\"#impl-Sub%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1063\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1063\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#217\">source</a><a href=\"#method.sub-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"#tymethod.sub\">Read more</a></div></details></div></details>","Sub","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1064\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1064\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-368\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-368\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1065\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1065\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-369\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-369\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1066\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1066\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-370\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-370\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1067\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1067\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-371\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-371\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#114\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-81\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#114\">source</a><a href=\"#method.from-81\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#114\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-82\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#114\">source</a><a href=\"#method.from-82\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>i64</code> losslessly.</p>\n</div></details></div></details>","From","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-162\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-162\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#470-473\">source</a></span><a href=\"#impl-LowerExp-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-163\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#470-473\">source</a><a href=\"#method.fmt-163\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-372\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-372\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-373\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-373\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.DivAssign.html\" title=\"trait core::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#939\">source</a></span><a href=\"#impl-DivAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.DivAssign.html\" title=\"trait core::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#939\">source</a><a href=\"#method.div_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-374\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-374\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-375\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-375\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-376\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-376\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-377\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-377\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1068\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1068\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-372\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-372\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1069\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1069\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-373\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-373\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-376\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-376\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-377\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-377\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H: <a class=\"trait\" href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#832-845\">source</a></span><a href=\"#impl-Hash-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#832-845\">source</a><a href=\"#method.hash_slice-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H: <a class=\"trait\" href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#method.hash_slice\">Read more</a></div></details></div></details>","Hash","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1070\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1070\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#346\">source</a></span><a href=\"#impl-Mul%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1071\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1071\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#346\">source</a><a href=\"#method.mul-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"#tymethod.mul\">Read more</a></div></details></div></details>","Mul","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1072\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1072\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-374\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-374\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1073\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1073\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-375\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-375\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#94\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-83\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#94\">source</a><a href=\"#method.from-83\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i64</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-1656\"><a href=\"#examples-1656\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from(true),+1);%0Aassert_eq!(i64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#94\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-84\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#94\">source</a><a href=\"#method.from-84\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i64</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples-1657\"><a href=\"#examples-1657\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i64::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i64::from(true),+1);%0Aassert_eq!(i64::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOrAssign.html\" title=\"trait core::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-44\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-44\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOrAssign.html\" title=\"trait core::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign-45\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign-45\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1535\">source</a></span><a href=\"#impl-PartialOrd%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.partial_cmp-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.lt-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.le-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.ge-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1535\">source</a><a href=\"#method.gt-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"#method.gt\">Read more</a></div></details></div></details>","PartialOrd","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Product.html\" title=\"trait core::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Product.html\" title=\"trait core::iter::Product\">Product</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/trait.Sum.html\" title=\"trait core::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a Self</a>&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26'a+i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26'a+i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/trait.Sum.html\" title=\"trait core::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a Self</a>&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.SubAssign.html\" title=\"trait core::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#826\">source</a></span><a href=\"#impl-SubAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.SubAssign.html\" title=\"trait core::ops::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#826\">source</a><a href=\"#method.sub_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1074\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1074\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-376\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-376\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1075\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1075\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-377\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-377\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-378\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-378\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-379\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-379\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Binary-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-164\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-164\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-Binary-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-165\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-165\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/str/trait.FromStr.html\" title=\"trait core::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-21\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1396\">source</a></span><a href=\"#impl-FromStr-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/str/trait.FromStr.html\" title=\"trait core::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err-22\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err-22\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1396\">source</a><a href=\"#method.from_str-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1076\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1076\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-372\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-372\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1077\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1077\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-373\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-373\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-378\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-378\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-379\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-379\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1078\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1078\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-378\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-378\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1079\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1079\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-379\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-379\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-166\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-166\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-167\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt-167\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169-171\">source</a></span><a href=\"#method.clone_from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#229-234\">source</a></span><a href=\"#impl-Clone-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#229-234\">source</a><a href=\"#method.clone-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169-171\">source</a></span><a href=\"#method.clone_from-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1080\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1080\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-374\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-374\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1081\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1081\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-375\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-375\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Neg.html\" title=\"trait core::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1082\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1082\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#694\">source</a></span><a href=\"#impl-Neg-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Neg.html\" title=\"trait core::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1083\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1083\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#694\">source</a><a href=\"#method.neg-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"#tymethod.neg\">Read more</a></div></details></div></details>","Neg","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1084\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1084\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-376\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-376\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1085\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1085\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-377\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-377\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1086\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1086\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1087\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1087\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1088\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1088\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-378\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-378\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1089\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1089\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-379\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-379\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-380\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-380\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-381\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-381\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1090\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1090\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-380\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-380\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1091\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1091\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-381\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-381\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-380\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-380\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-381\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-381\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.MulAssign.html\" title=\"trait core::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#883\">source</a></span><a href=\"#impl-MulAssign%3C%26i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.MulAssign.html\" title=\"trait core::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#883\">source</a><a href=\"#method.mul_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/trait.Product.html\" title=\"trait core::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a Self</a>&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26'a+i64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26'a+i64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/trait.Product.html\" title=\"trait core::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.product\" class=\"fn\">product</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a Self</a>&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1092\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1092\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-380\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-380\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1093\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1093\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-381\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-381\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1094\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1094\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-382\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-382\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1095\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1095\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr-383\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr-383\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci64%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci64%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAndAssign.html\" title=\"trait core::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3Ci64%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3Ci64%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAndAssign.html\" title=\"trait core::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1096\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1096\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-382\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-382\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-1097\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1097\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl-383\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl-383\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-382\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-382\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign-383\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign-383\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#397\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-213\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#397\">source</a><a href=\"#method.try_from-213\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-213\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-213\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#397\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from-214\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#397\">source</a><a href=\"#method.try_from-214\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error-214\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-214\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-168\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-168\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-169\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#182\">source</a><a href=\"#method.fmt-169\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","core::ffi::c_longlong"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-382\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-382\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_long"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i64-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i64-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign-383\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign-383\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_longlong"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()