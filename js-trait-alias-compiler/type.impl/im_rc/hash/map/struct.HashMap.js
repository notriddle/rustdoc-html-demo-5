(function() {var type_impls = {
"cargo":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashMap%3CK,+V,+RandomState%3E-4\" class=\"impl\"><a href=\"#impl-HashMap%3CK,+V,+RandomState%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; HashMap&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.new-4\" class=\"fn\">new</a>() -&gt; HashMap&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Construct an empty hash map.</p>\n</div></details></div></details>",0,"cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashMap%3CK,+V,+RandomState%3E-5\" class=\"impl\"><a href=\"#impl-HashMap%3CK,+V,+RandomState%3E-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; HashMap&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.unit\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.unit\" class=\"fn\">unit</a>(k: K, v: V) -&gt; HashMap&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a hash map with a single mapping.</p>\n<h5 id=\"examples-144\"><a href=\"#examples-144\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map = HashMap::unit(<span class=\"number\">123</span>, <span class=\"string\">&quot;onetwothree&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(\n  map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>),\n  <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">&quot;onetwothree&quot;</span>)\n);</code></pre></div>\n</div></details></div></details>",0,"cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashMap%3CK,+V,+S%3E-12\" class=\"impl\"><a href=\"#impl-HashMap%3CK,+V,+S%3E-12\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; HashMap&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty-4\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Test whether a hash map is empty.</p>\n<p>Time: O(1)</p>\n<h5 id=\"examples-145\"><a href=\"#examples-145\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(\n  !<span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">2</span>}.is_empty()\n);\n<span class=\"macro\">assert!</span>(\n  HashMap::&lt;i32, i32&gt;::new().is_empty()\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.len-4\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Get the size of a hash map.</p>\n<p>Time: O(1)</p>\n<h5 id=\"examples-146\"><a href=\"#examples-146\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, <span class=\"macro\">hashmap!</span>{\n  <span class=\"number\">1 </span>=&gt; <span class=\"number\">11</span>,\n  <span class=\"number\">2 </span>=&gt; <span class=\"number\">22</span>,\n  <span class=\"number\">3 </span>=&gt; <span class=\"number\">33\n</span>}.len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ptr_eq\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.ptr_eq\" class=\"fn\">ptr_eq</a>(&amp;self, other: &amp;HashMap&lt;K, V, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Test whether two maps refer to the same content in memory.</p>\n<p>This is true if the two sides are references to the same map,\nor if the two maps refer to the same root node.</p>\n<p>This would return true if you’re comparing a map to itself, or\nif you’re comparing a map to a fresh clone of itself.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.with_hasher-4\" class=\"fn\">with_hasher</a>&lt;RS&gt;(hasher: RS) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html\" title=\"struct alloc::rc::Rc\">Rc</a>&lt;S, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;RS&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Construct an empty hash map using the provided hasher.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hasher-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.hasher-4\" class=\"fn\">hasher</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html\" title=\"struct alloc::rc::Rc\">Rc</a>&lt;S, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a reference to the map’s <a href=\"https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\"><code>BuildHasher</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_from\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.new_from\" class=\"fn\">new_from</a>&lt;K1, V1&gt;(&amp;self) -&gt; HashMap&lt;K1, V1, S&gt;<span class=\"where fmt-newline\">where\n    K1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h4></section></summary><div class=\"docblock\"><p>Construct an empty hash map using the same hasher as the\ncurrent hash map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.iter-4\" class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Get an iterator over the key/value pairs of a hash map.</p>\n<p>Please note that the order is consistent between maps using\nthe same hasher, but no other ordering guarantee is offered.\nItems will not come out in insertion order or sort order.\nThey will, however, come out in the same order every time for\nthe same map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.keys-4\" class=\"fn\">keys</a>(&amp;self) -&gt; Keys&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Get an iterator over a hash map’s keys.</p>\n<p>Please note that the order is consistent between maps using\nthe same hasher, but no other ordering guarantee is offered.\nItems will not come out in insertion order or sort order.\nThey will, however, come out in the same order every time for\nthe same map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.values-4\" class=\"fn\">values</a>(&amp;self) -&gt; Values&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Get an iterator over a hash map’s values.</p>\n<p>Please note that the order is consistent between maps using\nthe same hasher, but no other ordering guarantee is offered.\nItems will not come out in insertion order or sort order.\nThey will, however, come out in the same order every time for\nthe same map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.clear-4\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Discard all elements from the map.</p>\n<p>This leaves you with an empty map, and all elements that\nwere previously inside it are dropped.</p>\n<p>Time: O(n)</p>\n<h5 id=\"examples-147\"><a href=\"#examples-147\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = <span class=\"macro\">hashmap!</span>[<span class=\"number\">1</span>=&gt;<span class=\"number\">1</span>, <span class=\"number\">2</span>=&gt;<span class=\"number\">2</span>, <span class=\"number\">3</span>=&gt;<span class=\"number\">3</span>];\nmap.clear();\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details></div></details>",0,"cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashMap%3CK,+V,+S%3E-13\" class=\"impl\"><a href=\"#impl-HashMap%3CK,+V,+S%3E-13\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.get-4\" class=\"fn\">get</a>&lt;BK&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Get the value for a key from a hash map.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-148\"><a href=\"#examples-148\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map = <span class=\"macro\">hashmap!</span>{<span class=\"number\">123 </span>=&gt; <span class=\"string\">&quot;lol&quot;</span>};\n<span class=\"macro\">assert_eq!</span>(\n  map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>),\n  <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">&quot;lol&quot;</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_key_value-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.get_key_value-4\" class=\"fn\">get_key_value</a>&lt;BK&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>)&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Get the key/value pair for a key from a hash map.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-149\"><a href=\"#examples-149\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map = <span class=\"macro\">hashmap!</span>{<span class=\"number\">123 </span>=&gt; <span class=\"string\">&quot;lol&quot;</span>};\n<span class=\"macro\">assert_eq!</span>(\n  map.get_key_value(<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>),\n  <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">&quot;lol&quot;</span>))\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.contains_key-4\" class=\"fn\">contains_key</a>&lt;BK&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Test for the presence of a key in a hash map.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-150\"><a href=\"#examples-150\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map = <span class=\"macro\">hashmap!</span>{<span class=\"number\">123 </span>=&gt; <span class=\"string\">&quot;lol&quot;</span>};\n<span class=\"macro\">assert!</span>(\n  map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>)\n);\n<span class=\"macro\">assert!</span>(\n  !map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">321</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_submap_by\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.is_submap_by\" class=\"fn\">is_submap_by</a>&lt;B, RM, F&gt;(&amp;self, other: RM, cmp: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    RM: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;HashMap&lt;K, B, S&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Test whether a map is a submap of another map, meaning that\nall keys in our map must also be in the other map, with the\nsame values.</p>\n<p>Use the provided function to decide whether values are equal.</p>\n<p>Time: O(n log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_proper_submap_by\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.is_proper_submap_by\" class=\"fn\">is_proper_submap_by</a>&lt;B, RM, F&gt;(&amp;self, other: RM, cmp: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;B</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    RM: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;HashMap&lt;K, B, S&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Test whether a map is a proper submap of another map, meaning\nthat all keys in our map must also be in the other map, with\nthe same values. To be a proper submap, ours must also contain\nfewer keys than the other map.</p>\n<p>Use the provided function to decide whether values are equal.</p>\n<p>Time: O(n log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_submap\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.is_submap\" class=\"fn\">is_submap</a>&lt;RM&gt;(&amp;self, other: RM) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;V&gt;,\n    RM: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;HashMap&lt;K, V, S&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Test whether a map is a submap of another map, meaning that\nall keys in our map must also be in the other map, with the\nsame values.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-151\"><a href=\"#examples-151\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">3</span>};\n<span class=\"macro\">assert!</span>(map1.is_submap(map2));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_proper_submap\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.is_proper_submap\" class=\"fn\">is_proper_submap</a>&lt;RM&gt;(&amp;self, other: RM) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;V&gt;,\n    RM: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;HashMap&lt;K, V, S&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Test whether a map is a proper submap of another map, meaning\nthat all keys in our map must also be in the other map, with\nthe same values. To be a proper submap, ours must also contain\nfewer keys than the other map.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-152\"><a href=\"#examples-152\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">3</span>};\n<span class=\"macro\">assert!</span>(map1.is_proper_submap(map2));\n\n<span class=\"kw\">let </span>map3 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"kw\">let </span>map4 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"macro\">assert!</span>(!map3.is_proper_submap(map4));</code></pre></div>\n</div></details></div></details>",0,"cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashMap%3CK,+V,+S%3E-14\" class=\"impl\"><a href=\"#impl-HashMap%3CK,+V,+S%3E-14\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.iter_mut-4\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; IterMut&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Get a mutable iterator over the values of a hash map.</p>\n<p>Please note that the order is consistent between maps using\nthe same hasher, but no other ordering guarantee is offered.\nItems will not come out in insertion order or sort order.\nThey will, however, come out in the same order every time for\nthe same map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut-4\" class=\"fn\">get_mut</a>&lt;BK&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to the value for a key from a hash\nmap.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-153\"><a href=\"#examples-153\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = <span class=\"macro\">hashmap!</span>{<span class=\"number\">123 </span>=&gt; <span class=\"string\">&quot;lol&quot;</span>};\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(value) = map.get_mut(<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>) {\n    <span class=\"kw-2\">*</span>value = <span class=\"string\">&quot;omg&quot;</span>;\n}\n<span class=\"macro\">assert_eq!</span>(\n  map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>),\n  <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">&quot;omg&quot;</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.insert-4\" class=\"fn\">insert</a>(&amp;mut self, k: K, v: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Insert a key/value mapping into a map.</p>\n<p>If the map already has a mapping for the given key, the\nprevious value is overwritten.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-154\"><a href=\"#examples-154\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = <span class=\"macro\">hashmap!</span>{};\nmap.insert(<span class=\"number\">123</span>, <span class=\"string\">&quot;123&quot;</span>);\nmap.insert(<span class=\"number\">456</span>, <span class=\"string\">&quot;456&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(\n  map,\n  <span class=\"macro\">hashmap!</span>{<span class=\"number\">123 </span>=&gt; <span class=\"string\">&quot;123&quot;</span>, <span class=\"number\">456 </span>=&gt; <span class=\"string\">&quot;456&quot;</span>}\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.remove-4\" class=\"fn\">remove</a>&lt;BK&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Remove a key/value pair from a map, if it exists, and return\nthe removed value.</p>\n<p>This is a copy-on-write operation, so that the parts of the\nset’s structure which are shared with other sets will be\nsafely copied before mutating.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-155\"><a href=\"#examples-155\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = <span class=\"macro\">hashmap!</span>{<span class=\"number\">123 </span>=&gt; <span class=\"string\">&quot;123&quot;</span>, <span class=\"number\">456 </span>=&gt; <span class=\"string\">&quot;456&quot;</span>};\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;123&quot;</span>), map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;456&quot;</span>), map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">456</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">789</span>));\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.remove_with_key\" class=\"fn\">remove_with_key</a>&lt;BK&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Remove a key/value pair from a map, if it exists, and return\nthe removed key and value.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-156\"><a href=\"#examples-156\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = <span class=\"macro\">hashmap!</span>{<span class=\"number\">123 </span>=&gt; <span class=\"string\">&quot;123&quot;</span>, <span class=\"number\">456 </span>=&gt; <span class=\"string\">&quot;456&quot;</span>};\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">123</span>, <span class=\"string\">&quot;123&quot;</span>)), map.remove_with_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">456</span>, <span class=\"string\">&quot;456&quot;</span>)), map.remove_with_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">456</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, map.remove_with_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">789</span>));\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.entry-4\" class=\"fn\">entry</a>(&amp;mut self, key: K) -&gt; Entry&lt;'_, K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Get the <a href=\"enum.Entry.html\"><code>Entry</code></a> for a key in the map for in-place manipulation.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.update\" class=\"fn\">update</a>(&amp;self, k: K, v: V) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new hash map by inserting a key/value mapping into a map.</p>\n<p>If the map already has a mapping for the given key, the previous value\nis overwritten.</p>\n<p>Time: O(log n)</p>\n<h5 id=\"examples-157\"><a href=\"#examples-157\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map = <span class=\"macro\">hashmap!</span>{};\n<span class=\"macro\">assert_eq!</span>(\n  map.update(<span class=\"number\">123</span>, <span class=\"string\">&quot;123&quot;</span>),\n  <span class=\"macro\">hashmap!</span>{<span class=\"number\">123 </span>=&gt; <span class=\"string\">&quot;123&quot;</span>}\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.update_with\" class=\"fn\">update_with</a>&lt;F&gt;(&amp;self, k: K, v: V, f: F) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(V, V) -&gt; V,</span></h4></section></summary><div class=\"docblock\"><p>Construct a new hash map by inserting a key/value mapping into\na map.</p>\n<p>If the map already has a mapping for the given key, we call\nthe provided function with the old value and the new value,\nand insert the result as the new value.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.update_with_key\" class=\"fn\">update_with_key</a>&lt;F&gt;(&amp;self, k: K, v: V, f: F) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, V, V) -&gt; V,</span></h4></section></summary><div class=\"docblock\"><p>Construct a new map by inserting a key/value mapping into a\nmap.</p>\n<p>If the map already has a mapping for the given key, we call\nthe provided function with the key, the old value and the new\nvalue, and insert the result as the new value.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_lookup_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.update_lookup_with_key\" class=\"fn\">update_lookup_with_key</a>&lt;F&gt;(\n    &amp;self,\n    k: K,\n    v: V,\n    f: F\n) -&gt; (<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;, HashMap&lt;K, V, S&gt;)<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>, V) -&gt; V,</span></h4></section></summary><div class=\"docblock\"><p>Construct a new map by inserting a key/value mapping into a\nmap, returning the old value for the key as well as the new\nmap.</p>\n<p>If the map already has a mapping for the given key, we call\nthe provided function with the key, the old value and the new\nvalue, and insert the result as the new value.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alter\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.alter\" class=\"fn\">alter</a>&lt;F&gt;(&amp;self, f: F, k: K) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Update the value for a given key by calling a function with\nthe current value and overwriting it with the function’s\nreturn value.</p>\n<p>The function gets an <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\"><code>Option&lt;V&gt;</code></a> and\nreturns the same, so that it can decide to delete a mapping\ninstead of updating the value, and decide what to do if the\nkey isn’t in the map.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.without\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.without\" class=\"fn\">without</a>&lt;BK&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Construct a new map without the given key.</p>\n<p>Construct a map that’s a copy of the current map, absent the\nmapping for <code>key</code> if it’s present.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain-4\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.retain-4\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class=\"docblock\"><p>Filter out values from a map which don’t satisfy a predicate.</p>\n<p>This is slightly more efficient than filtering using an\niterator, in that it doesn’t need to rehash the retained\nvalues, but it still needs to reconstruct the entire tree\nstructure of the map.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-158\"><a href=\"#examples-158\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">3</span>};\nmap.retain(|k, v| <span class=\"kw-2\">*</span>k &gt; <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">3</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.extract\" class=\"fn\">extract</a>&lt;BK&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(V, HashMap&lt;K, V, S&gt;)&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Remove a key/value pair from a map, if it exists, and return\nthe removed value as well as the updated map.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.extract_with_key\" class=\"fn\">extract_with_key</a>&lt;BK&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(K, V, HashMap&lt;K, V, S&gt;)&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Remove a key/value pair from a map, if it exists, and return\nthe removed key and value as well as the updated list.</p>\n<p>Time: O(log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.union\" class=\"fn\">union</a>(self, other: HashMap&lt;K, V, S&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Construct the union of two maps, keeping the values in the\ncurrent map when keys exist in both maps.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-159\"><a href=\"#examples-159\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">3</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">3</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.union(map2));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.union_with\" class=\"fn\">union_with</a>&lt;F&gt;(self, other: HashMap&lt;K, V, S&gt;, f: F) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(V, V) -&gt; V,</span></h4></section></summary><div class=\"docblock\"><p>Construct the union of two maps, using a function to decide\nwhat to do with the value when a key is in both maps.</p>\n<p>The function is called when a value exists in both maps, and\nreceives the value from the current map as its first argument,\nand the value from the other map as the second. It should\nreturn the value to be inserted in the resulting map.</p>\n<p>Time: O(n log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.union_with_key\" class=\"fn\">union_with_key</a>&lt;F&gt;(\n    self,\n    other: HashMap&lt;K, V, S&gt;,\n    f: F\n) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, V, V) -&gt; V,</span></h4></section></summary><div class=\"docblock\"><p>Construct the union of two maps, using a function to decide\nwhat to do with the value when a key is in both maps.</p>\n<p>The function is called when a value exists in both maps, and\nreceives a reference to the key as its first argument, the\nvalue from the current map as the second argument, and the\nvalue from the other map as the third argument. It should\nreturn the value to be inserted in the resulting map.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-160\"><a href=\"#examples-160\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">5</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">9</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.union_with_key(\n    map2,\n    |key, left, right| left + right\n));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unions\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.unions\" class=\"fn\">unions</a>&lt;I&gt;(i: I) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = HashMap&lt;K, V, S&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Construct the union of a sequence of maps, selecting the value\nof the leftmost when a key appears in more than one map.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-161\"><a href=\"#examples-161\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">3</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">3</span>};\n<span class=\"macro\">assert_eq!</span>(expected, HashMap::unions(<span class=\"macro\">vec!</span>[map1, map2]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unions_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.unions_with\" class=\"fn\">unions_with</a>&lt;I, F&gt;(i: I, f: F) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = HashMap&lt;K, V, S&gt;&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(V, V) -&gt; V,</span></h4></section></summary><div class=\"docblock\"><p>Construct the union of a sequence of maps, using a function to\ndecide what to do with the value when a key is in more than\none map.</p>\n<p>The function is called when a value exists in multiple maps,\nand receives the value from the current map as its first\nargument, and the value from the next map as the second. It\nshould return the value to be inserted in the resulting map.</p>\n<p>Time: O(n log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unions_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.unions_with_key\" class=\"fn\">unions_with_key</a>&lt;I, F&gt;(i: I, f: F) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = HashMap&lt;K, V, S&gt;&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, V, V) -&gt; V,</span></h4></section></summary><div class=\"docblock\"><p>Construct the union of a sequence of maps, using a function to\ndecide what to do with the value when a key is in more than\none map.</p>\n<p>The function is called when a value exists in multiple maps,\nand receives a reference to the key as its first argument, the\nvalue from the current map as the second argument, and the\nvalue from the next map as the third argument. It should\nreturn the value to be inserted in the resulting map.</p>\n<p>Time: O(n log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.difference\" class=\"fn\">difference</a>(self, other: HashMap&lt;K, V, S&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Construct the symmetric difference between two maps by discarding keys\nwhich occur in both maps.</p>\n<p>This is an alias for the\n<a href=\"#method.symmetric_difference\"><code>symmetric_difference</code></a> method.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-162\"><a href=\"#examples-162\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">5</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.difference(map2));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.symmetric_difference\" class=\"fn\">symmetric_difference</a>(self, other: HashMap&lt;K, V, S&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Construct the symmetric difference between two maps by discarding keys\nwhich occur in both maps.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-163\"><a href=\"#examples-163\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">5</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.symmetric_difference(map2));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.difference_with\" class=\"fn\">difference_with</a>&lt;F&gt;(\n    self,\n    other: HashMap&lt;K, V, S&gt;,\n    f: F\n) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(V, V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Construct the symmetric difference between two maps by using a function\nto decide what to do if a key occurs in both.</p>\n<p>This is an alias for the\n<a href=\"#method.symmetric_difference_with\"><code>symmetric_difference_with</code></a> method.</p>\n<p>Time: O(n log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.symmetric_difference_with\" class=\"fn\">symmetric_difference_with</a>&lt;F&gt;(\n    self,\n    other: HashMap&lt;K, V, S&gt;,\n    f: F\n) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(V, V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Construct the symmetric difference between two maps by using a function\nto decide what to do if a key occurs in both.</p>\n<p>Time: O(n log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.difference_with_key\" class=\"fn\">difference_with_key</a>&lt;F&gt;(\n    self,\n    other: HashMap&lt;K, V, S&gt;,\n    f: F\n) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, V, V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Construct the symmetric difference between two maps by using a function\nto decide what to do if a key occurs in both. The function\nreceives the key as well as both values.</p>\n<p>This is an alias for the\n<a href=\"#method.symmetric_difference_with_key\"><code>symmetric_difference_with</code>_key</a>\nmethod.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-164\"><a href=\"#examples-164\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">5</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">9</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.difference_with_key(\n    map2,\n    |key, left, right| <span class=\"prelude-val\">Some</span>(left + right)\n));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.symmetric_difference_with_key\" class=\"fn\">symmetric_difference_with_key</a>&lt;F&gt;(\n    self,\n    other: HashMap&lt;K, V, S&gt;,\n    f: F\n) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, V, V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Construct the symmetric difference between two maps by using a function\nto decide what to do if a key occurs in both. The function\nreceives the key as well as both values.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-165\"><a href=\"#examples-165\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">5</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">9</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.symmetric_difference_with_key(\n    map2,\n    |key, left, right| <span class=\"prelude-val\">Some</span>(left + right)\n));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_complement\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.relative_complement\" class=\"fn\">relative_complement</a>(self, other: HashMap&lt;K, V, S&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Construct the relative complement between two maps by discarding keys\nwhich occur in <code>other</code>.</p>\n<p>Time: O(m log n) where m is the size of the other map</p>\n<h5 id=\"examples-166\"><a href=\"#examples-166\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">ordmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">ordmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">5</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">ordmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.relative_complement(map2));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.intersection\" class=\"fn\">intersection</a>(self, other: HashMap&lt;K, V, S&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Construct the intersection of two maps, keeping the values\nfrom the current map.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-167\"><a href=\"#examples-167\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">3</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.intersection(map2));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.intersection_with\" class=\"fn\">intersection_with</a>&lt;B, C, F&gt;(\n    self,\n    other: HashMap&lt;K, B, S&gt;,\n    f: F\n) -&gt; HashMap&lt;K, C, S&gt;<span class=\"where fmt-newline\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(V, B) -&gt; C,</span></h4></section></summary><div class=\"docblock\"><p>Construct the intersection of two maps, calling a function\nwith both values for each key and using the result as the\nvalue for the key.</p>\n<p>Time: O(n log n)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection_with_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"#method.intersection_with_key\" class=\"fn\">intersection_with_key</a>&lt;B, C, F&gt;(\n    self,\n    other: HashMap&lt;K, B, S&gt;,\n    f: F\n) -&gt; HashMap&lt;K, C, S&gt;<span class=\"where fmt-newline\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, V, B) -&gt; C,</span></h4></section></summary><div class=\"docblock\"><p>Construct the intersection of two maps, calling a function\nwith the key and both values for each key and using the result\nas the value for the key.</p>\n<p>Time: O(n log n)</p>\n<h5 id=\"examples-168\"><a href=\"#examples-168\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>map1 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">1 </span>=&gt; <span class=\"number\">1</span>, <span class=\"number\">2 </span>=&gt; <span class=\"number\">2</span>};\n<span class=\"kw\">let </span>map2 = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">3</span>, <span class=\"number\">3 </span>=&gt; <span class=\"number\">4</span>};\n<span class=\"kw\">let </span>expected = <span class=\"macro\">hashmap!</span>{<span class=\"number\">2 </span>=&gt; <span class=\"number\">5</span>};\n<span class=\"macro\">assert_eq!</span>(expected, map1.intersection_with_key(\n    map2,\n    |key, left, right| left + right\n));</code></pre></div>\n</div></details></div></details>",0,"cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E-4\" class=\"impl\"><a href=\"#impl-PartialEq%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;HashMap&lt;K, V, S&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-4\" class=\"method trait-impl\"><a href=\"#method.eq-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;HashMap&lt;K, V, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#231\">source</a></span><a href=\"#method.ne-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E-5\" class=\"impl\"><a href=\"#impl-PartialEq%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;HashMap&lt;K, V, S&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;V&gt;,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-5\" class=\"method trait-impl\"><a href=\"#method.eq-5\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;HashMap&lt;K, V, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#231\">source</a></span><a href=\"#method.ne-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Hash-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#242-244\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C%26'a+BK%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3C%26'a+BK%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, BK, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a BK</a>&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>\n) -&gt; &amp;mut &lt;HashMap&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a BK</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut","cargo::core::resolver::context::Activations"],["<section id=\"impl-Eq-for-HashMap%3CK,+V,+S%3E-4\" class=\"impl\"><a href=\"#impl-Eq-for-HashMap%3CK,+V,+S%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section>","Eq","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(RK,+RV)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Extend%3C(RK,+RV)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S, RK, RV&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(RK, RV)</a>&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;RK&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;RV&gt;,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend-8\" class=\"method trait-impl\"><a href=\"#method.extend-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(RK, RV)</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#375\">source</a><a href=\"#method.extend_one-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#383\">source</a><a href=\"#method.extend_reserve-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-HashMap%3CK,+V,+S%3E-4\" class=\"impl\"><a href=\"#impl-IntoIterator-for-HashMap%3CK,+V,+S%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = ConsumingIter&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter-4\" class=\"method trait-impl\"><a href=\"#method.into_iter-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;HashMap&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3C(K,+V),+Global%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-From%3CVec%3C(K,+V),+Global%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(m: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26'a+BTreeMap%3CK,+V,+Global%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-From%3C%26'a+BTreeMap%3CK,+V,+Global%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(m: &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26'm+HashMap%3C%26'k+K,+%26'v+V,+SA%3E%3E-for-HashMap%3COK,+OV,+SB%3E\" class=\"impl\"><a href=\"#impl-From%3C%26'm+HashMap%3C%26'k+K,+%26'v+V,+SA%3E%3E-for-HashMap%3COK,+OV,+SB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'m, 'k, 'v, K, V, OK, OV, SA, SB&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'m HashMap&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'k K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'v V</a>, SA&gt;&gt; for HashMap&lt;OK, OV, SB&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = OK&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = OV&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    OK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;K&gt;,\n    OV: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;V&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    SA: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    SB: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(m: &amp;HashMap&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>, SA&gt;) -&gt; HashMap&lt;OK, OV, SB&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26'a+HashMap%3CK,+V,+RandomState%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-From%3C%26'a+HashMap%3CK,+V,+RandomState%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(m: &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHashMap%3CK,+V,+RandomState%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-From%3CHashMap%3CK,+V,+RandomState%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(m: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBTreeMap%3CK,+V,+Global%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-From%3CBTreeMap%3CK,+V,+Global%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(m: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;K, V, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26'a+Vec%3C(K,+V),+Global%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-From%3C%26'a+Vec%3C(K,+V),+Global%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(m: &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/alloc/struct.Global.html\" title=\"struct alloc::alloc::Global\">Global</a>&gt;) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26'a+%5B(K,+V)%5D%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-From%3C%26'a+%5B(K,+V)%5D%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>]&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(m: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>]) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Sum%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;HashMap&lt;K, V, S&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(it: I) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = HashMap&lt;K, V, S&gt;&gt;,</span></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Ord-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;HashMap&lt;K, V, S&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#808-810\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#828-830\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#853-856\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Self&gt;,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;HashMap&lt;K, V, S&gt;&gt; for HashMap&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C%26'a+BK%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Index%3C%26'a+BK%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, BK, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a BK</a>&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    BK: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BK&gt;,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index-4\" class=\"method trait-impl\"><a href=\"#method.index-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.index\" class=\"fn\">index</a>(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;BK</a>) -&gt; &amp;&lt;HashMap&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a BK</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"#tymethod.index\">Read more</a></div></details></div></details>","Index","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Add%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;HashMap&lt;K, V, S&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.add\" class=\"fn\">add</a>(\n    self,\n    other: HashMap&lt;K, V, S&gt;\n) -&gt; &lt;HashMap&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;HashMap&lt;K, V, S&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"#tymethod.add\">Read more</a></div></details></div></details>","Add","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-HashMap%3CK,+V,+S%3E-4\" class=\"impl\"><a href=\"#impl-Debug-for-HashMap%3CK,+V,+S%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-4\" class=\"method trait-impl\"><a href=\"#method.fmt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-HashMap%3CK,+V,+S%3E-5\" class=\"impl\"><a href=\"#impl-Debug-for-HashMap%3CK,+V,+S%3E-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-5\" class=\"method trait-impl\"><a href=\"#method.fmt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E-4\" class=\"impl\"><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter-4\" class=\"method trait-impl\"><a href=\"#method.from_iter-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(i: T) -&gt; HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-HashMap%3CK,+V,+S%3E-4\" class=\"impl\"><a href=\"#impl-Clone-for-HashMap%3CK,+V,+S%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-4\" class=\"method trait-impl\"><a href=\"#method.clone-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Clone a map.</p>\n<p>Time: O(1)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-HashMap%3CK,+V,+S%3E-4\" class=\"impl\"><a href=\"#impl-Default-for-HashMap%3CK,+V,+S%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-4\" class=\"method trait-impl\"><a href=\"#method.default-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; HashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"#tymethod.default\">Read more</a></div></details></div></details>","Default","cargo::core::resolver::context::Activations"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CHashMap%3CK,+V,+S%3E%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;HashMap&lt;K, V, S&gt;&gt; for HashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;K&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;V&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;HashMap&lt;K, V, S&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1090\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1107\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1123\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1140\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","cargo::core::resolver::context::Activations"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()