(function() {var type_impls = {
"miri":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#799\">source</a><a href=\"#impl-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new-3\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.24.0\">1.0.0 (const: 1.24.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#812\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new-3\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell</code> containing <code>value</code>.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/78729\" title=\"Tracking issue for const_cell_into_inner\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#835\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Consumes the <code>RefCell</code>, returning the wrapped value.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>five = c.into_inner();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#862\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace\" class=\"fn\">replace</a>(&amp;self, t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one, returning the old value,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.replace.html\"><code>std::mem::replace</code></a>.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#885\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace_with\" class=\"fn\">replace_with</a>&lt;F&gt;(&amp;self, f: F) -&gt; T<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; T,</span></h4></section></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one computed from <code>f</code>, returning\nthe old value, without deinitializing either one.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace_with(|<span class=\"kw-2\">&amp;mut </span>old| old + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#913\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap\" class=\"fn\">swap</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Swaps the wrapped value of <code>self</code> with the wrapped value of <code>other</code>,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.swap.html\"><code>std::mem::swap</code></a>.</p>\n<h5 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently borrowed, or\nif <code>self</code> and <code>other</code> point to the same <code>RefCell</code>.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>d = RefCell::new(<span class=\"number\">6</span>);\nc.swap(<span class=\"kw-2\">&amp;</span>d);\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));\n<span class=\"macro\">assert_eq!</span>(d, RefCell::new(<span class=\"number\">5</span>));</code></pre></div>\n</div></details></div></details>",0,"miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#799\">source</a><a href=\"#impl-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new-4\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.24.0\">1.0.0 (const: 1.24.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#812\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new-4\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell</code> containing <code>value</code>.</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/78729\" title=\"Tracking issue for const_cell_into_inner\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#835\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner-1\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Consumes the <code>RefCell</code>, returning the wrapped value.</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>five = c.into_inner();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#862\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace-1\" class=\"fn\">replace</a>(&amp;self, t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one, returning the old value,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.replace.html\"><code>std::mem::replace</code></a>.</p>\n<h5 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_with-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#885\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace_with-1\" class=\"fn\">replace_with</a>&lt;F&gt;(&amp;self, f: F) -&gt; T<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; T,</span></h4></section></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one computed from <code>f</code>, returning\nthe old value, without deinitializing either one.</p>\n<h5 id=\"panics-4\"><a href=\"#panics-4\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace_with(|<span class=\"kw-2\">&amp;mut </span>old| old + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#913\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap-1\" class=\"fn\">swap</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Swaps the wrapped value of <code>self</code> with the wrapped value of <code>other</code>,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.swap.html\"><code>std::mem::swap</code></a>.</p>\n<h5 id=\"panics-5\"><a href=\"#panics-5\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently borrowed, or\nif <code>self</code> and <code>other</code> point to the same <code>RefCell</code>.</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>d = RefCell::new(<span class=\"number\">6</span>);\nc.swap(<span class=\"kw-2\">&amp;</span>d);\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));\n<span class=\"macro\">assert_eq!</span>(d, RefCell::new(<span class=\"number\">5</span>));</code></pre></div>\n</div></details></div></details>",0,"miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#918\">source</a><a href=\"#impl-RefCell%3CT%3E-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#953\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple\nimmutable borrows can be taken out at the same time.</p>\n<h5 id=\"panics-6\"><a href=\"#panics-6\">Panics</a></h5>\n<p>Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow\"><code>try_borrow</code></a>.</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>borrowed_five = c.borrow();\n<span class=\"kw\">let </span>borrowed_five2 = c.borrow();</code></pre></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>m = c.borrow_mut();\n<span class=\"kw\">let </span>b = c.borrow(); <span class=\"comment\">// this causes a panic</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#988\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_borrow\" class=\"fn\">try_borrow</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowError.html\" title=\"struct core::cell::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is currently mutably\nborrowed.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple immutable borrows can be\ntaken out at the same time.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow\"><code>borrow</code></a>.</p>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_ok());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1049\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<h5 id=\"panics-7\"><a href=\"#panics-7\">Panics</a></h5>\n<p>Panics if the value is currently borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow_mut\"><code>try_borrow_mut</code></a>.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"string\">&quot;hello&quot;</span>.to_owned());\n\n<span class=\"kw-2\">*</span>c.borrow_mut() = <span class=\"string\">&quot;bonjour&quot;</span>.to_owned();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>c.borrow(), <span class=\"string\">&quot;bonjour&quot;</span>);</code></pre></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>m = c.borrow();\n\n<span class=\"kw\">let </span>b = c.borrow_mut(); <span class=\"comment\">// this causes a panic</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1081\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_borrow_mut\" class=\"fn\">try_borrow_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowMutError.html\" title=\"struct core::cell::BorrowMutError\">BorrowMutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value, returning an error if the value is currently borrowed.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow_mut\"><code>borrow_mut</code></a>.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow_mut().is_err());\n}\n\n<span class=\"macro\">assert!</span>(c.try_borrow_mut().is_ok());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1116\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the underlying data in this cell.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>ptr = c.as_ptr();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1149\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this method borrows <code>RefCell</code> mutably, it is statically guaranteed\nthat no borrows to the underlying data exist. The dynamic checks inherent\nin <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" title=\"method core::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> and most other methods of <code>RefCell</code> are therefore\nunnecessary.</p>\n<p>This method can only be called if <code>RefCell</code> can be mutably borrowed,\nwhich in general is only the case directly after the <code>RefCell</code> has\nbeen created. In these situations, skipping the aforementioned dynamic\nborrowing checks may yield better ergonomics and runtime-performance.</p>\n<p>In most situations where <code>RefCell</code> is used, it can’t be borrowed mutably.\nUse <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" title=\"method core::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> to get mutable access to the underlying data then.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw-2\">*</span>c.get_mut() += <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.undo_leak\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1175\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.undo_leak\" class=\"fn\">undo_leak</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>cell_leak</code>)</span></div></span></summary><div class=\"docblock\"><p>Undo the effect of leaked guards on the borrow state of the <code>RefCell</code>.</p>\n<p>This call is similar to <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.get_mut\" title=\"method core::cell::RefCell::get_mut\"><code>get_mut</code></a> but more specialized. It borrows <code>RefCell</code> mutably to\nensure no borrows exist and then resets the state tracking shared borrows. This is relevant\nif some <code>Ref</code> or <code>RefMut</code> borrows have been leaked.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cell_leak)]\n</span><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">0</span>);\nstd::mem::forget(c.borrow_mut());\n\n<span class=\"macro\">assert!</span>(c.try_borrow().is_err());\nc.undo_leak();\n<span class=\"macro\">assert!</span>(c.try_borrow().is_ok());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_unguarded\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1209\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.try_borrow_unguarded\" class=\"fn\">try_borrow_unguarded</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowError.html\" title=\"struct core::cell::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is\ncurrently mutably borrowed.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>Unlike <code>RefCell::borrow</code>, this method is unsafe because it does not\nreturn a <code>Ref</code>, thus leaving the borrow flag untouched. Mutably\nborrowing the <code>RefCell</code> while the reference returned by this method\nis alive is undefined behaviour.</p>\n<h5 id=\"examples-36\"><a href=\"#examples-36\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_ok());\n}</code></pre></div>\n</div></details></div></details>",0,"miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E-3\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#918\">source</a><a href=\"#impl-RefCell%3CT%3E-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#953\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrow-1\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple\nimmutable borrows can be taken out at the same time.</p>\n<h5 id=\"panics-8\"><a href=\"#panics-8\">Panics</a></h5>\n<p>Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow\"><code>try_borrow</code></a>.</p>\n<h5 id=\"examples-37\"><a href=\"#examples-37\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>borrowed_five = c.borrow();\n<span class=\"kw\">let </span>borrowed_five2 = c.borrow();</code></pre></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>m = c.borrow_mut();\n<span class=\"kw\">let </span>b = c.borrow(); <span class=\"comment\">// this causes a panic</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#988\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_borrow-1\" class=\"fn\">try_borrow</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowError.html\" title=\"struct core::cell::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is currently mutably\nborrowed.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple immutable borrows can be\ntaken out at the same time.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow\"><code>borrow</code></a>.</p>\n<h5 id=\"examples-38\"><a href=\"#examples-38\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_ok());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1049\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrow_mut-1\" class=\"fn\">borrow_mut</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<h5 id=\"panics-9\"><a href=\"#panics-9\">Panics</a></h5>\n<p>Panics if the value is currently borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow_mut\"><code>try_borrow_mut</code></a>.</p>\n<h5 id=\"examples-39\"><a href=\"#examples-39\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"string\">&quot;hello&quot;</span>.to_owned());\n\n<span class=\"kw-2\">*</span>c.borrow_mut() = <span class=\"string\">&quot;bonjour&quot;</span>.to_owned();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>c.borrow(), <span class=\"string\">&quot;bonjour&quot;</span>);</code></pre></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>m = c.borrow();\n\n<span class=\"kw\">let </span>b = c.borrow_mut(); <span class=\"comment\">// this causes a panic</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_mut-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1081\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_borrow_mut-1\" class=\"fn\">try_borrow_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowMutError.html\" title=\"struct core::cell::BorrowMutError\">BorrowMutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value, returning an error if the value is currently borrowed.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow_mut\"><code>borrow_mut</code></a>.</p>\n<h5 id=\"examples-40\"><a href=\"#examples-40\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow_mut().is_err());\n}\n\n<span class=\"macro\">assert!</span>(c.try_borrow_mut().is_ok());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1116\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr-1\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the underlying data in this cell.</p>\n<h5 id=\"examples-41\"><a href=\"#examples-41\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>ptr = c.as_ptr();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1149\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut-1\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this method borrows <code>RefCell</code> mutably, it is statically guaranteed\nthat no borrows to the underlying data exist. The dynamic checks inherent\nin <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" title=\"method core::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> and most other methods of <code>RefCell</code> are therefore\nunnecessary.</p>\n<p>This method can only be called if <code>RefCell</code> can be mutably borrowed,\nwhich in general is only the case directly after the <code>RefCell</code> has\nbeen created. In these situations, skipping the aforementioned dynamic\nborrowing checks may yield better ergonomics and runtime-performance.</p>\n<p>In most situations where <code>RefCell</code> is used, it can’t be borrowed mutably.\nUse <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" title=\"method core::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> to get mutable access to the underlying data then.</p>\n<h5 id=\"examples-42\"><a href=\"#examples-42\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw-2\">*</span>c.get_mut() += <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.undo_leak-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1175\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.undo_leak-1\" class=\"fn\">undo_leak</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>cell_leak</code>)</span></div></span></summary><div class=\"docblock\"><p>Undo the effect of leaked guards on the borrow state of the <code>RefCell</code>.</p>\n<p>This call is similar to <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.get_mut\" title=\"method core::cell::RefCell::get_mut\"><code>get_mut</code></a> but more specialized. It borrows <code>RefCell</code> mutably to\nensure no borrows exist and then resets the state tracking shared borrows. This is relevant\nif some <code>Ref</code> or <code>RefMut</code> borrows have been leaked.</p>\n<h5 id=\"examples-43\"><a href=\"#examples-43\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cell_leak)]\n</span><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">0</span>);\nstd::mem::forget(c.borrow_mut());\n\n<span class=\"macro\">assert!</span>(c.try_borrow().is_err());\nc.undo_leak();\n<span class=\"macro\">assert!</span>(c.try_borrow().is_ok());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_unguarded-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1209\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.try_borrow_unguarded-1\" class=\"fn\">try_borrow_unguarded</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowError.html\" title=\"struct core::cell::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is\ncurrently mutably borrowed.</p>\n<h5 id=\"safety-2\"><a href=\"#safety-2\">Safety</a></h5>\n<p>Unlike <code>RefCell::borrow</code>, this method is unsafe because it does not\nreturn a <code>Ref</code>, thus leaving the borrow flag untouched. Mutably\nborrowing the <code>RefCell</code> while the reference returned by this method\nis alive is undefined behaviour.</p>\n<h5 id=\"examples-44\"><a href=\"#examples-44\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_ok());\n}</code></pre></div>\n</div></details></div></details>",0,"miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E-4\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1228\">source</a><a href=\"#impl-RefCell%3CT%3E-4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1247\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Takes the wrapped value, leaving <code>Default::default()</code> in its place.</p>\n<h5 id=\"panics-10\"><a href=\"#panics-10\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-45\"><a href=\"#examples-45\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = c.take();\n\n<span class=\"macro\">assert_eq!</span>(five, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(c.into_inner(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E-5\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1228\">source</a><a href=\"#impl-RefCell%3CT%3E-5\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.take-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1247\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take-1\" class=\"fn\">take</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Takes the wrapped value, leaving <code>Default::default()</code> in its place.</p>\n<h5 id=\"panics-11\"><a href=\"#panics-11\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-46\"><a href=\"#examples-46\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = c.take();\n\n<span class=\"macro\">assert_eq!</span>(five, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(c.into_inner(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"miri::intptrcast::GlobalState"],["<section id=\"impl-Sync-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1256\">source</a></span><a href=\"#impl-Sync-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Sync","miri::borrow_tracker::GlobalState"],["<section id=\"impl-Sync-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1256\">source</a></span><a href=\"#impl-Sync-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Sync","miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1303\">source</a></span><a href=\"#impl-PartialOrd%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1308\">source</a><a href=\"#method.partial_cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-12\"><a href=\"#panics-12\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1316\">source</a><a href=\"#method.lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-13\"><a href=\"#panics-13\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1324\">source</a><a href=\"#method.le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-14\"><a href=\"#panics-14\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1332\">source</a><a href=\"#method.gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-15\"><a href=\"#panics-15\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1340\">source</a><a href=\"#method.ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-16\"><a href=\"#panics-16\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details>","PartialOrd","miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1303\">source</a></span><a href=\"#impl-PartialOrd%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1308\">source</a><a href=\"#method.partial_cmp-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-17\"><a href=\"#panics-17\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1316\">source</a><a href=\"#method.lt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-18\"><a href=\"#panics-18\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1324\">source</a><a href=\"#method.le-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-19\"><a href=\"#panics-19\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1332\">source</a><a href=\"#method.gt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-20\"><a href=\"#panics-20\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1340\">source</a><a href=\"#method.ge-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-21\"><a href=\"#panics-21\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details>","PartialOrd","miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1357\">source</a></span><a href=\"#impl-From%3CT%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1359\">source</a><a href=\"#method.from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.</p>\n</div></details></div></details>","From","miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1357\">source</a></span><a href=\"#impl-From%3CT%3E-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1359\">source</a><a href=\"#method.from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.</p>\n</div></details></div></details>","From","miri::intptrcast::GlobalState"],["<section id=\"impl-Send-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1253\">source</a></span><a href=\"#impl-Send-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Send","miri::borrow_tracker::GlobalState"],["<section id=\"impl-Send-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1253\">source</a></span><a href=\"#impl-Send-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Send","miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1280\">source</a></span><a href=\"#impl-Default-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1283\">source</a><a href=\"#method.default-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details>","Default","miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1280\">source</a></span><a href=\"#impl-Default-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1283\">source</a><a href=\"#method.default-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details>","Default","miri::intptrcast::GlobalState"],["<section id=\"impl-Eq-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1300\">source</a></span><a href=\"#impl-Eq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Eq","miri::borrow_tracker::GlobalState"],["<section id=\"impl-Eq-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1300\">source</a></span><a href=\"#impl-Eq-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Eq","miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1346\">source</a></span><a href=\"#impl-Ord-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1351\">source</a><a href=\"#method.cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-22\"><a href=\"#panics-22\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details>","Ord","miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1346\">source</a></span><a href=\"#impl-Ord-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1351\">source</a><a href=\"#method.cmp-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-23\"><a href=\"#panics-23\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details>","Ord","miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1289\">source</a></span><a href=\"#impl-PartialEq%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1294\">source</a><a href=\"#method.eq-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-24\"><a href=\"#panics-24\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#231\">source</a></span><a href=\"#method.ne-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1289\">source</a></span><a href=\"#impl-PartialEq%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1294\">source</a><a href=\"#method.eq-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-25\"><a href=\"#panics-25\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#231\">source</a></span><a href=\"#method.ne-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","miri::intptrcast::GlobalState"],["<section id=\"impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1365\">source</a><a href=\"#impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;U&gt;,</span></h3></section>","CoerceUnsized","miri::borrow_tracker::GlobalState"],["<section id=\"impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1365\">source</a><a href=\"#impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;U&gt;,</span></h3></section>","CoerceUnsized","miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1259\">source</a></span><a href=\"#impl-Clone-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1265\">source</a><a href=\"#method.clone-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-26\"><a href=\"#panics-26\">Panics</a></h5>\n<p>Panics if the value is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1274\">source</a><a href=\"#method.clone_from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-27\"><a href=\"#panics-27\">Panics</a></h5>\n<p>Panics if <code>other</code> is currently mutably borrowed.</p>\n</div></details></div></details>","Clone","miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1259\">source</a></span><a href=\"#impl-Clone-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1265\">source</a><a href=\"#method.clone-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-28\"><a href=\"#panics-28\">Panics</a></h5>\n<p>Panics if the value is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1274\">source</a><a href=\"#method.clone_from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-29\"><a href=\"#panics-29\">Panics</a></h5>\n<p>Panics if <code>other</code> is currently mutably borrowed.</p>\n</div></details></div></details>","Clone","miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#2544\">source</a></span><a href=\"#impl-Debug-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#2545\">source</a><a href=\"#method.fmt-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RefCell%3CT%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#2544\">source</a></span><a href=\"#impl-Debug-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#2545\">source</a><a href=\"#method.fmt-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","miri::intptrcast::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitTags-for-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/miri/tag_gc.rs.html#19-23\">source</a><a href=\"#impl-VisitTags-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"miri/tag_gc/trait.VisitTags.html\" title=\"trait miri::tag_gc::VisitTags\">VisitTags</a>&gt; <a class=\"trait\" href=\"miri/tag_gc/trait.VisitTags.html\" title=\"trait miri::tag_gc::VisitTags\">VisitTags</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.visit_tags-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/miri/tag_gc.rs.html#20-22\">source</a><a href=\"#method.visit_tags-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.visit_tags\" class=\"fn\">visit_tags</a>(&amp;self, visit: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"miri/borrow_tracker/struct.BorTag.html\" title=\"struct miri::borrow_tracker::BorTag\">BorTag</a>))</h4></section></div></details>","VisitTags","miri::borrow_tracker::GlobalState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitTags-for-RefCell%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"src/miri/tag_gc.rs.html#19-23\">source</a><a href=\"#impl-VisitTags-for-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"miri/tag_gc/trait.VisitTags.html\" title=\"trait miri::tag_gc::VisitTags\">VisitTags</a>&gt; <a class=\"trait\" href=\"miri/tag_gc/trait.VisitTags.html\" title=\"trait miri::tag_gc::VisitTags\">VisitTags</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.visit_tags-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/miri/tag_gc.rs.html#20-22\">source</a><a href=\"#method.visit_tags-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.visit_tags\" class=\"fn\">visit_tags</a>(&amp;self, visit: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"miri/borrow_tracker/struct.BorTag.html\" title=\"struct miri::borrow_tracker::BorTag\">BorTag</a>))</h4></section></div></details>","VisitTags","miri::intptrcast::GlobalState"]],
"rustc_resolve":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#799\">source</a><a href=\"#impl-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.24.0\">1.0.0 (const: 1.24.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#812\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell</code> containing <code>value</code>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/78729\" title=\"Tracking issue for const_cell_into_inner\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#835\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Consumes the <code>RefCell</code>, returning the wrapped value.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>five = c.into_inner();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#862\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace\" class=\"fn\">replace</a>(&amp;self, t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one, returning the old value,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.replace.html\"><code>std::mem::replace</code></a>.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#885\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace_with\" class=\"fn\">replace_with</a>&lt;F&gt;(&amp;self, f: F) -&gt; T<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; T,</span></h4></section></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one computed from <code>f</code>, returning\nthe old value, without deinitializing either one.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace_with(|<span class=\"kw-2\">&amp;mut </span>old| old + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#913\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap\" class=\"fn\">swap</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Swaps the wrapped value of <code>self</code> with the wrapped value of <code>other</code>,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.swap.html\"><code>std::mem::swap</code></a>.</p>\n<h5 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently borrowed, or\nif <code>self</code> and <code>other</code> point to the same <code>RefCell</code>.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>d = RefCell::new(<span class=\"number\">6</span>);\nc.swap(<span class=\"kw-2\">&amp;</span>d);\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));\n<span class=\"macro\">assert_eq!</span>(d, RefCell::new(<span class=\"number\">5</span>));</code></pre></div>\n</div></details></div></details>",0,"rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#918\">source</a><a href=\"#impl-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#953\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple\nimmutable borrows can be taken out at the same time.</p>\n<h5 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h5>\n<p>Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow\"><code>try_borrow</code></a>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>borrowed_five = c.borrow();\n<span class=\"kw\">let </span>borrowed_five2 = c.borrow();</code></pre></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>m = c.borrow_mut();\n<span class=\"kw\">let </span>b = c.borrow(); <span class=\"comment\">// this causes a panic</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#988\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_borrow\" class=\"fn\">try_borrow</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowError.html\" title=\"struct core::cell::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is currently mutably\nborrowed.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple immutable borrows can be\ntaken out at the same time.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow\"><code>borrow</code></a>.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_ok());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1049\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<h5 id=\"panics-4\"><a href=\"#panics-4\">Panics</a></h5>\n<p>Panics if the value is currently borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow_mut\"><code>try_borrow_mut</code></a>.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"string\">&quot;hello&quot;</span>.to_owned());\n\n<span class=\"kw-2\">*</span>c.borrow_mut() = <span class=\"string\">&quot;bonjour&quot;</span>.to_owned();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>c.borrow(), <span class=\"string\">&quot;bonjour&quot;</span>);</code></pre></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>m = c.borrow();\n\n<span class=\"kw\">let </span>b = c.borrow_mut(); <span class=\"comment\">// this causes a panic</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1081\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_borrow_mut\" class=\"fn\">try_borrow_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowMutError.html\" title=\"struct core::cell::BorrowMutError\">BorrowMutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value, returning an error if the value is currently borrowed.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow_mut\"><code>borrow_mut</code></a>.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow_mut().is_err());\n}\n\n<span class=\"macro\">assert!</span>(c.try_borrow_mut().is_ok());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1116\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the underlying data in this cell.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>ptr = c.as_ptr();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1149\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this method borrows <code>RefCell</code> mutably, it is statically guaranteed\nthat no borrows to the underlying data exist. The dynamic checks inherent\nin <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" title=\"method core::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> and most other methods of <code>RefCell</code> are therefore\nunnecessary.</p>\n<p>This method can only be called if <code>RefCell</code> can be mutably borrowed,\nwhich in general is only the case directly after the <code>RefCell</code> has\nbeen created. In these situations, skipping the aforementioned dynamic\nborrowing checks may yield better ergonomics and runtime-performance.</p>\n<p>In most situations where <code>RefCell</code> is used, it can’t be borrowed mutably.\nUse <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" title=\"method core::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> to get mutable access to the underlying data then.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw-2\">*</span>c.get_mut() += <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.undo_leak\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1175\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.undo_leak\" class=\"fn\">undo_leak</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>cell_leak</code>)</span></div></span></summary><div class=\"docblock\"><p>Undo the effect of leaked guards on the borrow state of the <code>RefCell</code>.</p>\n<p>This call is similar to <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.get_mut\" title=\"method core::cell::RefCell::get_mut\"><code>get_mut</code></a> but more specialized. It borrows <code>RefCell</code> mutably to\nensure no borrows exist and then resets the state tracking shared borrows. This is relevant\nif some <code>Ref</code> or <code>RefMut</code> borrows have been leaked.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cell_leak)]\n</span><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">0</span>);\nstd::mem::forget(c.borrow_mut());\n\n<span class=\"macro\">assert!</span>(c.try_borrow().is_err());\nc.undo_leak();\n<span class=\"macro\">assert!</span>(c.try_borrow().is_ok());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_unguarded\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1209\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.try_borrow_unguarded\" class=\"fn\">try_borrow_unguarded</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowError.html\" title=\"struct core::cell::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is\ncurrently mutably borrowed.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>Unlike <code>RefCell::borrow</code>, this method is unsafe because it does not\nreturn a <code>Ref</code>, thus leaving the borrow flag untouched. Mutably\nborrowing the <code>RefCell</code> while the reference returned by this method\nis alive is undefined behaviour.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_ok());\n}</code></pre></div>\n</div></details></div></details>",0,"rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1228\">source</a><a href=\"#impl-RefCell%3CT%3E-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1247\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Takes the wrapped value, leaving <code>Default::default()</code> in its place.</p>\n<h5 id=\"panics-5\"><a href=\"#panics-5\">Panics</a></h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = c.take();\n\n<span class=\"macro\">assert_eq!</span>(five, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(c.into_inner(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"rustc_resolve::Resolutions"],["<section id=\"impl-Sync-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1256\">source</a></span><a href=\"#impl-Sync-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Sync","rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1303\">source</a></span><a href=\"#impl-PartialOrd%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1308\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-6\"><a href=\"#panics-6\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1316\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-7\"><a href=\"#panics-7\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1324\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-8\"><a href=\"#panics-8\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1332\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-9\"><a href=\"#panics-9\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1340\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-10\"><a href=\"#panics-10\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details>","PartialOrd","rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1357\">source</a></span><a href=\"#impl-From%3CT%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1359\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.</p>\n</div></details></div></details>","From","rustc_resolve::Resolutions"],["<section id=\"impl-Send-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1253\">source</a></span><a href=\"#impl-Send-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Send","rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1280\">source</a></span><a href=\"#impl-Default-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1283\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details>","Default","rustc_resolve::Resolutions"],["<section id=\"impl-Eq-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1300\">source</a></span><a href=\"#impl-Eq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Eq","rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1346\">source</a></span><a href=\"#impl-Ord-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1351\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-11\"><a href=\"#panics-11\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details>","Ord","rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1289\">source</a></span><a href=\"#impl-PartialEq%3CRefCell%3CT%3E%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;T&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1294\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-12\"><a href=\"#panics-12\">Panics</a></h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#231\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","rustc_resolve::Resolutions"],["<section id=\"impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1365\">source</a><a href=\"#impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;U&gt;,</span></h3></section>","CoerceUnsized","rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1259\">source</a></span><a href=\"#impl-Clone-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1265\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-13\"><a href=\"#panics-13\">Panics</a></h5>\n<p>Panics if the value is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1274\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-14\"><a href=\"#panics-14\">Panics</a></h5>\n<p>Panics if <code>other</code> is currently mutably borrowed.</p>\n</div></details></div></details>","Clone","rustc_resolve::Resolutions"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#2544\">source</a></span><a href=\"#impl-Debug-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#2545\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rustc_resolve::Resolutions"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()